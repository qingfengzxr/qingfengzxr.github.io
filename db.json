{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/stun/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/stun/source/images/algolia.svg","path":"images/algolia.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/loading.svg","path":"images/loading.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/js/header.js","path":"js/header.js","modified":0,"renderable":1},{"_id":"themes/stun/source/js/scroll.js","path":"js/scroll.js","modified":0,"renderable":1},{"_id":"themes/stun/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"themes/stun/source/js/stun-boot.js","path":"js/stun-boot.js","modified":0,"renderable":1},{"_id":"themes/stun/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/favicon-16x16.png","path":"images/icons/favicon-16x16.png","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/favicon-32x32.png","path":"images/icons/favicon-32x32.png","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/stun-logo.svg","path":"images/icons/stun-logo.svg","modified":0,"renderable":1},{"_id":"source/images/header.jpg","path":"images/header.jpg","modified":0,"renderable":0},{"_id":"themes/stun/source/images/header.jpg","path":"images/header.jpg","modified":0,"renderable":1},{"_id":"source/images/menu.jpg","path":"images/menu.jpg","modified":0,"renderable":0},{"_id":"source/images/blogbk.jpg","path":"images/blogbk.jpg","modified":0,"renderable":0},{"_id":"themes/stun/source/images/menu.jpg","path":"images/menu.jpg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/blogbk.jpg","path":"images/blogbk.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/stun/.commitlintrc.js","hash":"76ea83872acfd207aa554ba70d305d618493498f","modified":1594977252824},{"_id":"themes/stun/.cz-config.js","hash":"4fd1999ebda9b42993d421af0d4058984ca250d7","modified":1594977252812},{"_id":"themes/stun/.editorconfig","hash":"1ca001b8a7ed235eb9f5c21360b3a11eedb84ae7","modified":1594977252812},{"_id":"themes/stun/.eslintrc","hash":"1ba4f0ddd4bef04884c7fda6ef04f9d9697a62b4","modified":1594977252812},{"_id":"themes/stun/.gitignore","hash":"7745f04d70b1ea58b02d68dde999708836343c7a","modified":1594977252824},{"_id":"themes/stun/.prettierrc","hash":"4b6589404c509f4538daf6f3b8b3ee2ec37d2f4c","modified":1594977252812},{"_id":"themes/stun/.stylintrc","hash":"3305c42a95c986341d7c7dd03ed9f37a42da343c","modified":1594977252812},{"_id":"themes/stun/.travis.yml","hash":"01b368bb9fe874642b488a612d9b99fcf89454e2","modified":1594977252816},{"_id":"themes/stun/FAQ.md","hash":"56e38d5e5acf77e63d87991c29568a45ab6853e6","modified":1594977252812},{"_id":"themes/stun/LICENSE","hash":"c79ab3fe0ee8f2388376574dfe704b3df0c70a69","modified":1594977252812},{"_id":"themes/stun/README.md","hash":"be3e5cf47a83842addd57ebe7ff8b2c3e8ce207d","modified":1594977252812},{"_id":"themes/stun/README_en-US.md","hash":"c5e68319539d71476d8898e844c97069c57f6e8d","modified":1594977252812},{"_id":"themes/stun/_config.yml","hash":"2b6e20c63640f01c231e333d61dbfc2408471cb0","modified":1594990325816},{"_id":"themes/stun/package.json","hash":"f6ec59821d754ea9ba8d65e127c4704df969a3a8","modified":1594977252816},{"_id":"source/_data/stun.yml","hash":"2fd18de488755d9d886d63746ebd48fce06a9d1a","modified":1594990346629},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1594976989247},{"_id":"source/_posts/helloworld.md","hash":"f4f31d42d518d9f9d1cb7dba4e34587d61aba029","modified":1594990346629},{"_id":"source/categories/index.md","hash":"93e4e2aaaa1fa64d0877b33d123f68f6868bffd5","modified":1594990346629},{"_id":"source/tags/index.md","hash":"123555853b0d4a970babe45c569b67250f70fdab","modified":1594990346653},{"_id":"themes/stun/docs/README.md","hash":"ca7b6f0f858d579740b0590804633a89aeae8e39","modified":1594977252816},{"_id":"themes/stun/github/ISSUE_TEMPLATE.md","hash":"715fc0b0dd525c92ba22f7de0cde2690897e9c4b","modified":1594977252812},{"_id":"themes/stun/languages/en.yml","hash":"2947f4ceb833dd40c79fb2aa0ea5799ae444e1f5","modified":1594977252816},{"_id":"themes/stun/languages/zh-CN.yml","hash":"0cffc7416c502f674d4a32dab5b05a421c04797b","modified":1594977252816},{"_id":"themes/stun/languages/zh-HK.yml","hash":"1afd0e7b06515dd3e0f4542b8054c47aa6f39ec7","modified":1594977252816},{"_id":"themes/stun/layout/_layout.pug","hash":"e96f979b13286af6e2c7c4fad8f948dd8dd6d5a7","modified":1594977252816},{"_id":"themes/stun/layout/archive.pug","hash":"d45d078ae4196add83e21fcaed3ef168b237af90","modified":1594977252816},{"_id":"themes/stun/layout/category.pug","hash":"24153408b2971542d177227f09e93da7754bf75e","modified":1594977252816},{"_id":"themes/stun/layout/index.pug","hash":"df40cf1f051fd29f0f51ace74e9f7394f6ea2ab7","modified":1594977252812},{"_id":"themes/stun/layout/page.pug","hash":"a09149313a8d91bfbba74ef7e9a6082232afcde9","modified":1594977252816},{"_id":"themes/stun/layout/post.pug","hash":"a1cfdfcbfca4bdfbb601251596ced0c9364a06e1","modified":1594977252812},{"_id":"themes/stun/layout/tag.pug","hash":"46f956ad7e2aed879999ddf5e768d80c4bbe5b5f","modified":1594977252816},{"_id":"themes/stun/scripts/engine.js","hash":"a63a57c9206a77a79f93dbd86e86204447d7d904","modified":1594977252816},{"_id":"themes/stun/scripts/merge-config.js","hash":"b026a57d5591d23eca7d370b802049b4692b9a22","modified":1594977252816},{"_id":"source/_posts/C/note.md","hash":"bfb04a0f04d6f3e7a4d47e1a90e8452ac4f73a4a","modified":1609407756564},{"_id":"source/_posts/Linux/pthread.md","hash":"2f5586f79b212b102a1e25bfe02a7e9b0a4b69c5","modified":1609407959904},{"_id":"source/_posts/Nginx/note.md","hash":"2b50da9162ce79c1466008009bf4a3e1c293c308","modified":1609408039866},{"_id":"source/_posts/OS/note.md","hash":"e2d08e7042f6cbf613586ac344ea357877f74c91","modified":1609408106191},{"_id":"source/_posts/RabbitMQ/install_rabbitmq.sh","hash":"3d694e94d3303426c403bc5f4a20d979d7178821","modified":1609408137292},{"_id":"source/_posts/RabbitMQ/rabbitmqadmin","hash":"98fdee5e438105c1b707622a0520154cf3f1b78d","modified":1609408137292},{"_id":"source/_posts/network/计算机网络笔记与思考.md","hash":"d13d80105c6bed4ea3959119350c81586607cc3b","modified":1609243830459},{"_id":"source/_posts/oop/OOP.md","hash":"9b5c4157246baf0edfe45dc7728480c3f8fb5d0b","modified":1609408420546},{"_id":"source/_posts/plan/learning-plan.md","hash":"47c64543cbfbef01e6b52846af1fb18ee5eb438f","modified":1608457759811},{"_id":"themes/stun/docs/.vuepress/config.js","hash":"d672415b18a18a2980207b7b5b5ff1e9c48f0dfc","modified":1594977252816},{"_id":"themes/stun/docs/advanced/advanced.md","hash":"e30dfd24cadcd7bb0257e845c9b8d62f1815c1cf","modified":1594977252816},{"_id":"themes/stun/docs/advanced/assist.md","hash":"65cbe89bb3ae0ddb161f0fae50c799d5a15d9b6b","modified":1594977252816},{"_id":"themes/stun/docs/advanced/optimize.md","hash":"0d45bbc7be20642f59f4d47110029c4511f5b7dc","modified":1594977252816},{"_id":"themes/stun/docs/advanced/third-part.md","hash":"815563ea213c1fde294c9e4543cb4f98c96ac4a1","modified":1594977252816},{"_id":"themes/stun/docs/contribute/contribute.md","hash":"e5db2610c1ca78fd3f1d97f0a979bf8507d07148","modified":1594977252816},{"_id":"themes/stun/docs/guide/primary.md","hash":"d387f6a59f268ac074e68cb10333feb6dbb0c40c","modified":1594977252816},{"_id":"themes/stun/docs/guide/quick-start.md","hash":"fb16b55ec049390a724edc022f223d4dc7ea50cc","modified":1594977252816},{"_id":"themes/stun/docs/zh-CN/README.md","hash":"25204a495c550e0d62566ed73e2137b7b65ba577","modified":1594977252816},{"_id":"themes/stun/layout/_mixins/gallery.pug","hash":"3054e2c09bc205173c517fb1c36321f7c4c0db63","modified":1594977252816},{"_id":"themes/stun/layout/_mixins/menu-item.pug","hash":"93c4454e48a6f1456c29aeb9d1332be186b49d4f","modified":1594977252816},{"_id":"themes/stun/layout/_mixins/meta-item.pug","hash":"3d74dc8ba8651efd4a605e56a21e314678d04057","modified":1594977252816},{"_id":"themes/stun/layout/_mixins/post-header.pug","hash":"496216150f5c33887788168da6b8cb2975e0deba","modified":1594977252816},{"_id":"themes/stun/layout/_mixins/timeline.pug","hash":"4e19a670f002d3c6bc740a2d6ef03964e6b59c09","modified":1594977252816},{"_id":"themes/stun/layout/_partials/config.pug","hash":"962ef662a59a9a38a6ead9c5f8acbe8bb0720845","modified":1594977252816},{"_id":"themes/stun/layout/_scripts/stun.pug","hash":"961554914427578b57ea3912d751d398f4eb381d","modified":1594977252816},{"_id":"themes/stun/layout/_scripts/vendors.pug","hash":"62a6831d3b1d90d6c8335ce3402efc50e141eafb","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/pjax.pug","hash":"4a786459a8e6a4f378a9d834502f8b11aa66f185","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/quicklink.pug","hash":"2bed65ed4d314dc587e2359e20ae099b46181ed5","modified":1594977252816},{"_id":"themes/stun/scripts/filters/external-link.js","hash":"f38531772d1a444b3239a00f2db028fc86ab7342","modified":1594977252816},{"_id":"themes/stun/scripts/filters/image-setting.js","hash":"412318b6d189d5355dbcc52c9762072f7ecdaad4","modified":1594977252816},{"_id":"themes/stun/scripts/filters/lazyload.js","hash":"d5baf39faeff5368182be1f59fb598d023985cde","modified":1594977252816},{"_id":"themes/stun/scripts/filters/post-heading.js","hash":"6785e981bfcf87ca587bef36231be430bba2254d","modified":1594977252816},{"_id":"themes/stun/scripts/filters/shake-file.js","hash":"159dff6e4f7020545c9b151108398cd383d613e2","modified":1594977252816},{"_id":"themes/stun/scripts/filters/wrap-table.js","hash":"888c9eaaddcdb9b88d07837a9091aa39ed3fe677","modified":1594977252816},{"_id":"themes/stun/scripts/tags/friends.js","hash":"c2fe1e8e128f464d772bcb7534efef54ad224310","modified":1594977252816},{"_id":"themes/stun/scripts/tags/note.js","hash":"b436593a56e3bab8dd59c71e73ac9efbc8fa29d4","modified":1594977252816},{"_id":"themes/stun/scripts/tags/table.js","hash":"177061e1bfb296981a101643f51a27ccc1469307","modified":1594977252816},{"_id":"themes/stun/source/css/index.styl","hash":"8a75ec81fb064b0da2f978a064cc5bec2395f27d","modified":1594977252820},{"_id":"themes/stun/source/images/algolia.svg","hash":"90322f80db6ad0daf26ea3ec71dea6f691a8b2f1","modified":1594977252816},{"_id":"themes/stun/source/images/cc-by-nc-nd.svg","hash":"017ad912874686a982ebceae359299b8f2a492e2","modified":1594977252816},{"_id":"themes/stun/source/images/cc-by-nc-sa.svg","hash":"71d035c34219f924dbf1bf852166ee8fb58d2f24","modified":1594977252816},{"_id":"themes/stun/source/images/cc-by-nc.svg","hash":"4608189edbe7636dd651df65473298a3c5afb20d","modified":1594977252820},{"_id":"themes/stun/source/images/cc-by-nd.svg","hash":"20c66ae3c393903e6eab3bc8cf7c3be6d753f9f8","modified":1594977252820},{"_id":"themes/stun/source/images/cc-by-sa.svg","hash":"0455a8857ba096925d4145a56e8d10537fccb378","modified":1594977252820},{"_id":"themes/stun/source/images/cc-by.svg","hash":"77f74c241902447424207869c74cb9d9264bdced","modified":1594977252820},{"_id":"themes/stun/source/images/loading.svg","hash":"32a6e770d217ae6c0cf0f6beef3172f1b5b9a0a2","modified":1594977252820},{"_id":"themes/stun/source/js/header.js","hash":"63d407ee6f80114e220171ba829b79b28d420fe0","modified":1594977252824},{"_id":"themes/stun/source/js/scroll.js","hash":"8926ab87181a49c730ce5132518b608c54b8cdb1","modified":1594977252824},{"_id":"themes/stun/source/js/sidebar.js","hash":"a8d6c2411d226e885c3e3ebc9ed88555d8632406","modified":1594977252824},{"_id":"themes/stun/source/js/stun-boot.js","hash":"8358ac0d879c0ca340c52e4de606523c2a91e156","modified":1594977252824},{"_id":"themes/stun/source/js/utils.js","hash":"b570eafe77e47d7701348f172a4dbaaba6fa8123","modified":1594977252824},{"_id":"source/_posts/RabbitMQ/Publish_Subscribe/logs_from_rabbit.log","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1609408137292},{"_id":"source/_posts/RabbitMQ/routing/logs_from_rabbit.log","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1609408137292},{"_id":"source/_posts/DataStucture/BreadthFirstSearch/bfs.go","hash":"d204d66bc09f5d0d3edd79e27c135a9862e58892","modified":1609329408244},{"_id":"source/_posts/DataStucture/BreadthFirstSearch/map.gif","hash":"785a1e4fcad1b504be94856ab39344ab518ceb10","modified":1609329408248},{"_id":"source/_posts/DataStucture/BreadthFirstSearch/map.png","hash":"ceb390b6b73d3550cd511a9c931ba9e64a826eab","modified":1609329408248},{"_id":"source/_posts/DataStucture/BreadthFirstSearch/广度优先搜索算法详解.md","hash":"c197b2df33fce185bfc1c0d2db043d31400aba5f","modified":1609333008141},{"_id":"source/_posts/DataStucture/DepthFistSearch/dfs.go","hash":"a06444aa9cd704fe45e318797c7b0033959debff","modified":1609329408264},{"_id":"source/_posts/DataStucture/DepthFistSearch/map.png","hash":"ceb390b6b73d3550cd511a9c931ba9e64a826eab","modified":1609329408268},{"_id":"source/_posts/DataStucture/DepthFistSearch/深度优先搜索算法详解.md","hash":"0980ad977079eb68ba48936f340d6d2403062bbd","modified":1609332756563},{"_id":"source/_posts/DataStucture/Queue/queue.go","hash":"e3401678d8f82a483166e283a134a205352271e6","modified":1609329408280},{"_id":"source/_posts/RabbitMQ/Publish_Subscribe/emit_log.go","hash":"85d9da707aeca6d62d1a074a708c1ba8b2c84fe7","modified":1609408137292},{"_id":"source/_posts/RabbitMQ/Publish_Subscribe/receive_logs.go","hash":"93e77249c84f0a771bab1a29ff1b4c712d7d5774","modified":1609408137292},{"_id":"source/_posts/RabbitMQ/RPC/rpc_client.go","hash":"0ad1061768c3dd7f792423d1290dc02057110857","modified":1609408137292},{"_id":"source/_posts/RabbitMQ/RPC/rpc_server.go","hash":"4673beb134775d6e27bd4dc06454b837b27aee4f","modified":1609408137292},{"_id":"source/_posts/RabbitMQ/hello_world/recvive.go","hash":"ef20773c567f8787ea09af38d014dd00b0fa53d3","modified":1609408137288},{"_id":"source/_posts/RabbitMQ/hello_world/send.go","hash":"d7053b900e2e83e01968ac49d918410a75ac4fce","modified":1609408137288},{"_id":"source/_posts/RabbitMQ/routing/emit_log_direct.go","hash":"08f60aa92e18278e7d2d0c6a1d9146814a0aab55","modified":1609408137292},{"_id":"source/_posts/RabbitMQ/routing/receive_logs_direct.go","hash":"6c43a3bd237a19a43864fe10a1d98fe02f3cb231","modified":1609408137292},{"_id":"source/_posts/RabbitMQ/work_queue/new_task.go","hash":"5691c55fa383b3bb53015ab846c05cf645b96289","modified":1609408137292},{"_id":"source/_posts/RabbitMQ/work_queue/new_task_enhance.go","hash":"de97b28a777c0aa0b9fe450e96e8afd804fbb3dd","modified":1609408137292},{"_id":"source/_posts/RabbitMQ/work_queue/worker.go","hash":"99e4abc5e579cfcce44ef4d49962000441c25f78","modified":1609408137292},{"_id":"source/_posts/golang/bases/note.md","hash":"1bcfaf99d798dc15ec6c270b60166e60e47e97b6","modified":1594990346629},{"_id":"source/_posts/golang/characteristic/note.md","hash":"58f2b4c1751af4c1939a0c9cdce39ca578511291","modified":1594990346629},{"_id":"source/_posts/network/计算机网络笔记与思考/ISP的互联.jpg","hash":"899c5a6d43ae91e34244ccff4e7e41a98910d466","modified":1608457759811},{"_id":"themes/stun/docs/.vuepress/styles/index.styl","hash":"82767bfce39c705d788800dd46e1bcbc34d5f8e0","modified":1594977252816},{"_id":"themes/stun/docs/.vuepress/styles/palette.styl","hash":"de87beddf555a6e8573a6e3c4aa5147a6b12b745","modified":1594977252816},{"_id":"themes/stun/docs/zh-CN/advanced/advanced.md","hash":"fd06326895987f3b0182510df38db39631edee62","modified":1594977252816},{"_id":"themes/stun/docs/zh-CN/advanced/assist.md","hash":"88da5fda1f290c375f25edf99c7755a789c2e6ab","modified":1594977252816},{"_id":"themes/stun/docs/zh-CN/advanced/optimize.md","hash":"f01b537c98d81cdc6d083b9f63231f710ccbfddd","modified":1594977252816},{"_id":"themes/stun/docs/zh-CN/advanced/third-part.md","hash":"f6c9f0e432ff5e55adc26bdf52aba1f36a3aef85","modified":1594977252816},{"_id":"themes/stun/docs/zh-CN/contribute/contribute.md","hash":"e3d7431af4ca36743082acda66f69f0c1ab3edd3","modified":1594977252816},{"_id":"themes/stun/docs/zh-CN/guide/primary.md","hash":"782a98a755bf7a76b54ce61543fda1acbe02bc6a","modified":1594977252816},{"_id":"themes/stun/docs/zh-CN/guide/quick-start.md","hash":"eab5a8846af88127f67610b2439be47745fc400e","modified":1594977252816},{"_id":"themes/stun/layout/_partials/analytics/busuanzi.pug","hash":"80d2f4f8706a96b367ac1e89f5b56ada4684d571","modified":1594977252816},{"_id":"themes/stun/layout/_partials/footer/footer.pug","hash":"9a8e56bcc504f251c13ee3d0d18a08142fb7ee43","modified":1594977252816},{"_id":"themes/stun/layout/_partials/head/head.pug","hash":"c7909a6a50c7a76a6c1810b700a5d72bcb1e20c9","modified":1594977252816},{"_id":"themes/stun/layout/_partials/head/kill-old-ie.pug","hash":"427a95d02844f29e63c5e9f014ede3609aec1a5b","modified":1594977252816},{"_id":"themes/stun/layout/_partials/header/header.pug","hash":"7ecbe18da15d3a52c56f69c542540291b6178763","modified":1594977252816},{"_id":"themes/stun/layout/_partials/post/post-list.pug","hash":"c049078009aa251fc76cd948837c7a5efdd39cb2","modified":1594977252816},{"_id":"themes/stun/layout/_partials/search/algolia.pug","hash":"a147632c51b2d29f6fbcc471bb00d0acac2b5f54","modified":1594977252816},{"_id":"themes/stun/layout/_partials/search/index.pug","hash":"0f84aa013a96e7eb3bb25b87f20bab9b7ac55538","modified":1594977252816},{"_id":"themes/stun/layout/_partials/search/localsearch.pug","hash":"2119ec20dc858d77d23bef5bac9b63a1fcbfdaf1","modified":1594977252816},{"_id":"themes/stun/layout/_partials/sidebar/sidebar.pug","hash":"bb72c81526958b6484979a73a8a80f0702bec795","modified":1594977252816},{"_id":"themes/stun/layout/_partials/widgets/back2top.pug","hash":"48b7fedeb472bd01fd1f3317359a10e83ca919e1","modified":1594977252816},{"_id":"themes/stun/layout/_partials/widgets/comments.pug","hash":"5574a4989e5652bc3c0006bf0bceb95a3f64e1f0","modified":1594977252816},{"_id":"themes/stun/layout/_partials/widgets/copyright.pug","hash":"0938c885697f6eb388b28ddbf88f5631d024fe73","modified":1594977252816},{"_id":"themes/stun/layout/_partials/widgets/loading-bar.pug","hash":"6cda7866f9589c9ffc05ce4a3d7c33b706e70324","modified":1594977252816},{"_id":"themes/stun/layout/_partials/widgets/night-mode.pug","hash":"c7f9bd67cd231b9bd40a84123644e009ac8d8ef3","modified":1594977252816},{"_id":"themes/stun/layout/_partials/widgets/paginator.pug","hash":"b0045dcb9b151ee31f1db5b7d741f10ef3b74be0","modified":1594977252816},{"_id":"themes/stun/layout/_partials/widgets/reward.pug","hash":"c9081c1dcf0ca18df06d23638654d8f43b28d55c","modified":1594977252816},{"_id":"themes/stun/layout/_partials/widgets/share.pug","hash":"1bb3d25298b7ee6a28150aa286ed6b0ae42ead4f","modified":1594977252816},{"_id":"themes/stun/layout/_partials/widgets/sticky-top.pug","hash":"bf86b2f9f4b1471afb8b31965d3230f6088682ae","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/advertising/google-adsense.pug","hash":"e489020f1130976d3ec2245915ede6319d89b89c","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/advertising/index.pug","hash":"1285cd65a873f688ae3c51846c1284447f502adc","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/analytics/baidu-analytics.pug","hash":"f7300991a29dbe2e8091a588dfa8c65c3dee6302","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/analytics/busuanzi.pug","hash":"78a4fc9c9380e31536f5b500638f2d005accd361","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/analytics/google-analytics.pug","hash":"4eef66fbb8a8ad55e0868cf4b77a6b7bca0e7f35","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/analytics/index.pug","hash":"0d72f844bf9532b3be644c27b0af7cb4331fc46c","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/analytics/tencent-analytics.pug","hash":"f88fb0f085812db6023c30308ba3458da7742993","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/comments/disqus.pug","hash":"57bcbaac3d237d9168dd8f4b682f34351f11d250","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/comments/gitalk.pug","hash":"c2a90e80c51b5b99e6804dbed5457a071b980bbd","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/comments/index.pug","hash":"08c98b031589a617b627ba0a9f778bf5f5217cd8","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/comments/livere.pug","hash":"687f74a998519608944b40a41f3a98ccf4535139","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/comments/minivaline.pug","hash":"5584ade7dd19deca418373115bde9d563d37d826","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/comments/utterances.pug","hash":"6418baeb3aedcddb02a64bd89b26ac12e18551c8","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/comments/valine.pug","hash":"b519a6948d6ef37c037385e3e3f9590c17f7ad62","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/math/index.pug","hash":"e952be6c736545e73c0e02f833f87a4f8c5a2582","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/math/katex.pug","hash":"345c59fe76a7c83b529328e5144d1036cb14f533","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/math/mathjax.pug","hash":"72d51538cc85f01c8c64db74b9219ccaf334c9e9","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/search/algolia.pug","hash":"54233748e22ceae063f70ee49b44c4bd0a78f391","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/search/index.pug","hash":"0f84aa013a96e7eb3bb25b87f20bab9b7ac55538","modified":1594977252816},{"_id":"themes/stun/layout/_third-party/search/localsearch.pug","hash":"0eac831a946875d24e5da185030121c445d859db","modified":1594977252816},{"_id":"themes/stun/source/css/_common/index.styl","hash":"86057db6cb18263866d62a6669feee8752882398","modified":1594977252820},{"_id":"themes/stun/source/css/_common/responsive.styl","hash":"618c6005f1bc7c482fa37ae3ce15729a64044d9d","modified":1594977252824},{"_id":"themes/stun/source/css/_custom/index.styl","hash":"0d1adc70250941074c742f94f7801b3b43a7f1db","modified":1594977252824},{"_id":"themes/stun/source/css/_mixins/index.styl","hash":"f3060519f3acd05cb4b26bb5f6a5c6b857cb0d68","modified":1594977252820},{"_id":"themes/stun/source/css/_variables/index.styl","hash":"c81aac4285eb058026b255e31282d35f55a820ab","modified":1594977252824},{"_id":"themes/stun/source/images/icons/favicon-16x16.png","hash":"7bfd64eac26e17ea162f0c399a4a40164c26b412","modified":1594977252820},{"_id":"themes/stun/source/images/icons/favicon-32x32.png","hash":"02fead07726920400ede57ddfdbf071dd7203fd5","modified":1594977252820},{"_id":"themes/stun/source/images/icons/stun-logo.svg","hash":"069dc7590ad152373f1c346d892e32faa2bbdd87","modified":1594977252820},{"_id":"source/_posts/SQL/mysql/note.md","hash":"d18883891d7f082ddb9f2f9250df9e4ca44348f9","modified":1609408255542},{"_id":"source/_posts/DataStucture/DepthFistSearch/map.gif","hash":"f06b636fba3b8eab9bdde0b31a56aa8b4c807cc3","modified":1609329408268},{"_id":"themes/stun/docs/.vuepress/public/icons/favicon-192x192.png","hash":"98586e2072e13b6da61599f56c744dda333bd4f2","modified":1594977252816},{"_id":"themes/stun/docs/.vuepress/public/icons/favicon-32x32.png","hash":"02fead07726920400ede57ddfdbf071dd7203fd5","modified":1594977252816},{"_id":"themes/stun/source/css/_common/components/index.styl","hash":"a54720db94121efd1a34ac88d344197c8206837e","modified":1594977252824},{"_id":"themes/stun/source/css/_common/outline/index.styl","hash":"467d4171c0690a95d40fbecea02e6b212b7c74f1","modified":1594977252824},{"_id":"themes/stun/source/css/_common/outline/macro.styl","hash":"13b96f239de15e1cfdc14d9c80e6959506556dd2","modified":1594977252824},{"_id":"themes/stun/source/css/_common/scaffolding/base.styl","hash":"4064a7e2c3f71d2ed72a47edd60e9be01af6c354","modified":1594977252820},{"_id":"themes/stun/source/css/_common/scaffolding/index.styl","hash":"e750f2dae9eb3385039ee018ff8001b0e6ec3b64","modified":1594977252820},{"_id":"themes/stun/source/css/_common/scaffolding/normalize.styl","hash":"c15a9616fddb267431416304d709185aeb3d45f5","modified":1594977252820},{"_id":"themes/stun/source/css/_common/scaffolding/utils.styl","hash":"7e62f34521ea539a25a101f25e1684e3a3ac4be8","modified":1594977252820},{"_id":"themes/stun/package-lock.json","hash":"16f46a3625daaac88dd39bf179215fa2e6c6c2a4","modified":1594977252812},{"_id":"themes/stun/source/css/_common/components/analytics/busuanzi.styl","hash":"d196c88ea2e9b851e8d8f9c5a315dfc2929eb897","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/analytics/index.styl","hash":"339a43fd5ee97a77775b723118f6ab1af754fed4","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/footer/index.styl","hash":"14464841145cf3ecab66f1094653daa033c261eb","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/header/index.styl","hash":"904af0e73cdf0767ec781271856d7b5b63e043ef","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/highlight/diff.styl","hash":"056e70f6dfe45ec50427d7ab293d33361c9b956f","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/highlight/highlight.styl","hash":"bc0b01021a0d19b2c98f0c5c9fa1af96d67c1099","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/highlight/index.styl","hash":"85848179cbc78152d2521b601ac9f888dea4e255","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/highlight/theme.styl","hash":"dfc99b05302f8203040431e563c9f63d63da46de","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/pages/index.styl","hash":"463a4e6a92ec5f757e167fbeb171e4e92e83a822","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/pages/page.styl","hash":"df732e267dfd9f1bda6a8cf1ede3198a205925f9","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/pages/timeline.styl","hash":"21e9c8def1613030f0927e2ce80f4ecc721f078e","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/plugins/friends.styl","hash":"bdb015173f8e5fa391fc4fb2b2a8d42787022c4b","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/plugins/index.styl","hash":"c35d0cf421c6669ee0458c2f0264dca05769c01d","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/plugins/note.styl","hash":"ae0ad9b44a87839d220792336478a9ae6db11c47","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/plugins/table.styl","hash":"98cacc91e42f5e45279e2174a90ab26171085e2f","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/post/index.styl","hash":"08aad11e329cda0550efef226e0c4d0bb4540454","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/post/post-list.styl","hash":"d0ed844e28533f832cbd9b3f09203d16936628f7","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/post/post.styl","hash":"db3d80c98b0007f6f96973758c817a825dac14a1","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/search/algolia.styl","hash":"fb62e4baf25a66e46c27783be5d79353ec394b44","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/search/common.styl","hash":"7d420651847366b1ce5f3b6aed6daf72ae4ab8c8","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/search/index.styl","hash":"1990d2c2a9bfe8e09d656f0c2ae6cf0c9f7f5542","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/search/localsearch.styl","hash":"e3406f962c1d77f356f5b32a0cc49c75e64ec80f","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/sidebar/index.styl","hash":"02138647437f7e8ee8927cae225d41072d936bdc","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/back2top.styl","hash":"b3da5ea71a9947e781056d1bd7d42e4045fa2aca","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/comments.styl","hash":"71fd7b37c7a5b2ed4563fd530608d5a894444930","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/copy-button.styl","hash":"378961fa7c986e3313053814806902bf76204a93","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/copyright.styl","hash":"1d28fc8f76f7164a306ed81a9ede21c0a2b0f7cd","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/ending.styl","hash":"63985ca9a3f6c481cc60207966fa1267de14d945","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/fancybox.styl","hash":"3d677c0323d77199bb9fbfefd65e97d8b882d7b3","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/font-icon.styl","hash":"bdda0953611378e93a8d6387cbdc93e1de4f7f0a","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/gallery-image.styl","hash":"99b1cc42f38816083f93233778b299422b6d8f32","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/index.styl","hash":"43de37ef3102c6a7fb9896fa747fc3cb797fd6e1","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/lazyload.styl","hash":"eced96235f0ff5dc6a8fd068d4ed05934a29b430","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/loading-bar.styl","hash":"9f23e8762d01fb4a3cbf5e786fdead2926849e8a","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/night-mode.styl","hash":"9caeef13a913aba38976f082e1f0ca191bffc64e","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/paginator.styl","hash":"71ddb6a1e9664a4fde04a0ce143b8786ba6e0089","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/reward.styl","hash":"de1130ec3765879884cbdc77a15b458da6e37bcc","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/share.styl","hash":"fe32e3434107d92cefd7aacfdcef526a93c4b865","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/sticky-top.styl","hash":"f0e37944168a74a64b18dc54c6fde2308e4bf023","modified":1594977252824},{"_id":"themes/stun/source/css/_common/components/widgets/zoom-image.styl","hash":"40f832a199320642debabe32910c1168e3c6e40c","modified":1594977252824},{"_id":"source/images/header.jpg","hash":"82e4494fb2741a29fb1732bd57465072a176cc1c","modified":1594990346653},{"_id":"themes/stun/source/images/header.jpg","hash":"82e4494fb2741a29fb1732bd57465072a176cc1c","modified":1594977252816},{"_id":"source/images/menu.jpg","hash":"2ded4d0dbdada6877726a304df44b3c1e4bf30bf","modified":1594990346637},{"_id":"source/images/blogbk.jpg","hash":"2cff3b5e7e181c7666c2e6e3ed0ad3b3cdf960e3","modified":1594990346633},{"_id":"themes/stun/source/images/menu.jpg","hash":"2ded4d0dbdada6877726a304df44b3c1e4bf30bf","modified":1594977252820},{"_id":"source/_posts/DataStucture/Queue/queue","hash":"59da2114761b84d848e35c82d7adea4bc94b61f7","modified":1609329408280},{"_id":"themes/stun/source/images/blogbk.jpg","hash":"2cff3b5e7e181c7666c2e6e3ed0ad3b3cdf960e3","modified":1594977252820},{"_id":"source/_posts/DataStucture/DepthFistSearch/dfs","hash":"5ba0e0e7801e262a62b8602f04dc12792df6006b","modified":1609329408264},{"_id":"source/_posts/DataStucture/BreadthFirstSearch/bfs","hash":"99134163ece880d88400f895fc9dabe6be9c7b67","modified":1609329408244},{"_id":"public/categories/index.html","hash":"ec2dce4cd3381c09a90bae5417c321eac5d51fa9","modified":1612852868889},{"_id":"public/tags/index.html","hash":"2626a43714f91a70e51fdc69f007be12f3e7cb22","modified":1612852868889},{"_id":"public/2020/12/31/Nginx/note/index.html","hash":"33a2d3d7ec38d605fef33e6f773c642bf4976c09","modified":1612852868889},{"_id":"public/2020/12/31/Linux/pthread/index.html","hash":"33da9d87d2bf587f1dc7ca3984d244009ec09422","modified":1612852868889},{"_id":"public/2020/08/09/network/计算机网络笔记与思考/index.html","hash":"e061f644cecb03159ceb7fb5748cd8b7c92918d0","modified":1612852868889},{"_id":"public/2020/07/21/plan/learning-plan/index.html","hash":"e91d20dd2cfa0641f9d21a2d3281b1ecd16bbb11","modified":1612852868889},{"_id":"public/2020/07/17/hello-world/index.html","hash":"09a1400f90b41d46be863c9522e469ef74a5cdf7","modified":1612852868889},{"_id":"public/2020/07/17/OS/note/index.html","hash":"6c5f35b9e9acaa7165ec7b81510f00aa623a56fe","modified":1612852868889},{"_id":"public/2020/07/17/golang/characteristic/note/index.html","hash":"9b6f0388fe7b4d3b9b5578ee015e21d6d1e972f6","modified":1612852868889},{"_id":"public/2020/07/16/helloworld/index.html","hash":"821fe969b12151ab637e1e6cb38bac7fa448d798","modified":1612852868889},{"_id":"public/archives/index.html","hash":"8139e0f3e1cfb7fe12dc81bac9ac0ebc9b3a4dd2","modified":1612852868889},{"_id":"public/archives/page/2/index.html","hash":"1ec8bbdc31cf7bced83eef5ebfa15ca5f73ba2d9","modified":1612852868889},{"_id":"public/archives/2020/index.html","hash":"f2ab0c854d6caff5d9a7ee14390c2dda86c4dadf","modified":1612852868889},{"_id":"public/archives/2020/page/2/index.html","hash":"d32538aaa7dbc0cb82ecbc99a5dfdbb3a4235cec","modified":1612852868889},{"_id":"public/archives/2020/07/index.html","hash":"6839184691040c801412e2410a767413cabcc14f","modified":1612852868889},{"_id":"public/archives/2020/08/index.html","hash":"444cf13d73e0bb630c23bbce5e2726262130469d","modified":1612852868889},{"_id":"public/archives/2020/11/index.html","hash":"30c9831090028dc867a34c609a43ad0616a73576","modified":1612852868889},{"_id":"public/archives/2020/12/index.html","hash":"b68d57416477374d9d0d0cf9bc453233df9da7f4","modified":1612852868889},{"_id":"public/categories/C/index.html","hash":"2683df67abc7244305810e7167f409d552693ea0","modified":1612852868889},{"_id":"public/categories/Linux/index.html","hash":"6da48950f90eaccbeb609e7c88603789540b6517","modified":1612852868889},{"_id":"public/categories/nginx/index.html","hash":"8698a83bb7d3b02b36b80f051d692741cd8e5a1c","modified":1612852868889},{"_id":"public/categories/OS/index.html","hash":"d05a1dd770f4af0d1b5cefcfa4a60ca63768a8f8","modified":1612852868889},{"_id":"public/categories/computer-network/index.html","hash":"9b0525e36cc6df5d32be31bef9e240df7ae82215","modified":1612852868889},{"_id":"public/categories/oop/index.html","hash":"90b680753a7d2269b7d96ff96dda4decd7136538","modified":1612852868889},{"_id":"public/categories/Linux/pthread/index.html","hash":"4021490a7b9606a41435a02bd430d700dbbcf9a1","modified":1612852868889},{"_id":"public/categories/plan/index.html","hash":"90b70de2d1dd569bea78796a0c6682cd02cb9946","modified":1612852868889},{"_id":"public/categories/datastruct/index.html","hash":"2fcb25b9b71df7e3949dbab2af8789f60c301922","modified":1612852868889},{"_id":"public/categories/golang/index.html","hash":"f2c17628e011a242e39f4d54c17ba292e9467f99","modified":1612852868889},{"_id":"public/categories/datastruct/algorithm/index.html","hash":"78314e841f65b7ecad93711273b87c15d0bfe393","modified":1612852868889},{"_id":"public/categories/golang/base/index.html","hash":"c7a098583a9c0edbbd48d3e21197f9d475254ffb","modified":1612852868889},{"_id":"public/categories/golang/characteristic/index.html","hash":"5b2e4ea59e2d26093d487201eb0fa9d88bbb1b34","modified":1612852868889},{"_id":"public/categories/SQL/index.html","hash":"c046b0243e58efde7284d44f0195a7b7670effa0","modified":1612852868889},{"_id":"public/categories/SQL/MYSQL/index.html","hash":"ba733c8b306ec370560a688629d64329b2ce9d3b","modified":1612852868889},{"_id":"public/tags/C/index.html","hash":"06eca84e300980e515b0e8cfa2f2b96961e3c5a5","modified":1612852868889},{"_id":"public/tags/Linux/index.html","hash":"9e14518a9529ed19708489cdc2f3e609c94f3ed5","modified":1612852868889},{"_id":"public/tags/pthread/index.html","hash":"2f8ccfdc39c203cc2da0bf1da7807955537e5a7d","modified":1612852868889},{"_id":"public/tags/nginx/index.html","hash":"0fa29a33a77025f4aac27b2e7f467ad270350668","modified":1612852868889},{"_id":"public/tags/OS/index.html","hash":"879b4358156b34bbf7378477b95c9cf1fb57f43c","modified":1612852868889},{"_id":"public/tags/computer-network/index.html","hash":"698e9acb361aefb5ca2327ac88a31253ce936949","modified":1612852868889},{"_id":"public/tags/oop/index.html","hash":"a6e835a46327c4692c7400ca17834a96fc2a795d","modified":1612852868889},{"_id":"public/tags/learning-plan/index.html","hash":"c8482749cd15561fa450ac74e88337f6465a7dd7","modified":1612852868889},{"_id":"public/tags/algorithm/index.html","hash":"fa81a3524ba4799ff30d10bd8d05d44d2504349a","modified":1612852868889},{"_id":"public/tags/programming-language/index.html","hash":"d6582f4a42ef29b256038407ca2508a17037b154","modified":1612852868889},{"_id":"public/tags/golang/index.html","hash":"ecca8d837c12b7ce0df7c6144c69def5b476bb8b","modified":1612852868889},{"_id":"public/tags/MYSQL/index.html","hash":"63924fbec3b48cf9effba5bee0a666de2a81e215","modified":1612852868889},{"_id":"public/2020/11/10/oop/OOP/index.html","hash":"df4a4c6ba47273dd242e034f142a1076a87419d4","modified":1612852868889},{"_id":"public/2020/07/17/golang/bases/note/index.html","hash":"94b06b94944cefae492f1cbc12894869780c6770","modified":1612852868889},{"_id":"public/2020/07/17/DataStucture/BreadthFirstSearch/广度优先搜索算法详解/index.html","hash":"c752167052e4a5dd3e4bd07e78ab328c80703765","modified":1612852868889},{"_id":"public/2020/07/17/DataStucture/DepthFistSearch/深度优先搜索算法详解/index.html","hash":"84d60c0230672693759fbc6a6f976e8205392e0f","modified":1612852868889},{"_id":"public/2020/07/17/C/note/index.html","hash":"bc402c3ee172747977eadd2791a832e2ccdc1793","modified":1612852868889},{"_id":"public/2020/07/17/SQL/mysql/note/index.html","hash":"0c645beab33643caf8e3b39969a5f42749a5f19d","modified":1612852868889},{"_id":"public/index.html","hash":"d468951e453c35c3e47c63c3ba4c1e5e25f547a1","modified":1612852868889},{"_id":"public/page/2/index.html","hash":"57ec2f1bade5c2ac724eb574bf773c15842d6d84","modified":1612852868889},{"_id":"public/images/algolia.svg","hash":"90322f80db6ad0daf26ea3ec71dea6f691a8b2f1","modified":1609408573000},{"_id":"public/images/cc-by-nc-nd.svg","hash":"017ad912874686a982ebceae359299b8f2a492e2","modified":1609408573000},{"_id":"public/images/cc-by-nc-sa.svg","hash":"71d035c34219f924dbf1bf852166ee8fb58d2f24","modified":1609408573000},{"_id":"public/images/cc-by-nc.svg","hash":"4608189edbe7636dd651df65473298a3c5afb20d","modified":1609408573000},{"_id":"public/images/cc-by-nd.svg","hash":"20c66ae3c393903e6eab3bc8cf7c3be6d753f9f8","modified":1609408573000},{"_id":"public/images/cc-by-sa.svg","hash":"0455a8857ba096925d4145a56e8d10537fccb378","modified":1609408573000},{"_id":"public/images/cc-by.svg","hash":"77f74c241902447424207869c74cb9d9264bdced","modified":1609408573000},{"_id":"public/images/loading.svg","hash":"32a6e770d217ae6c0cf0f6beef3172f1b5b9a0a2","modified":1609408573000},{"_id":"public/images/icons/favicon-16x16.png","hash":"7bfd64eac26e17ea162f0c399a4a40164c26b412","modified":1609408573000},{"_id":"public/images/icons/favicon-32x32.png","hash":"02fead07726920400ede57ddfdbf071dd7203fd5","modified":1609408573000},{"_id":"public/images/icons/stun-logo.svg","hash":"069dc7590ad152373f1c346d892e32faa2bbdd87","modified":1609408573000},{"_id":"public/2020/08/09/network/计算机网络笔记与思考/ISP的互联.jpg","hash":"899c5a6d43ae91e34244ccff4e7e41a98910d466","modified":1609408573000},{"_id":"public/js/header.js","hash":"63d407ee6f80114e220171ba829b79b28d420fe0","modified":1609408573000},{"_id":"public/js/scroll.js","hash":"8926ab87181a49c730ce5132518b608c54b8cdb1","modified":1609408573000},{"_id":"public/js/sidebar.js","hash":"a8d6c2411d226e885c3e3ebc9ed88555d8632406","modified":1609408573000},{"_id":"public/js/stun-boot.js","hash":"8358ac0d879c0ca340c52e4de606523c2a91e156","modified":1609408573000},{"_id":"public/css/index.css","hash":"9dfd293a9e000edf52ba2560519950b42d2ff825","modified":1609408573000},{"_id":"public/js/utils.js","hash":"b570eafe77e47d7701348f172a4dbaaba6fa8123","modified":1609408573000},{"_id":"public/images/header.jpg","hash":"82e4494fb2741a29fb1732bd57465072a176cc1c","modified":1609408573000},{"_id":"public/images/menu.jpg","hash":"2ded4d0dbdada6877726a304df44b3c1e4bf30bf","modified":1609408573000},{"_id":"public/images/blogbk.jpg","hash":"2cff3b5e7e181c7666c2e6e3ed0ad3b3cdf960e3","modified":1609408573000},{"_id":"source/_posts/Docker/note.md","hash":"80c36410aa9036e9d66121474c58738c70509cb5","modified":1612852802628},{"_id":"public/archives/2020/07/page/2/index.html","hash":"0470036a3c19ff636ebbd6e7bf6e3133cb736991","modified":1612852868889},{"_id":"public/categories/Docker/index.html","hash":"faba0326195646e6bb41c3bdf0950e721bbe0099","modified":1612852868889},{"_id":"public/tags/Docker/index.html","hash":"a2e883c71f20f7acd8a1a6faddd9c6f72b6f903b","modified":1612852868889},{"_id":"public/2020/07/17/Docker/note/index.html","hash":"da8f3c399717e02a11a8beb8aa0d9d512df02071","modified":1612852868889}],"Category":[{"name":"C","_id":"ckjcobavd0006helz0ygtgk0w"},{"name":"Linux","_id":"ckjcobavm000bhelzfkn39m8m"},{"name":"nginx","_id":"ckjcobavq000hhelz90n59ppe"},{"name":"OS","_id":"ckjcobavr000jhelz80m5hvg8"},{"name":"computer network","_id":"ckjcobavt000ohelzdof99cgn"},{"name":"oop","_id":"ckjcobavu000shelz2i7kbuy5"},{"name":"pthread","parent":"ckjcobavm000bhelzfkn39m8m","_id":"ckjcobavv000vhelz64shhm8s"},{"name":"plan","_id":"ckjcobavw0010helz8laz9wi8"},{"name":"datastruct","_id":"ckjcobbbk001bhelzddj3119z"},{"name":"golang","_id":"ckjcobbbr001hhelzg6k12zss"},{"name":"algorithm","parent":"ckjcobbbk001bhelzddj3119z","_id":"ckjcobbbu001lhelzf7rk74zs"},{"name":"base","parent":"ckjcobbbr001hhelzg6k12zss","_id":"ckjcobbbx001rhelz5ymaftyt"},{"name":"characteristic","parent":"ckjcobbbr001hhelzg6k12zss","_id":"ckjcobbc8001whelz8gtj0ibn"},{"name":"SQL","_id":"ckjcobbcq0025helzdukf5m0l"},{"name":"MYSQL","parent":"ckjcobbcq0025helzdukf5m0l","_id":"ckjcobbcr0027helz7iyv4uav"},{"name":"Docker","_id":"ckkxmyjs20001iqlzcmezf83q"}],"Data":[{"_id":"stun","data":{"shake_file":true,"index_subtitle":false,"canonical":true,"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu360_site_verification":null,"sougou_site_verification":null,"menu":{"home":"/ || fas fa-home","archives":"/archives/ || fas fa-folder-open","categories":"/categories/ || fas fa-layer-group","tags":"/tags/ || fas fa-tags"},"submenu":null,"menu_settings":{"icon_only":false,"text_only":false},"favicon":{"small":"/images/icons/favicon-16x16.png","medium":"/images/icons/favicon-32x32.png"},"pwa":{"enable":false,"manifest":"/manifest.json","theme_color":"#54bcff"},"night_mode":{"enable":true,"button":{"color":"#fafafa","bg_color":"#8c8a8a"},"icon":{"dark":"🌜","light":"🌞"}},"layout":{"content":"768px","sidebar":"300px","content_sidebar_gap":"30px","main_padding":{"default":"20px","tablet":"15px","mobile":"10px"}},"header":{"enable":true,"show_on":{"post":true},"height":"80%","bg_image":{"enable":true,"url":"/images/header.jpg"},"mask":{"enable":true,"opacity":0.5},"nav":{"height":"50px","bg_color":"#333"},"scroll_down_icon":{"enable":false,"name":"fas fa-angle-down","animation":true}},"body":{"bg_image":{"enable":true,"url":"/images/blogbk.jpg","fixed":true,"repeat":false},"mask":{"enable":false,"opacity":{"default":0.1,"night_mode":0.6}}},"footer":{"bg_image":{"enable":false,"url":null},"mask":{"enable":false,"opacity":0.5},"copyright":{"enable":true,"text":null,"since":null,"end":null},"icon":{"enable":true,"name":"fas fa-heart","animation":false,"color":"#ff0000"},"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":false,"icp":null},"custom":{"enable":false,"text":null}},"creative_commons":{"enable":true,"license":"BY-NC-SA","sidebar":true,"post":true,"language":null},"back2top":{"enable":true,"icon":{"name":"fas fa-rocket","rotate":"-45deg","color":"#49b1f5","hover_color":"#fc6423"}},"sidebar":{"enable":true,"position":"right","offsetTop":"20px","horizon_line":false},"author":{"enable":true,"avatar":{"url":"/images/icons/stun-logo.svg","rounded":false,"opacity":1,"animation":"turn"},"motto":"hello world"},"social":{"github":"https://github.com/ || fab fa-github","google":"https://plus.google.com/ || fab fa-google","twitter":"https://twitter.com/ || fab fa-twitter","youtube":"https://youtube.com/ || fab fa-youtube"},"social_setting":{"enable":false,"icon_only":true},"toc":{"enable":true,"list_number":true,"wrap":true,"expand_all":false,"min_depth":1,"max_depth":6},"feed":{"enable":false,"email":null,"rss":null},"reading_progress":{"enable":true,"color":"#fc6423","height":"1px"},"codeblock":{"style":"default","highlight":"light","word_wrap":false},"heading_line":true,"reward":{"enable":false,"alipay":null,"wechat":null},"post_meta":{"icon_only":false,"created":{"enable":true,"icon":"far fa-calendar-plus"},"updated":{"enable":true,"icon":"far fa-calendar-check"},"reading_time":{"enable":false,"icon":"far fa-clock","speed":{"zh":200,"en":80}},"word_count":{"enable":false,"icon":"far fa-file-word"}},"post_list":{"paginate":{"home":true,"archives":false},"cover_image":{"home":false}},"post_widget":{"tags":true,"end_text":{"enable":true,"horizon_line":true},"share":{"enable":false,"label":"Share to: ","target":"qzone, qq, weibo, wechat, douban, linkedin, facebook, twitter, google"}},"stick_top":{"position":"right","icon":"fas fa-thumbtack","rotate":"45deg","color":"#999"},"gitalk":{"enable":false,"owner":null,"repo":null,"client_id":null,"client_secret":null,"admin":null,"distraction_free_mode":false,"language":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"Just go go","avatar":"mp","meta":"nick,mail,link","pageSize":10,"visitor":false,"recordIP":false,"language":null},"minivaline":{"enable":false,"appId":null,"appKey":null,"placeholder":"Write a Comment","adminEmailMd5":null,"math":true,"md":true,"lang":null},"livere":{"enable":false,"uid":null},"disqus":{"enable":false,"shortname":null,"count":true},"utterances":{"enable":false,"owner":null,"repo":null,"mapping":"title","label":"utterances","theme":"github-light","script_url":"https://utteranc.es/client.js"},"busuanzi":{"enable":false,"icon_only":false,"site_uv":{"enable":true,"icon":"fas fa-user"},"site_pv":{"enable":true,"icon":"fas fa-eye"},"post_pv":{"enable":true,"icon":"fas fa-eye"}},"google_analytics":null,"baidu_analytics":null,"tencent_analytics":null,"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"show_stats":true}},"local_search":{"enable":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"canvas_nest":{"enable":true,"color":"0,0,0","opacity":0.6,"count":200,"zIndex":-1},"math":{"enable":false,"per_page":false,"engine":"katex","mathjax":{"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","mhchem":{"enable":false,"mhchem_js":"https://cdn.jsdelivr.net/npm/mathjax-mhchem@3.3.2/mhchem.min.js"}},"katex":{"cdn":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css","copy_tex":{"enable":true,"copy_tex_js":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.min.js","copy_tex_css":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.css"}}},"fancybox":false,"zoom_image":{"enable":true,"mask_color":"rgba(0,0,0,0.6)","gap_aside":"20px"},"gallery_waterfall":{"enable":false,"col_width":"220px","gap_x":"10px","gap_y":"10px"},"lazyload":{"enable":false,"placeholder":"gif"},"quicklink":{"enable":false,"home":true,"archive":true,"delay":true,"timeout":10000,"priority":true,"ignores":["/\\/api\\/?/","uri => uri.includes('.xml')","uri => uri.includes('.zip')","(uri, el) => el.hasAttribute('nofollow')","(uri, el) => el.hasAttribute('noprefetch')"]},"pjax":{"enable":false,"avoid_banner":false,"elements":null,"selectors":null,"switches":null,"switchesOptions":null,"history":true,"scrollTo":false,"scrollRestoration":false,"cacheBust":false,"debug":false,"currentUrlFullReload":false,"timeout":0},"google_adsense":{"enable":false,"client":null,"js_src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"},"external_link":{"icon":{"enable":true,"name":"fas fa-external-link-alt","color":"#aaa"}},"shortcuts":{"switch_post":{"enable":false}},"tag_cloud":{"start_color":"#a4d8fa","end_color":"#49b1f5","min_size":16,"max_size":26,"max_amount":200},"kill_old_ie":{"enable":false,"warning_url":"https://support.dmeng.net/upgrade-your-browser.html"},"css":"css","js":"js","images":"images","icon":{"search":"fas fa-search","localsearch_empty":"far fa-meh","menu_btn":"fas fa-bars","feed_email":"fas fa-envelope","feed_rss":"fas fa-rss","paginator_prev":"fas fa-angle-left","paginator_next":"fas fa-angle-right","read_more_btn":"fas fa-long-arrow-alt-right","post_tags":"fas fa-tag","copy_btn":"fas fa-copy","prompt_success":"fas fa-check-circle","prompt_info":"fas fa-arrow-circle-right","prompt_warning":"fas fa-exclamation-circle","prompt_error":"fas fa-times-circle","valine_visitor":"fas fa-eye","post_heading":"fas fa-link","notetag_default":"fas fa-arrow-circle-right","notetag_success":"fas fa-check-circle","notetag_info":"fas fa-info-circle","notetag_warning":"fas fa-exclamation-circle","notetag_danger":"fas fa-minus-circle"},"cdn":{"fontawesome":null,"jquery":null,"velocity":null,"velocity_ui":null,"gitalk_js":null,"gitalk_css":null,"gitalk_md5":null,"valine":null,"leancloud_storage":null,"minivaline":null,"busuanzi":null,"instantsearch_js":null,"instantsearch_css":null,"canvas_ribbon":null,"canvas_nest":null,"fancybox_js":null,"fancybox_css":null,"masonry":null,"lazyload":null,"quicklink":null,"pjax":null,"share_js":null,"share_css":null}}}],"Page":[{"title":"categories","type":"categories","date":"2020-07-17T02:10:02.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: \"categories\"\ndate: 2020-07-17 10:10:02\n---\n","updated":"2020-07-17T12:52:26.629Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckjcobaop0001helz62nx5h8l","content":"","site":{"data":{"stun":{"shake_file":true,"index_subtitle":false,"canonical":true,"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu360_site_verification":null,"sougou_site_verification":null,"menu":{"home":"/ || fas fa-home","archives":"/archives/ || fas fa-folder-open","categories":"/categories/ || fas fa-layer-group","tags":"/tags/ || fas fa-tags"},"submenu":null,"menu_settings":{"icon_only":false,"text_only":false},"favicon":{"small":"/images/icons/favicon-16x16.png","medium":"/images/icons/favicon-32x32.png"},"pwa":{"enable":false,"manifest":"/manifest.json","theme_color":"#54bcff"},"night_mode":{"enable":true,"button":{"color":"#fafafa","bg_color":"#8c8a8a"},"icon":{"dark":"🌜","light":"🌞"}},"layout":{"content":"768px","sidebar":"300px","content_sidebar_gap":"30px","main_padding":{"default":"20px","tablet":"15px","mobile":"10px"}},"header":{"enable":true,"show_on":{"post":true},"height":"80%","bg_image":{"enable":true,"url":"/images/header.jpg"},"mask":{"enable":true,"opacity":0.5},"nav":{"height":"50px","bg_color":"#333"},"scroll_down_icon":{"enable":false,"name":"fas fa-angle-down","animation":true}},"body":{"bg_image":{"enable":true,"url":"/images/blogbk.jpg","fixed":true,"repeat":false},"mask":{"enable":false,"opacity":{"default":0.1,"night_mode":0.6}}},"footer":{"bg_image":{"enable":false,"url":null},"mask":{"enable":false,"opacity":0.5},"copyright":{"enable":true,"text":null,"since":null,"end":null},"icon":{"enable":true,"name":"fas fa-heart","animation":false,"color":"#ff0000"},"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":false,"icp":null},"custom":{"enable":false,"text":null}},"creative_commons":{"enable":true,"license":"BY-NC-SA","sidebar":true,"post":true,"language":null},"back2top":{"enable":true,"icon":{"name":"fas fa-rocket","rotate":"-45deg","color":"#49b1f5","hover_color":"#fc6423"}},"sidebar":{"enable":true,"position":"right","offsetTop":"20px","horizon_line":false},"author":{"enable":true,"avatar":{"url":"/images/icons/stun-logo.svg","rounded":false,"opacity":1,"animation":"turn"},"motto":"hello world"},"social":{"github":"https://github.com/ || fab fa-github","google":"https://plus.google.com/ || fab fa-google","twitter":"https://twitter.com/ || fab fa-twitter","youtube":"https://youtube.com/ || fab fa-youtube"},"social_setting":{"enable":false,"icon_only":true},"toc":{"enable":true,"list_number":true,"wrap":true,"expand_all":false,"min_depth":1,"max_depth":6},"feed":{"enable":false,"email":null,"rss":null},"reading_progress":{"enable":true,"color":"#fc6423","height":"1px"},"codeblock":{"style":"default","highlight":"light","word_wrap":false},"heading_line":true,"reward":{"enable":false,"alipay":null,"wechat":null},"post_meta":{"icon_only":false,"created":{"enable":true,"icon":"far fa-calendar-plus"},"updated":{"enable":true,"icon":"far fa-calendar-check"},"reading_time":{"enable":false,"icon":"far fa-clock","speed":{"zh":200,"en":80}},"word_count":{"enable":false,"icon":"far fa-file-word"}},"post_list":{"paginate":{"home":true,"archives":false},"cover_image":{"home":false}},"post_widget":{"tags":true,"end_text":{"enable":true,"horizon_line":true},"share":{"enable":false,"label":"Share to: ","target":"qzone, qq, weibo, wechat, douban, linkedin, facebook, twitter, google"}},"stick_top":{"position":"right","icon":"fas fa-thumbtack","rotate":"45deg","color":"#999"},"gitalk":{"enable":false,"owner":null,"repo":null,"client_id":null,"client_secret":null,"admin":null,"distraction_free_mode":false,"language":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"Just go go","avatar":"mp","meta":"nick,mail,link","pageSize":10,"visitor":false,"recordIP":false,"language":null},"minivaline":{"enable":false,"appId":null,"appKey":null,"placeholder":"Write a Comment","adminEmailMd5":null,"math":true,"md":true,"lang":null},"livere":{"enable":false,"uid":null},"disqus":{"enable":false,"shortname":null,"count":true},"utterances":{"enable":false,"owner":null,"repo":null,"mapping":"title","label":"utterances","theme":"github-light","script_url":"https://utteranc.es/client.js"},"busuanzi":{"enable":false,"icon_only":false,"site_uv":{"enable":true,"icon":"fas fa-user"},"site_pv":{"enable":true,"icon":"fas fa-eye"},"post_pv":{"enable":true,"icon":"fas fa-eye"}},"google_analytics":null,"baidu_analytics":null,"tencent_analytics":null,"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"show_stats":true}},"local_search":{"enable":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"canvas_nest":{"enable":true,"color":"0,0,0","opacity":0.6,"count":200,"zIndex":-1},"math":{"enable":false,"per_page":false,"engine":"katex","mathjax":{"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","mhchem":{"enable":false,"mhchem_js":"https://cdn.jsdelivr.net/npm/mathjax-mhchem@3.3.2/mhchem.min.js"}},"katex":{"cdn":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css","copy_tex":{"enable":true,"copy_tex_js":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.min.js","copy_tex_css":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.css"}}},"fancybox":false,"zoom_image":{"enable":true,"mask_color":"rgba(0,0,0,0.6)","gap_aside":"20px"},"gallery_waterfall":{"enable":false,"col_width":"220px","gap_x":"10px","gap_y":"10px"},"lazyload":{"enable":false,"placeholder":"gif"},"quicklink":{"enable":false,"home":true,"archive":true,"delay":true,"timeout":10000,"priority":true,"ignores":["/\\/api\\/?/","uri => uri.includes('.xml')","uri => uri.includes('.zip')","(uri, el) => el.hasAttribute('nofollow')","(uri, el) => el.hasAttribute('noprefetch')"]},"pjax":{"enable":false,"avoid_banner":false,"elements":null,"selectors":null,"switches":null,"switchesOptions":null,"history":true,"scrollTo":false,"scrollRestoration":false,"cacheBust":false,"debug":false,"currentUrlFullReload":false,"timeout":0},"google_adsense":{"enable":false,"client":null,"js_src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"},"external_link":{"icon":{"enable":true,"name":"fas fa-external-link-alt","color":"#aaa"}},"shortcuts":{"switch_post":{"enable":false}},"tag_cloud":{"start_color":"#a4d8fa","end_color":"#49b1f5","min_size":16,"max_size":26,"max_amount":200},"kill_old_ie":{"enable":false,"warning_url":"https://support.dmeng.net/upgrade-your-browser.html"},"css":"css","js":"js","images":"images","icon":{"search":"fas fa-search","localsearch_empty":"far fa-meh","menu_btn":"fas fa-bars","feed_email":"fas fa-envelope","feed_rss":"fas fa-rss","paginator_prev":"fas fa-angle-left","paginator_next":"fas fa-angle-right","read_more_btn":"fas fa-long-arrow-alt-right","post_tags":"fas fa-tag","copy_btn":"fas fa-copy","prompt_success":"fas fa-check-circle","prompt_info":"fas fa-arrow-circle-right","prompt_warning":"fas fa-exclamation-circle","prompt_error":"fas fa-times-circle","valine_visitor":"fas fa-eye","post_heading":"fas fa-link","notetag_default":"fas fa-arrow-circle-right","notetag_success":"fas fa-check-circle","notetag_info":"fas fa-info-circle","notetag_warning":"fas fa-exclamation-circle","notetag_danger":"fas fa-minus-circle"},"cdn":{"fontawesome":null,"jquery":null,"velocity":null,"velocity_ui":null,"gitalk_js":null,"gitalk_css":null,"gitalk_md5":null,"valine":null,"leancloud_storage":null,"minivaline":null,"busuanzi":null,"instantsearch_js":null,"instantsearch_css":null,"canvas_ribbon":null,"canvas_nest":null,"fancybox_js":null,"fancybox_css":null,"masonry":null,"lazyload":null,"quicklink":null,"pjax":null,"share_js":null,"share_css":null},"rootConfig":{"title":"在下的小书架","subtitle":"对一件事理解的越深，就能做的越好！","description":"","author":"zxr","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"stun","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/qingfengzxr/qingfengzxr.github.io","branch":"master","message":"(Site update {{ now('YYYY-MM-DD HH:mm:ss') }})"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"","more":""},{"title":"tags","type":"tags","date":"2020-07-17T02:10:11.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: \"tags\"\ndate: 2020-07-17 10:10:11\n---\n","updated":"2020-07-17T12:52:26.653Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckjcobaos0003helzg7ze7fc6","content":"","site":{"data":{"stun":{"shake_file":true,"index_subtitle":false,"canonical":true,"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu360_site_verification":null,"sougou_site_verification":null,"menu":{"home":"/ || fas fa-home","archives":"/archives/ || fas fa-folder-open","categories":"/categories/ || fas fa-layer-group","tags":"/tags/ || fas fa-tags"},"submenu":null,"menu_settings":{"icon_only":false,"text_only":false},"favicon":{"small":"/images/icons/favicon-16x16.png","medium":"/images/icons/favicon-32x32.png"},"pwa":{"enable":false,"manifest":"/manifest.json","theme_color":"#54bcff"},"night_mode":{"enable":true,"button":{"color":"#fafafa","bg_color":"#8c8a8a"},"icon":{"dark":"🌜","light":"🌞"}},"layout":{"content":"768px","sidebar":"300px","content_sidebar_gap":"30px","main_padding":{"default":"20px","tablet":"15px","mobile":"10px"}},"header":{"enable":true,"show_on":{"post":true},"height":"80%","bg_image":{"enable":true,"url":"/images/header.jpg"},"mask":{"enable":true,"opacity":0.5},"nav":{"height":"50px","bg_color":"#333"},"scroll_down_icon":{"enable":false,"name":"fas fa-angle-down","animation":true}},"body":{"bg_image":{"enable":true,"url":"/images/blogbk.jpg","fixed":true,"repeat":false},"mask":{"enable":false,"opacity":{"default":0.1,"night_mode":0.6}}},"footer":{"bg_image":{"enable":false,"url":null},"mask":{"enable":false,"opacity":0.5},"copyright":{"enable":true,"text":null,"since":null,"end":null},"icon":{"enable":true,"name":"fas fa-heart","animation":false,"color":"#ff0000"},"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":false,"icp":null},"custom":{"enable":false,"text":null}},"creative_commons":{"enable":true,"license":"BY-NC-SA","sidebar":true,"post":true,"language":null},"back2top":{"enable":true,"icon":{"name":"fas fa-rocket","rotate":"-45deg","color":"#49b1f5","hover_color":"#fc6423"}},"sidebar":{"enable":true,"position":"right","offsetTop":"20px","horizon_line":false},"author":{"enable":true,"avatar":{"url":"/images/icons/stun-logo.svg","rounded":false,"opacity":1,"animation":"turn"},"motto":"hello world"},"social":{"github":"https://github.com/ || fab fa-github","google":"https://plus.google.com/ || fab fa-google","twitter":"https://twitter.com/ || fab fa-twitter","youtube":"https://youtube.com/ || fab fa-youtube"},"social_setting":{"enable":false,"icon_only":true},"toc":{"enable":true,"list_number":true,"wrap":true,"expand_all":false,"min_depth":1,"max_depth":6},"feed":{"enable":false,"email":null,"rss":null},"reading_progress":{"enable":true,"color":"#fc6423","height":"1px"},"codeblock":{"style":"default","highlight":"light","word_wrap":false},"heading_line":true,"reward":{"enable":false,"alipay":null,"wechat":null},"post_meta":{"icon_only":false,"created":{"enable":true,"icon":"far fa-calendar-plus"},"updated":{"enable":true,"icon":"far fa-calendar-check"},"reading_time":{"enable":false,"icon":"far fa-clock","speed":{"zh":200,"en":80}},"word_count":{"enable":false,"icon":"far fa-file-word"}},"post_list":{"paginate":{"home":true,"archives":false},"cover_image":{"home":false}},"post_widget":{"tags":true,"end_text":{"enable":true,"horizon_line":true},"share":{"enable":false,"label":"Share to: ","target":"qzone, qq, weibo, wechat, douban, linkedin, facebook, twitter, google"}},"stick_top":{"position":"right","icon":"fas fa-thumbtack","rotate":"45deg","color":"#999"},"gitalk":{"enable":false,"owner":null,"repo":null,"client_id":null,"client_secret":null,"admin":null,"distraction_free_mode":false,"language":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"Just go go","avatar":"mp","meta":"nick,mail,link","pageSize":10,"visitor":false,"recordIP":false,"language":null},"minivaline":{"enable":false,"appId":null,"appKey":null,"placeholder":"Write a Comment","adminEmailMd5":null,"math":true,"md":true,"lang":null},"livere":{"enable":false,"uid":null},"disqus":{"enable":false,"shortname":null,"count":true},"utterances":{"enable":false,"owner":null,"repo":null,"mapping":"title","label":"utterances","theme":"github-light","script_url":"https://utteranc.es/client.js"},"busuanzi":{"enable":false,"icon_only":false,"site_uv":{"enable":true,"icon":"fas fa-user"},"site_pv":{"enable":true,"icon":"fas fa-eye"},"post_pv":{"enable":true,"icon":"fas fa-eye"}},"google_analytics":null,"baidu_analytics":null,"tencent_analytics":null,"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"show_stats":true}},"local_search":{"enable":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"canvas_nest":{"enable":true,"color":"0,0,0","opacity":0.6,"count":200,"zIndex":-1},"math":{"enable":false,"per_page":false,"engine":"katex","mathjax":{"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","mhchem":{"enable":false,"mhchem_js":"https://cdn.jsdelivr.net/npm/mathjax-mhchem@3.3.2/mhchem.min.js"}},"katex":{"cdn":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css","copy_tex":{"enable":true,"copy_tex_js":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.min.js","copy_tex_css":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.css"}}},"fancybox":false,"zoom_image":{"enable":true,"mask_color":"rgba(0,0,0,0.6)","gap_aside":"20px"},"gallery_waterfall":{"enable":false,"col_width":"220px","gap_x":"10px","gap_y":"10px"},"lazyload":{"enable":false,"placeholder":"gif"},"quicklink":{"enable":false,"home":true,"archive":true,"delay":true,"timeout":10000,"priority":true,"ignores":["/\\/api\\/?/","uri => uri.includes('.xml')","uri => uri.includes('.zip')","(uri, el) => el.hasAttribute('nofollow')","(uri, el) => el.hasAttribute('noprefetch')"]},"pjax":{"enable":false,"avoid_banner":false,"elements":null,"selectors":null,"switches":null,"switchesOptions":null,"history":true,"scrollTo":false,"scrollRestoration":false,"cacheBust":false,"debug":false,"currentUrlFullReload":false,"timeout":0},"google_adsense":{"enable":false,"client":null,"js_src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"},"external_link":{"icon":{"enable":true,"name":"fas fa-external-link-alt","color":"#aaa"}},"shortcuts":{"switch_post":{"enable":false}},"tag_cloud":{"start_color":"#a4d8fa","end_color":"#49b1f5","min_size":16,"max_size":26,"max_amount":200},"kill_old_ie":{"enable":false,"warning_url":"https://support.dmeng.net/upgrade-your-browser.html"},"css":"css","js":"js","images":"images","icon":{"search":"fas fa-search","localsearch_empty":"far fa-meh","menu_btn":"fas fa-bars","feed_email":"fas fa-envelope","feed_rss":"fas fa-rss","paginator_prev":"fas fa-angle-left","paginator_next":"fas fa-angle-right","read_more_btn":"fas fa-long-arrow-alt-right","post_tags":"fas fa-tag","copy_btn":"fas fa-copy","prompt_success":"fas fa-check-circle","prompt_info":"fas fa-arrow-circle-right","prompt_warning":"fas fa-exclamation-circle","prompt_error":"fas fa-times-circle","valine_visitor":"fas fa-eye","post_heading":"fas fa-link","notetag_default":"fas fa-arrow-circle-right","notetag_success":"fas fa-check-circle","notetag_info":"fas fa-info-circle","notetag_warning":"fas fa-exclamation-circle","notetag_danger":"fas fa-minus-circle"},"cdn":{"fontawesome":null,"jquery":null,"velocity":null,"velocity_ui":null,"gitalk_js":null,"gitalk_css":null,"gitalk_md5":null,"valine":null,"leancloud_storage":null,"minivaline":null,"busuanzi":null,"instantsearch_js":null,"instantsearch_css":null,"canvas_ribbon":null,"canvas_nest":null,"fancybox_js":null,"fancybox_css":null,"masonry":null,"lazyload":null,"quicklink":null,"pjax":null,"share_js":null,"share_css":null},"rootConfig":{"title":"在下的小书架","subtitle":"对一件事理解的越深，就能做的越好！","description":"","author":"zxr","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"stun","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/qingfengzxr/qingfengzxr.github.io","branch":"master","message":"(Site update {{ now('YYYY-MM-DD HH:mm:ss') }})"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2020-07-17T09:09:49.247Z","updated":"2020-07-17T09:09:49.247Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjcobaoi0000helzeolvgvno","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n\n        <h2 id=\"Quick-Start\"   >\n          <a href=\"#Quick-Start\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>Quick Start</h2>\n      \n        <h3 id=\"Create-a-new-post\"   >\n          <a href=\"#Create-a-new-post\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>Create a new post</h3>\n      <figure class=\"highlight bash\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n\n        <h3 id=\"Run-server\"   >\n          <a href=\"#Run-server\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>Run server</h3>\n      <figure class=\"highlight bash\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></div></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n\n        <h3 id=\"Generate-static-files\"   >\n          <a href=\"#Generate-static-files\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>Generate static files</h3>\n      <figure class=\"highlight bash\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></div></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n\n        <h3 id=\"Deploy-to-remote-sites\"   >\n          <a href=\"#Deploy-to-remote-sites\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>Deploy to remote sites</h3>\n      <figure class=\"highlight bash\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></div></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{"stun":{"shake_file":true,"index_subtitle":false,"canonical":true,"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu360_site_verification":null,"sougou_site_verification":null,"menu":{"home":"/ || fas fa-home","archives":"/archives/ || fas fa-folder-open","categories":"/categories/ || fas fa-layer-group","tags":"/tags/ || fas fa-tags"},"submenu":null,"menu_settings":{"icon_only":false,"text_only":false},"favicon":{"small":"/images/icons/favicon-16x16.png","medium":"/images/icons/favicon-32x32.png"},"pwa":{"enable":false,"manifest":"/manifest.json","theme_color":"#54bcff"},"night_mode":{"enable":true,"button":{"color":"#fafafa","bg_color":"#8c8a8a"},"icon":{"dark":"🌜","light":"🌞"}},"layout":{"content":"768px","sidebar":"300px","content_sidebar_gap":"30px","main_padding":{"default":"20px","tablet":"15px","mobile":"10px"}},"header":{"enable":true,"show_on":{"post":true},"height":"80%","bg_image":{"enable":true,"url":"/images/header.jpg"},"mask":{"enable":true,"opacity":0.5},"nav":{"height":"50px","bg_color":"#333"},"scroll_down_icon":{"enable":false,"name":"fas fa-angle-down","animation":true}},"body":{"bg_image":{"enable":true,"url":"/images/blogbk.jpg","fixed":true,"repeat":false},"mask":{"enable":false,"opacity":{"default":0.1,"night_mode":0.6}}},"footer":{"bg_image":{"enable":false,"url":null},"mask":{"enable":false,"opacity":0.5},"copyright":{"enable":true,"text":null,"since":null,"end":null},"icon":{"enable":true,"name":"fas fa-heart","animation":false,"color":"#ff0000"},"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":false,"icp":null},"custom":{"enable":false,"text":null}},"creative_commons":{"enable":true,"license":"BY-NC-SA","sidebar":true,"post":true,"language":null},"back2top":{"enable":true,"icon":{"name":"fas fa-rocket","rotate":"-45deg","color":"#49b1f5","hover_color":"#fc6423"}},"sidebar":{"enable":true,"position":"right","offsetTop":"20px","horizon_line":false},"author":{"enable":true,"avatar":{"url":"/images/icons/stun-logo.svg","rounded":false,"opacity":1,"animation":"turn"},"motto":"hello world"},"social":{"github":"https://github.com/ || fab fa-github","google":"https://plus.google.com/ || fab fa-google","twitter":"https://twitter.com/ || fab fa-twitter","youtube":"https://youtube.com/ || fab fa-youtube"},"social_setting":{"enable":false,"icon_only":true},"toc":{"enable":true,"list_number":true,"wrap":true,"expand_all":false,"min_depth":1,"max_depth":6},"feed":{"enable":false,"email":null,"rss":null},"reading_progress":{"enable":true,"color":"#fc6423","height":"1px"},"codeblock":{"style":"default","highlight":"light","word_wrap":false},"heading_line":true,"reward":{"enable":false,"alipay":null,"wechat":null},"post_meta":{"icon_only":false,"created":{"enable":true,"icon":"far fa-calendar-plus"},"updated":{"enable":true,"icon":"far fa-calendar-check"},"reading_time":{"enable":false,"icon":"far fa-clock","speed":{"zh":200,"en":80}},"word_count":{"enable":false,"icon":"far fa-file-word"}},"post_list":{"paginate":{"home":true,"archives":false},"cover_image":{"home":false}},"post_widget":{"tags":true,"end_text":{"enable":true,"horizon_line":true},"share":{"enable":false,"label":"Share to: ","target":"qzone, qq, weibo, wechat, douban, linkedin, facebook, twitter, google"}},"stick_top":{"position":"right","icon":"fas fa-thumbtack","rotate":"45deg","color":"#999"},"gitalk":{"enable":false,"owner":null,"repo":null,"client_id":null,"client_secret":null,"admin":null,"distraction_free_mode":false,"language":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"Just go go","avatar":"mp","meta":"nick,mail,link","pageSize":10,"visitor":false,"recordIP":false,"language":null},"minivaline":{"enable":false,"appId":null,"appKey":null,"placeholder":"Write a Comment","adminEmailMd5":null,"math":true,"md":true,"lang":null},"livere":{"enable":false,"uid":null},"disqus":{"enable":false,"shortname":null,"count":true},"utterances":{"enable":false,"owner":null,"repo":null,"mapping":"title","label":"utterances","theme":"github-light","script_url":"https://utteranc.es/client.js"},"busuanzi":{"enable":false,"icon_only":false,"site_uv":{"enable":true,"icon":"fas fa-user"},"site_pv":{"enable":true,"icon":"fas fa-eye"},"post_pv":{"enable":true,"icon":"fas fa-eye"}},"google_analytics":null,"baidu_analytics":null,"tencent_analytics":null,"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"show_stats":true}},"local_search":{"enable":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"canvas_nest":{"enable":true,"color":"0,0,0","opacity":0.6,"count":200,"zIndex":-1},"math":{"enable":false,"per_page":false,"engine":"katex","mathjax":{"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","mhchem":{"enable":false,"mhchem_js":"https://cdn.jsdelivr.net/npm/mathjax-mhchem@3.3.2/mhchem.min.js"}},"katex":{"cdn":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css","copy_tex":{"enable":true,"copy_tex_js":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.min.js","copy_tex_css":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.css"}}},"fancybox":false,"zoom_image":{"enable":true,"mask_color":"rgba(0,0,0,0.6)","gap_aside":"20px"},"gallery_waterfall":{"enable":false,"col_width":"220px","gap_x":"10px","gap_y":"10px"},"lazyload":{"enable":false,"placeholder":"gif"},"quicklink":{"enable":false,"home":true,"archive":true,"delay":true,"timeout":10000,"priority":true,"ignores":["/\\/api\\/?/","uri => uri.includes('.xml')","uri => uri.includes('.zip')","(uri, el) => el.hasAttribute('nofollow')","(uri, el) => el.hasAttribute('noprefetch')"]},"pjax":{"enable":false,"avoid_banner":false,"elements":null,"selectors":null,"switches":null,"switchesOptions":null,"history":true,"scrollTo":false,"scrollRestoration":false,"cacheBust":false,"debug":false,"currentUrlFullReload":false,"timeout":0},"google_adsense":{"enable":false,"client":null,"js_src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"},"external_link":{"icon":{"enable":true,"name":"fas fa-external-link-alt","color":"#aaa"}},"shortcuts":{"switch_post":{"enable":false}},"tag_cloud":{"start_color":"#a4d8fa","end_color":"#49b1f5","min_size":16,"max_size":26,"max_amount":200},"kill_old_ie":{"enable":false,"warning_url":"https://support.dmeng.net/upgrade-your-browser.html"},"css":"css","js":"js","images":"images","icon":{"search":"fas fa-search","localsearch_empty":"far fa-meh","menu_btn":"fas fa-bars","feed_email":"fas fa-envelope","feed_rss":"fas fa-rss","paginator_prev":"fas fa-angle-left","paginator_next":"fas fa-angle-right","read_more_btn":"fas fa-long-arrow-alt-right","post_tags":"fas fa-tag","copy_btn":"fas fa-copy","prompt_success":"fas fa-check-circle","prompt_info":"fas fa-arrow-circle-right","prompt_warning":"fas fa-exclamation-circle","prompt_error":"fas fa-times-circle","valine_visitor":"fas fa-eye","post_heading":"fas fa-link","notetag_default":"fas fa-arrow-circle-right","notetag_success":"fas fa-check-circle","notetag_info":"fas fa-info-circle","notetag_warning":"fas fa-exclamation-circle","notetag_danger":"fas fa-minus-circle"},"cdn":{"fontawesome":null,"jquery":null,"velocity":null,"velocity_ui":null,"gitalk_js":null,"gitalk_css":null,"gitalk_md5":null,"valine":null,"leancloud_storage":null,"minivaline":null,"busuanzi":null,"instantsearch_js":null,"instantsearch_css":null,"canvas_ribbon":null,"canvas_nest":null,"fancybox_js":null,"fancybox_css":null,"masonry":null,"lazyload":null,"quicklink":null,"pjax":null,"share_js":null,"share_css":null},"rootConfig":{"title":"在下的小书架","subtitle":"对一件事理解的越深，就能做的越好！","description":"","author":"zxr","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"stun","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/qingfengzxr/qingfengzxr.github.io","branch":"master","message":"(Site update {{ now('YYYY-MM-DD HH:mm:ss') }})"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n\n        <h2 id=\"Quick-Start\"   >\n          <a href=\"#Quick-Start\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>Quick Start</h2>\n      \n        <h3 id=\"Create-a-new-post\"   >\n          <a href=\"#Create-a-new-post\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>Create a new post</h3>\n      <figure class=\"highlight bash\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n\n        <h3 id=\"Run-server\"   >\n          <a href=\"#Run-server\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>Run server</h3>\n      <figure class=\"highlight bash\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></div></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n\n        <h3 id=\"Generate-static-files\"   >\n          <a href=\"#Generate-static-files\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>Generate static files</h3>\n      <figure class=\"highlight bash\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></div></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n\n        <h3 id=\"Deploy-to-remote-sites\"   >\n          <a href=\"#Deploy-to-remote-sites\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>Deploy to remote sites</h3>\n      <figure class=\"highlight bash\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></div></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"页面生成测试","date":"2020-07-16T02:27:41.000Z","_content":"\n## 这是一篇测试文档\n```C\nint main()\n{\n    printf(\"hello world\\r\\n\");\n}\n```\n\n\n","source":"_posts/helloworld.md","raw":"---\ntitle: 页面生成测试\ndate: 2020-07-16 10:27:41\ntags:\n---\n\n## 这是一篇测试文档\n```C\nint main()\n{\n    printf(\"hello world\\r\\n\");\n}\n```\n\n\n","slug":"helloworld","published":1,"updated":"2020-07-17T12:52:26.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjcobaoq0002helzaga0ejar","content":"\n        <h2 id=\"这是一篇测试文档\"   >\n          <a href=\"#这是一篇测试文档\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>这是一篇测试文档</h2>\n      <figure class=\"highlight c\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"hello world\\r\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n\n","site":{"data":{"stun":{"shake_file":true,"index_subtitle":false,"canonical":true,"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu360_site_verification":null,"sougou_site_verification":null,"menu":{"home":"/ || fas fa-home","archives":"/archives/ || fas fa-folder-open","categories":"/categories/ || fas fa-layer-group","tags":"/tags/ || fas fa-tags"},"submenu":null,"menu_settings":{"icon_only":false,"text_only":false},"favicon":{"small":"/images/icons/favicon-16x16.png","medium":"/images/icons/favicon-32x32.png"},"pwa":{"enable":false,"manifest":"/manifest.json","theme_color":"#54bcff"},"night_mode":{"enable":true,"button":{"color":"#fafafa","bg_color":"#8c8a8a"},"icon":{"dark":"🌜","light":"🌞"}},"layout":{"content":"768px","sidebar":"300px","content_sidebar_gap":"30px","main_padding":{"default":"20px","tablet":"15px","mobile":"10px"}},"header":{"enable":true,"show_on":{"post":true},"height":"80%","bg_image":{"enable":true,"url":"/images/header.jpg"},"mask":{"enable":true,"opacity":0.5},"nav":{"height":"50px","bg_color":"#333"},"scroll_down_icon":{"enable":false,"name":"fas fa-angle-down","animation":true}},"body":{"bg_image":{"enable":true,"url":"/images/blogbk.jpg","fixed":true,"repeat":false},"mask":{"enable":false,"opacity":{"default":0.1,"night_mode":0.6}}},"footer":{"bg_image":{"enable":false,"url":null},"mask":{"enable":false,"opacity":0.5},"copyright":{"enable":true,"text":null,"since":null,"end":null},"icon":{"enable":true,"name":"fas fa-heart","animation":false,"color":"#ff0000"},"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":false,"icp":null},"custom":{"enable":false,"text":null}},"creative_commons":{"enable":true,"license":"BY-NC-SA","sidebar":true,"post":true,"language":null},"back2top":{"enable":true,"icon":{"name":"fas fa-rocket","rotate":"-45deg","color":"#49b1f5","hover_color":"#fc6423"}},"sidebar":{"enable":true,"position":"right","offsetTop":"20px","horizon_line":false},"author":{"enable":true,"avatar":{"url":"/images/icons/stun-logo.svg","rounded":false,"opacity":1,"animation":"turn"},"motto":"hello world"},"social":{"github":"https://github.com/ || fab fa-github","google":"https://plus.google.com/ || fab fa-google","twitter":"https://twitter.com/ || fab fa-twitter","youtube":"https://youtube.com/ || fab fa-youtube"},"social_setting":{"enable":false,"icon_only":true},"toc":{"enable":true,"list_number":true,"wrap":true,"expand_all":false,"min_depth":1,"max_depth":6},"feed":{"enable":false,"email":null,"rss":null},"reading_progress":{"enable":true,"color":"#fc6423","height":"1px"},"codeblock":{"style":"default","highlight":"light","word_wrap":false},"heading_line":true,"reward":{"enable":false,"alipay":null,"wechat":null},"post_meta":{"icon_only":false,"created":{"enable":true,"icon":"far fa-calendar-plus"},"updated":{"enable":true,"icon":"far fa-calendar-check"},"reading_time":{"enable":false,"icon":"far fa-clock","speed":{"zh":200,"en":80}},"word_count":{"enable":false,"icon":"far fa-file-word"}},"post_list":{"paginate":{"home":true,"archives":false},"cover_image":{"home":false}},"post_widget":{"tags":true,"end_text":{"enable":true,"horizon_line":true},"share":{"enable":false,"label":"Share to: ","target":"qzone, qq, weibo, wechat, douban, linkedin, facebook, twitter, google"}},"stick_top":{"position":"right","icon":"fas fa-thumbtack","rotate":"45deg","color":"#999"},"gitalk":{"enable":false,"owner":null,"repo":null,"client_id":null,"client_secret":null,"admin":null,"distraction_free_mode":false,"language":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"Just go go","avatar":"mp","meta":"nick,mail,link","pageSize":10,"visitor":false,"recordIP":false,"language":null},"minivaline":{"enable":false,"appId":null,"appKey":null,"placeholder":"Write a Comment","adminEmailMd5":null,"math":true,"md":true,"lang":null},"livere":{"enable":false,"uid":null},"disqus":{"enable":false,"shortname":null,"count":true},"utterances":{"enable":false,"owner":null,"repo":null,"mapping":"title","label":"utterances","theme":"github-light","script_url":"https://utteranc.es/client.js"},"busuanzi":{"enable":false,"icon_only":false,"site_uv":{"enable":true,"icon":"fas fa-user"},"site_pv":{"enable":true,"icon":"fas fa-eye"},"post_pv":{"enable":true,"icon":"fas fa-eye"}},"google_analytics":null,"baidu_analytics":null,"tencent_analytics":null,"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"show_stats":true}},"local_search":{"enable":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"canvas_nest":{"enable":true,"color":"0,0,0","opacity":0.6,"count":200,"zIndex":-1},"math":{"enable":false,"per_page":false,"engine":"katex","mathjax":{"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","mhchem":{"enable":false,"mhchem_js":"https://cdn.jsdelivr.net/npm/mathjax-mhchem@3.3.2/mhchem.min.js"}},"katex":{"cdn":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css","copy_tex":{"enable":true,"copy_tex_js":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.min.js","copy_tex_css":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.css"}}},"fancybox":false,"zoom_image":{"enable":true,"mask_color":"rgba(0,0,0,0.6)","gap_aside":"20px"},"gallery_waterfall":{"enable":false,"col_width":"220px","gap_x":"10px","gap_y":"10px"},"lazyload":{"enable":false,"placeholder":"gif"},"quicklink":{"enable":false,"home":true,"archive":true,"delay":true,"timeout":10000,"priority":true,"ignores":["/\\/api\\/?/","uri => uri.includes('.xml')","uri => uri.includes('.zip')","(uri, el) => el.hasAttribute('nofollow')","(uri, el) => el.hasAttribute('noprefetch')"]},"pjax":{"enable":false,"avoid_banner":false,"elements":null,"selectors":null,"switches":null,"switchesOptions":null,"history":true,"scrollTo":false,"scrollRestoration":false,"cacheBust":false,"debug":false,"currentUrlFullReload":false,"timeout":0},"google_adsense":{"enable":false,"client":null,"js_src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"},"external_link":{"icon":{"enable":true,"name":"fas fa-external-link-alt","color":"#aaa"}},"shortcuts":{"switch_post":{"enable":false}},"tag_cloud":{"start_color":"#a4d8fa","end_color":"#49b1f5","min_size":16,"max_size":26,"max_amount":200},"kill_old_ie":{"enable":false,"warning_url":"https://support.dmeng.net/upgrade-your-browser.html"},"css":"css","js":"js","images":"images","icon":{"search":"fas fa-search","localsearch_empty":"far fa-meh","menu_btn":"fas fa-bars","feed_email":"fas fa-envelope","feed_rss":"fas fa-rss","paginator_prev":"fas fa-angle-left","paginator_next":"fas fa-angle-right","read_more_btn":"fas fa-long-arrow-alt-right","post_tags":"fas fa-tag","copy_btn":"fas fa-copy","prompt_success":"fas fa-check-circle","prompt_info":"fas fa-arrow-circle-right","prompt_warning":"fas fa-exclamation-circle","prompt_error":"fas fa-times-circle","valine_visitor":"fas fa-eye","post_heading":"fas fa-link","notetag_default":"fas fa-arrow-circle-right","notetag_success":"fas fa-check-circle","notetag_info":"fas fa-info-circle","notetag_warning":"fas fa-exclamation-circle","notetag_danger":"fas fa-minus-circle"},"cdn":{"fontawesome":null,"jquery":null,"velocity":null,"velocity_ui":null,"gitalk_js":null,"gitalk_css":null,"gitalk_md5":null,"valine":null,"leancloud_storage":null,"minivaline":null,"busuanzi":null,"instantsearch_js":null,"instantsearch_css":null,"canvas_ribbon":null,"canvas_nest":null,"fancybox_js":null,"fancybox_css":null,"masonry":null,"lazyload":null,"quicklink":null,"pjax":null,"share_js":null,"share_css":null},"rootConfig":{"title":"在下的小书架","subtitle":"对一件事理解的越深，就能做的越好！","description":"","author":"zxr","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"stun","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/qingfengzxr/qingfengzxr.github.io","branch":"master","message":"(Site update {{ now('YYYY-MM-DD HH:mm:ss') }})"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"","more":"\n        <h2 id=\"这是一篇测试文档\"   >\n          <a href=\"#这是一篇测试文档\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>这是一篇测试文档</h2>\n      <figure class=\"highlight c\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"hello world\\r\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n\n"},{"title":"C语言不知道的知识汇总","date":"2020-07-17T03:56:11.000Z","_content":"\n* 位域\n\n结构体中的冒号表示位域。位域出现的原因是由于某些信息的存储表示只需要几个bit位就可以表示而不需要一个完整的字节，同时也是为了节省存储空间和方便处理。\n\n```c\n其表示形式为：\nstruct 位域结构名\n{\n    类型说明符  位域名：位域长度\n}\n例如：\nstruct  bit_struct\n{\n\tint  bit1:3;\n    int  bit2:5;\n    int  bit3:7;\n}data;\n其中bit_struct表示位域结构体，bit1、bit2、bit3表示对应的位域，data表示位域结构体定义的变量。整个位域结构体占用2个字节，bit1占3位，bit2占5位，bit1和bit2共用一个字节，bit3占7位，独占一个字节。\n```\n\n说明：\n\n1. 位域必须存储在同一个类型中，不能跨类型，同时也说明位域的长度不会超过所定义类型的长度。如果一个定义类型单元里所剩空间无法存放下一个域，则下一个域应该从下一单元开始存放。例如：所定义的类型是int类型，一共32为，目前用掉了25位还剩下7位，这时要存储一个8位的位域元素，那么这个元素就只能从下一个int类型的单元开始而不会在前面一个int类型中占7为后面的int类型中占1位。\n\n2. 如果位域的位域长度为0表示是个空域，同时下一个域应当从下一个字节单元开始存放。\n\n3. 使用无名的位域来作为填充和调整位置，切记该位域是不能被使用的。\n\n4. 位域的本质上就是一种结构体类型，不同的是其成员是按二进制位来分配的。\n\n[详细示例]：<https://blog.csdn.net/yihongxiaoxiang/article/details/50327587>\n\n\n\n* static 关键字\n\n使用**static**关键字定义在头文件中的变量，其修饰的全局变量的作用域为定义的源文件。在多个源文件中引用该头文件，相当于每个变量都会在引用该头文件的源文件中定义一次。\n\n\n\n#### 一些实用的写法\n\n```c\n#define CHECK_STATE_FLAG(flag, state)\\\n    do{\\\n        if(flag != state)\\\n        {\\\n            printf(\"func:%s,line:%d,flag statue fail\\n\",__FUNCTION__,__LINE__);\\\n            return FAILURE;\\\n        }\\\n    }while(0)\n//仔细体会这个函数宏，真的是一种非常巧妙的用法，尽管功能简单，却能够在各处有需要的地方调用，\n//并显示所在位置。就像面向对象语言中的错误处理，错误抛出一样实用。\n#define UARTMSG_LOCK()   pthread_mutex_lock(&g_tUartMsgMutex);\n#define UARTMSG_UNLOCK() pthread_mutex_unlock(&g_tUartMsgMutex);\n//这只是一个简单的宏定义用法，但事实上，当代码里充斥着这种编写风格与思想时，代码的可阅读性确实\n//有很大的提高。\n// 短整型大小端互换\n#define BigLittleSwap16(A)  ((((short int)(A) & 0xff00) >> 8) | \\\n                             (((short int)(A) & 0x00ff) << 8))\n// 长整型大小端互换\n#define BigLittleSwap32(A)  ((((long int)(A)  & 0xff000000) >> 24) | \\\n                             (((long int)(A)  & 0x00ff0000) >> 8) | \\\n                             (((long int)(A)  & 0x0000ff00) << 8) | \\\n                             (((long int)(A)  & 0x000000ff) << 24))\n\n\n```\n\n","source":"_posts/C/note.md","raw":"---\ntitle: C语言不知道的知识汇总\ndate: 2020-07-17 11:56:11\ncategories:\n  - C\ntags:\n  - C\n---\n\n* 位域\n\n结构体中的冒号表示位域。位域出现的原因是由于某些信息的存储表示只需要几个bit位就可以表示而不需要一个完整的字节，同时也是为了节省存储空间和方便处理。\n\n```c\n其表示形式为：\nstruct 位域结构名\n{\n    类型说明符  位域名：位域长度\n}\n例如：\nstruct  bit_struct\n{\n\tint  bit1:3;\n    int  bit2:5;\n    int  bit3:7;\n}data;\n其中bit_struct表示位域结构体，bit1、bit2、bit3表示对应的位域，data表示位域结构体定义的变量。整个位域结构体占用2个字节，bit1占3位，bit2占5位，bit1和bit2共用一个字节，bit3占7位，独占一个字节。\n```\n\n说明：\n\n1. 位域必须存储在同一个类型中，不能跨类型，同时也说明位域的长度不会超过所定义类型的长度。如果一个定义类型单元里所剩空间无法存放下一个域，则下一个域应该从下一单元开始存放。例如：所定义的类型是int类型，一共32为，目前用掉了25位还剩下7位，这时要存储一个8位的位域元素，那么这个元素就只能从下一个int类型的单元开始而不会在前面一个int类型中占7为后面的int类型中占1位。\n\n2. 如果位域的位域长度为0表示是个空域，同时下一个域应当从下一个字节单元开始存放。\n\n3. 使用无名的位域来作为填充和调整位置，切记该位域是不能被使用的。\n\n4. 位域的本质上就是一种结构体类型，不同的是其成员是按二进制位来分配的。\n\n[详细示例]：<https://blog.csdn.net/yihongxiaoxiang/article/details/50327587>\n\n\n\n* static 关键字\n\n使用**static**关键字定义在头文件中的变量，其修饰的全局变量的作用域为定义的源文件。在多个源文件中引用该头文件，相当于每个变量都会在引用该头文件的源文件中定义一次。\n\n\n\n#### 一些实用的写法\n\n```c\n#define CHECK_STATE_FLAG(flag, state)\\\n    do{\\\n        if(flag != state)\\\n        {\\\n            printf(\"func:%s,line:%d,flag statue fail\\n\",__FUNCTION__,__LINE__);\\\n            return FAILURE;\\\n        }\\\n    }while(0)\n//仔细体会这个函数宏，真的是一种非常巧妙的用法，尽管功能简单，却能够在各处有需要的地方调用，\n//并显示所在位置。就像面向对象语言中的错误处理，错误抛出一样实用。\n#define UARTMSG_LOCK()   pthread_mutex_lock(&g_tUartMsgMutex);\n#define UARTMSG_UNLOCK() pthread_mutex_unlock(&g_tUartMsgMutex);\n//这只是一个简单的宏定义用法，但事实上，当代码里充斥着这种编写风格与思想时，代码的可阅读性确实\n//有很大的提高。\n// 短整型大小端互换\n#define BigLittleSwap16(A)  ((((short int)(A) & 0xff00) >> 8) | \\\n                             (((short int)(A) & 0x00ff) << 8))\n// 长整型大小端互换\n#define BigLittleSwap32(A)  ((((long int)(A)  & 0xff000000) >> 24) | \\\n                             (((long int)(A)  & 0x00ff0000) >> 8) | \\\n                             (((long int)(A)  & 0x0000ff00) << 8) | \\\n                             (((long int)(A)  & 0x000000ff) << 24))\n\n\n```\n\n","slug":"C/note","published":1,"updated":"2020-12-31T09:42:36.564Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjcobav70004helzathna23g","content":"<ul>\n<li>位域</li>\n</ul>\n<p>结构体中的冒号表示位域。位域出现的原因是由于某些信息的存储表示只需要几个bit位就可以表示而不需要一个完整的字节，同时也是为了节省存储空间和方便处理。</p>\n<figure class=\"highlight c\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其表示形式为：</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> 位域结构名</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    类型说明符  位域名：位域长度</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">例如：</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span>  <span class=\"title\">bit_struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>  bit1:<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>  bit2:<span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>  bit3:<span class=\"number\">7</span>;</span><br><span class=\"line\">&#125;data;</span><br><span class=\"line\">其中bit_struct表示位域结构体，bit1、bit2、bit3表示对应的位域，data表示位域结构体定义的变量。整个位域结构体占用<span class=\"number\">2</span>个字节，bit1占<span class=\"number\">3</span>位，bit2占<span class=\"number\">5</span>位，bit1和bit2共用一个字节，bit3占<span class=\"number\">7</span>位，独占一个字节。</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：</p>\n<ol>\n<li><p>位域必须存储在同一个类型中，不能跨类型，同时也说明位域的长度不会超过所定义类型的长度。如果一个定义类型单元里所剩空间无法存放下一个域，则下一个域应该从下一单元开始存放。例如：所定义的类型是int类型，一共32为，目前用掉了25位还剩下7位，这时要存储一个8位的位域元素，那么这个元素就只能从下一个int类型的单元开始而不会在前面一个int类型中占7为后面的int类型中占1位。</p>\n</li>\n<li><p>如果位域的位域长度为0表示是个空域，同时下一个域应当从下一个字节单元开始存放。</p>\n</li>\n<li><p>使用无名的位域来作为填充和调整位置，切记该位域是不能被使用的。</p>\n</li>\n<li><p>位域的本质上就是一种结构体类型，不同的是其成员是按二进制位来分配的。</p>\n</li>\n</ol>\n<p>[详细示例]：<a href=\"https://blog.csdn.net/yihongxiaoxiang/article/details/50327587\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/yihongxiaoxiang/article/details/50327587</a></p>\n<ul>\n<li>static 关键字</li>\n</ul>\n<p>使用<strong>static</strong>关键字定义在头文件中的变量，其修饰的全局变量的作用域为定义的源文件。在多个源文件中引用该头文件，相当于每个变量都会在引用该头文件的源文件中定义一次。</p>\n\n        <h4 id=\"一些实用的写法\"   >\n          <a href=\"#一些实用的写法\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>一些实用的写法</h4>\n      <figure class=\"highlight c\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> CHECK_STATE_FLAG(flag, state)\\</span></span><br><span class=\"line\">    <span class=\"keyword\">do</span>&#123;\\</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag != state)\\</span><br><span class=\"line\">        &#123;\\</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"func:%s,line:%d,flag statue fail\\n\"</span>,__FUNCTION__,__LINE__);\\</span><br><span class=\"line\">            <span class=\"keyword\">return</span> FAILURE;\\</span><br><span class=\"line\">        &#125;\\</span><br><span class=\"line\">    &#125;<span class=\"keyword\">while</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\">//仔细体会这个函数宏，真的是一种非常巧妙的用法，尽管功能简单，却能够在各处有需要的地方调用，</span></span><br><span class=\"line\"><span class=\"comment\">//并显示所在位置。就像面向对象语言中的错误处理，错误抛出一样实用。</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> UARTMSG_LOCK()   pthread_mutex_lock(&amp;g_tUartMsgMutex);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> UARTMSG_UNLOCK() pthread_mutex_unlock(&amp;g_tUartMsgMutex);</span></span><br><span class=\"line\"><span class=\"comment\">//这只是一个简单的宏定义用法，但事实上，当代码里充斥着这种编写风格与思想时，代码的可阅读性确实</span></span><br><span class=\"line\"><span class=\"comment\">//有很大的提高。</span></span><br><span class=\"line\"><span class=\"comment\">// 短整型大小端互换</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BigLittleSwap16(A)  ((((short int)(A) &amp; 0xff00) &gt;&gt; 8) | \\</span></span><br><span class=\"line\">                             (((short <span class=\"keyword\">int</span>)(A) &amp; <span class=\"number\">0x00ff</span>) &lt;&lt; <span class=\"number\">8</span>))</span><br><span class=\"line\"><span class=\"comment\">// 长整型大小端互换</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BigLittleSwap32(A)  ((((long int)(A)  &amp; 0xff000000) &gt;&gt; 24) | \\</span></span><br><span class=\"line\">                             (((<span class=\"keyword\">long</span> <span class=\"keyword\">int</span>)(A)  &amp; <span class=\"number\">0x00ff0000</span>) &gt;&gt; <span class=\"number\">8</span>) | \\</span><br><span class=\"line\">                             (((<span class=\"keyword\">long</span> <span class=\"keyword\">int</span>)(A)  &amp; <span class=\"number\">0x0000ff00</span>) &lt;&lt; <span class=\"number\">8</span>) | \\</span><br><span class=\"line\">                             (((<span class=\"keyword\">long</span> <span class=\"keyword\">int</span>)(A)  &amp; <span class=\"number\">0x000000ff</span>) &lt;&lt; <span class=\"number\">24</span>))</span><br></pre></td></tr></table></div></figure>\n\n","site":{"data":{"stun":{"shake_file":true,"index_subtitle":false,"canonical":true,"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu360_site_verification":null,"sougou_site_verification":null,"menu":{"home":"/ || fas fa-home","archives":"/archives/ || fas fa-folder-open","categories":"/categories/ || fas fa-layer-group","tags":"/tags/ || fas fa-tags"},"submenu":null,"menu_settings":{"icon_only":false,"text_only":false},"favicon":{"small":"/images/icons/favicon-16x16.png","medium":"/images/icons/favicon-32x32.png"},"pwa":{"enable":false,"manifest":"/manifest.json","theme_color":"#54bcff"},"night_mode":{"enable":true,"button":{"color":"#fafafa","bg_color":"#8c8a8a"},"icon":{"dark":"🌜","light":"🌞"}},"layout":{"content":"768px","sidebar":"300px","content_sidebar_gap":"30px","main_padding":{"default":"20px","tablet":"15px","mobile":"10px"}},"header":{"enable":true,"show_on":{"post":true},"height":"80%","bg_image":{"enable":true,"url":"/images/header.jpg"},"mask":{"enable":true,"opacity":0.5},"nav":{"height":"50px","bg_color":"#333"},"scroll_down_icon":{"enable":false,"name":"fas fa-angle-down","animation":true}},"body":{"bg_image":{"enable":true,"url":"/images/blogbk.jpg","fixed":true,"repeat":false},"mask":{"enable":false,"opacity":{"default":0.1,"night_mode":0.6}}},"footer":{"bg_image":{"enable":false,"url":null},"mask":{"enable":false,"opacity":0.5},"copyright":{"enable":true,"text":null,"since":null,"end":null},"icon":{"enable":true,"name":"fas fa-heart","animation":false,"color":"#ff0000"},"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":false,"icp":null},"custom":{"enable":false,"text":null}},"creative_commons":{"enable":true,"license":"BY-NC-SA","sidebar":true,"post":true,"language":null},"back2top":{"enable":true,"icon":{"name":"fas fa-rocket","rotate":"-45deg","color":"#49b1f5","hover_color":"#fc6423"}},"sidebar":{"enable":true,"position":"right","offsetTop":"20px","horizon_line":false},"author":{"enable":true,"avatar":{"url":"/images/icons/stun-logo.svg","rounded":false,"opacity":1,"animation":"turn"},"motto":"hello world"},"social":{"github":"https://github.com/ || fab fa-github","google":"https://plus.google.com/ || fab fa-google","twitter":"https://twitter.com/ || fab fa-twitter","youtube":"https://youtube.com/ || fab fa-youtube"},"social_setting":{"enable":false,"icon_only":true},"toc":{"enable":true,"list_number":true,"wrap":true,"expand_all":false,"min_depth":1,"max_depth":6},"feed":{"enable":false,"email":null,"rss":null},"reading_progress":{"enable":true,"color":"#fc6423","height":"1px"},"codeblock":{"style":"default","highlight":"light","word_wrap":false},"heading_line":true,"reward":{"enable":false,"alipay":null,"wechat":null},"post_meta":{"icon_only":false,"created":{"enable":true,"icon":"far fa-calendar-plus"},"updated":{"enable":true,"icon":"far fa-calendar-check"},"reading_time":{"enable":false,"icon":"far fa-clock","speed":{"zh":200,"en":80}},"word_count":{"enable":false,"icon":"far fa-file-word"}},"post_list":{"paginate":{"home":true,"archives":false},"cover_image":{"home":false}},"post_widget":{"tags":true,"end_text":{"enable":true,"horizon_line":true},"share":{"enable":false,"label":"Share to: ","target":"qzone, qq, weibo, wechat, douban, linkedin, facebook, twitter, google"}},"stick_top":{"position":"right","icon":"fas fa-thumbtack","rotate":"45deg","color":"#999"},"gitalk":{"enable":false,"owner":null,"repo":null,"client_id":null,"client_secret":null,"admin":null,"distraction_free_mode":false,"language":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"Just go go","avatar":"mp","meta":"nick,mail,link","pageSize":10,"visitor":false,"recordIP":false,"language":null},"minivaline":{"enable":false,"appId":null,"appKey":null,"placeholder":"Write a Comment","adminEmailMd5":null,"math":true,"md":true,"lang":null},"livere":{"enable":false,"uid":null},"disqus":{"enable":false,"shortname":null,"count":true},"utterances":{"enable":false,"owner":null,"repo":null,"mapping":"title","label":"utterances","theme":"github-light","script_url":"https://utteranc.es/client.js"},"busuanzi":{"enable":false,"icon_only":false,"site_uv":{"enable":true,"icon":"fas fa-user"},"site_pv":{"enable":true,"icon":"fas fa-eye"},"post_pv":{"enable":true,"icon":"fas fa-eye"}},"google_analytics":null,"baidu_analytics":null,"tencent_analytics":null,"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"show_stats":true}},"local_search":{"enable":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"canvas_nest":{"enable":true,"color":"0,0,0","opacity":0.6,"count":200,"zIndex":-1},"math":{"enable":false,"per_page":false,"engine":"katex","mathjax":{"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","mhchem":{"enable":false,"mhchem_js":"https://cdn.jsdelivr.net/npm/mathjax-mhchem@3.3.2/mhchem.min.js"}},"katex":{"cdn":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css","copy_tex":{"enable":true,"copy_tex_js":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.min.js","copy_tex_css":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.css"}}},"fancybox":false,"zoom_image":{"enable":true,"mask_color":"rgba(0,0,0,0.6)","gap_aside":"20px"},"gallery_waterfall":{"enable":false,"col_width":"220px","gap_x":"10px","gap_y":"10px"},"lazyload":{"enable":false,"placeholder":"gif"},"quicklink":{"enable":false,"home":true,"archive":true,"delay":true,"timeout":10000,"priority":true,"ignores":["/\\/api\\/?/","uri => uri.includes('.xml')","uri => uri.includes('.zip')","(uri, el) => el.hasAttribute('nofollow')","(uri, el) => el.hasAttribute('noprefetch')"]},"pjax":{"enable":false,"avoid_banner":false,"elements":null,"selectors":null,"switches":null,"switchesOptions":null,"history":true,"scrollTo":false,"scrollRestoration":false,"cacheBust":false,"debug":false,"currentUrlFullReload":false,"timeout":0},"google_adsense":{"enable":false,"client":null,"js_src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"},"external_link":{"icon":{"enable":true,"name":"fas fa-external-link-alt","color":"#aaa"}},"shortcuts":{"switch_post":{"enable":false}},"tag_cloud":{"start_color":"#a4d8fa","end_color":"#49b1f5","min_size":16,"max_size":26,"max_amount":200},"kill_old_ie":{"enable":false,"warning_url":"https://support.dmeng.net/upgrade-your-browser.html"},"css":"css","js":"js","images":"images","icon":{"search":"fas fa-search","localsearch_empty":"far fa-meh","menu_btn":"fas fa-bars","feed_email":"fas fa-envelope","feed_rss":"fas fa-rss","paginator_prev":"fas fa-angle-left","paginator_next":"fas fa-angle-right","read_more_btn":"fas fa-long-arrow-alt-right","post_tags":"fas fa-tag","copy_btn":"fas fa-copy","prompt_success":"fas fa-check-circle","prompt_info":"fas fa-arrow-circle-right","prompt_warning":"fas fa-exclamation-circle","prompt_error":"fas fa-times-circle","valine_visitor":"fas fa-eye","post_heading":"fas fa-link","notetag_default":"fas fa-arrow-circle-right","notetag_success":"fas fa-check-circle","notetag_info":"fas fa-info-circle","notetag_warning":"fas fa-exclamation-circle","notetag_danger":"fas fa-minus-circle"},"cdn":{"fontawesome":null,"jquery":null,"velocity":null,"velocity_ui":null,"gitalk_js":null,"gitalk_css":null,"gitalk_md5":null,"valine":null,"leancloud_storage":null,"minivaline":null,"busuanzi":null,"instantsearch_js":null,"instantsearch_css":null,"canvas_ribbon":null,"canvas_nest":null,"fancybox_js":null,"fancybox_css":null,"masonry":null,"lazyload":null,"quicklink":null,"pjax":null,"share_js":null,"share_css":null},"rootConfig":{"title":"在下的小书架","subtitle":"对一件事理解的越深，就能做的越好！","description":"","author":"zxr","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"stun","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/qingfengzxr/qingfengzxr.github.io","branch":"master","message":"(Site update {{ now('YYYY-MM-DD HH:mm:ss') }})"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"","more":"<ul>\n<li>位域</li>\n</ul>\n<p>结构体中的冒号表示位域。位域出现的原因是由于某些信息的存储表示只需要几个bit位就可以表示而不需要一个完整的字节，同时也是为了节省存储空间和方便处理。</p>\n<figure class=\"highlight c\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其表示形式为：</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> 位域结构名</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    类型说明符  位域名：位域长度</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">例如：</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span>  <span class=\"title\">bit_struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span>  bit1:<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>  bit2:<span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>  bit3:<span class=\"number\">7</span>;</span><br><span class=\"line\">&#125;data;</span><br><span class=\"line\">其中bit_struct表示位域结构体，bit1、bit2、bit3表示对应的位域，data表示位域结构体定义的变量。整个位域结构体占用<span class=\"number\">2</span>个字节，bit1占<span class=\"number\">3</span>位，bit2占<span class=\"number\">5</span>位，bit1和bit2共用一个字节，bit3占<span class=\"number\">7</span>位，独占一个字节。</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：</p>\n<ol>\n<li><p>位域必须存储在同一个类型中，不能跨类型，同时也说明位域的长度不会超过所定义类型的长度。如果一个定义类型单元里所剩空间无法存放下一个域，则下一个域应该从下一单元开始存放。例如：所定义的类型是int类型，一共32为，目前用掉了25位还剩下7位，这时要存储一个8位的位域元素，那么这个元素就只能从下一个int类型的单元开始而不会在前面一个int类型中占7为后面的int类型中占1位。</p>\n</li>\n<li><p>如果位域的位域长度为0表示是个空域，同时下一个域应当从下一个字节单元开始存放。</p>\n</li>\n<li><p>使用无名的位域来作为填充和调整位置，切记该位域是不能被使用的。</p>\n</li>\n<li><p>位域的本质上就是一种结构体类型，不同的是其成员是按二进制位来分配的。</p>\n</li>\n</ol>\n<p>[详细示例]：<a href=\"https://blog.csdn.net/yihongxiaoxiang/article/details/50327587\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/yihongxiaoxiang/article/details/50327587</a></p>\n<ul>\n<li>static 关键字</li>\n</ul>\n<p>使用<strong>static</strong>关键字定义在头文件中的变量，其修饰的全局变量的作用域为定义的源文件。在多个源文件中引用该头文件，相当于每个变量都会在引用该头文件的源文件中定义一次。</p>\n\n        <h4 id=\"一些实用的写法\"   >\n          <a href=\"#一些实用的写法\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>一些实用的写法</h4>\n      <figure class=\"highlight c\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> CHECK_STATE_FLAG(flag, state)\\</span></span><br><span class=\"line\">    <span class=\"keyword\">do</span>&#123;\\</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag != state)\\</span><br><span class=\"line\">        &#123;\\</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"func:%s,line:%d,flag statue fail\\n\"</span>,__FUNCTION__,__LINE__);\\</span><br><span class=\"line\">            <span class=\"keyword\">return</span> FAILURE;\\</span><br><span class=\"line\">        &#125;\\</span><br><span class=\"line\">    &#125;<span class=\"keyword\">while</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\">//仔细体会这个函数宏，真的是一种非常巧妙的用法，尽管功能简单，却能够在各处有需要的地方调用，</span></span><br><span class=\"line\"><span class=\"comment\">//并显示所在位置。就像面向对象语言中的错误处理，错误抛出一样实用。</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> UARTMSG_LOCK()   pthread_mutex_lock(&amp;g_tUartMsgMutex);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> UARTMSG_UNLOCK() pthread_mutex_unlock(&amp;g_tUartMsgMutex);</span></span><br><span class=\"line\"><span class=\"comment\">//这只是一个简单的宏定义用法，但事实上，当代码里充斥着这种编写风格与思想时，代码的可阅读性确实</span></span><br><span class=\"line\"><span class=\"comment\">//有很大的提高。</span></span><br><span class=\"line\"><span class=\"comment\">// 短整型大小端互换</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BigLittleSwap16(A)  ((((short int)(A) &amp; 0xff00) &gt;&gt; 8) | \\</span></span><br><span class=\"line\">                             (((short <span class=\"keyword\">int</span>)(A) &amp; <span class=\"number\">0x00ff</span>) &lt;&lt; <span class=\"number\">8</span>))</span><br><span class=\"line\"><span class=\"comment\">// 长整型大小端互换</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BigLittleSwap32(A)  ((((long int)(A)  &amp; 0xff000000) &gt;&gt; 24) | \\</span></span><br><span class=\"line\">                             (((<span class=\"keyword\">long</span> <span class=\"keyword\">int</span>)(A)  &amp; <span class=\"number\">0x00ff0000</span>) &gt;&gt; <span class=\"number\">8</span>) | \\</span><br><span class=\"line\">                             (((<span class=\"keyword\">long</span> <span class=\"keyword\">int</span>)(A)  &amp; <span class=\"number\">0x0000ff00</span>) &lt;&lt; <span class=\"number\">8</span>) | \\</span><br><span class=\"line\">                             (((<span class=\"keyword\">long</span> <span class=\"keyword\">int</span>)(A)  &amp; <span class=\"number\">0x000000ff</span>) &lt;&lt; <span class=\"number\">24</span>))</span><br></pre></td></tr></table></div></figure>\n\n"},{"title":"Linux线程知识","date":"2020-12-31T02:10:10.000Z","_content":"\n* pthread_attr_setstacksize\n\n**函数原型**\n\n```c\n#include <pthread.h>\nint pthread_attr_setstacksize(pthread_attr_t *attr, size_t stacksize);\n```\n\nattr 是线程属性变量；stacksize 则是设置的堆栈大小。 返回值0，-1分别表示成功与失败。\n\n**功能**: 重新设置堆栈大小\n\npthread_create 创建线程时，若不指定分配堆栈大小，系统会分配默认值，查看默认值方法如下：\n\n```shell\n# ulimit -s\n8192\n#\n上述表示为8M；单位为KB。\n也可以通过\n# ulimit -a \n其中 stack size 项也表示堆栈大小。ulimit -s  value 用来重新设置stack 大小。\n\n\n```\n\n嵌入式中内存不是很大，若采用默认值的话，会导致出现问题，若内存不足，则 pthread_create 会返回 12，定义如下：\n\n```c\n#define EAGAIN 11\n#define ENOMEM 12 /* Out of memory*/\n```\n\n","source":"_posts/Linux/pthread.md","raw":"---\ntitle: Linux线程知识\ndate: 2020-12-31 10:10:10\ncategories:\n  - Linux\n  - pthread\ntags:\n  - Linux\n  - pthread\n---\n\n* pthread_attr_setstacksize\n\n**函数原型**\n\n```c\n#include <pthread.h>\nint pthread_attr_setstacksize(pthread_attr_t *attr, size_t stacksize);\n```\n\nattr 是线程属性变量；stacksize 则是设置的堆栈大小。 返回值0，-1分别表示成功与失败。\n\n**功能**: 重新设置堆栈大小\n\npthread_create 创建线程时，若不指定分配堆栈大小，系统会分配默认值，查看默认值方法如下：\n\n```shell\n# ulimit -s\n8192\n#\n上述表示为8M；单位为KB。\n也可以通过\n# ulimit -a \n其中 stack size 项也表示堆栈大小。ulimit -s  value 用来重新设置stack 大小。\n\n\n```\n\n嵌入式中内存不是很大，若采用默认值的话，会导致出现问题，若内存不足，则 pthread_create 会返回 12，定义如下：\n\n```c\n#define EAGAIN 11\n#define ENOMEM 12 /* Out of memory*/\n```\n\n","slug":"Linux/pthread","published":1,"updated":"2020-12-31T09:45:59.904Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjcobavb0005helz5rrb00tj","content":"<ul>\n<li>pthread_attr_setstacksize</li>\n</ul>\n<p><strong>函数原型</strong></p>\n<figure class=\"highlight c\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_attr_setstacksize</span><span class=\"params\">(<span class=\"keyword\">pthread_attr_t</span> *attr, <span class=\"keyword\">size_t</span> stacksize)</span></span>;</span><br></pre></td></tr></table></div></figure>\n\n<p>attr 是线程属性变量；stacksize 则是设置的堆栈大小。 返回值0，-1分别表示成功与失败。</p>\n<p><strong>功能</strong>: 重新设置堆栈大小</p>\n<p>pthread_create 创建线程时，若不指定分配堆栈大小，系统会分配默认值，查看默认值方法如下：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">ulimit</span> -s</span></span><br><span class=\"line\">8192</span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\">上述表示为8M；单位为KB。</span><br><span class=\"line\">也可以通过</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">ulimit</span> -a </span></span><br><span class=\"line\">其中 stack size 项也表示堆栈大小。ulimit -s  value 用来重新设置stack 大小。</span><br></pre></td></tr></table></div></figure>\n\n<p>嵌入式中内存不是很大，若采用默认值的话，会导致出现问题，若内存不足，则 pthread_create 会返回 12，定义如下：</p>\n<figure class=\"highlight c\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> EAGAIN 11</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ENOMEM 12 <span class=\"comment\">/* Out of memory*/</span></span></span><br></pre></td></tr></table></div></figure>\n\n","site":{"data":{"stun":{"shake_file":true,"index_subtitle":false,"canonical":true,"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu360_site_verification":null,"sougou_site_verification":null,"menu":{"home":"/ || fas fa-home","archives":"/archives/ || fas fa-folder-open","categories":"/categories/ || fas fa-layer-group","tags":"/tags/ || fas fa-tags"},"submenu":null,"menu_settings":{"icon_only":false,"text_only":false},"favicon":{"small":"/images/icons/favicon-16x16.png","medium":"/images/icons/favicon-32x32.png"},"pwa":{"enable":false,"manifest":"/manifest.json","theme_color":"#54bcff"},"night_mode":{"enable":true,"button":{"color":"#fafafa","bg_color":"#8c8a8a"},"icon":{"dark":"🌜","light":"🌞"}},"layout":{"content":"768px","sidebar":"300px","content_sidebar_gap":"30px","main_padding":{"default":"20px","tablet":"15px","mobile":"10px"}},"header":{"enable":true,"show_on":{"post":true},"height":"80%","bg_image":{"enable":true,"url":"/images/header.jpg"},"mask":{"enable":true,"opacity":0.5},"nav":{"height":"50px","bg_color":"#333"},"scroll_down_icon":{"enable":false,"name":"fas fa-angle-down","animation":true}},"body":{"bg_image":{"enable":true,"url":"/images/blogbk.jpg","fixed":true,"repeat":false},"mask":{"enable":false,"opacity":{"default":0.1,"night_mode":0.6}}},"footer":{"bg_image":{"enable":false,"url":null},"mask":{"enable":false,"opacity":0.5},"copyright":{"enable":true,"text":null,"since":null,"end":null},"icon":{"enable":true,"name":"fas fa-heart","animation":false,"color":"#ff0000"},"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":false,"icp":null},"custom":{"enable":false,"text":null}},"creative_commons":{"enable":true,"license":"BY-NC-SA","sidebar":true,"post":true,"language":null},"back2top":{"enable":true,"icon":{"name":"fas fa-rocket","rotate":"-45deg","color":"#49b1f5","hover_color":"#fc6423"}},"sidebar":{"enable":true,"position":"right","offsetTop":"20px","horizon_line":false},"author":{"enable":true,"avatar":{"url":"/images/icons/stun-logo.svg","rounded":false,"opacity":1,"animation":"turn"},"motto":"hello world"},"social":{"github":"https://github.com/ || fab fa-github","google":"https://plus.google.com/ || fab fa-google","twitter":"https://twitter.com/ || fab fa-twitter","youtube":"https://youtube.com/ || fab fa-youtube"},"social_setting":{"enable":false,"icon_only":true},"toc":{"enable":true,"list_number":true,"wrap":true,"expand_all":false,"min_depth":1,"max_depth":6},"feed":{"enable":false,"email":null,"rss":null},"reading_progress":{"enable":true,"color":"#fc6423","height":"1px"},"codeblock":{"style":"default","highlight":"light","word_wrap":false},"heading_line":true,"reward":{"enable":false,"alipay":null,"wechat":null},"post_meta":{"icon_only":false,"created":{"enable":true,"icon":"far fa-calendar-plus"},"updated":{"enable":true,"icon":"far fa-calendar-check"},"reading_time":{"enable":false,"icon":"far fa-clock","speed":{"zh":200,"en":80}},"word_count":{"enable":false,"icon":"far fa-file-word"}},"post_list":{"paginate":{"home":true,"archives":false},"cover_image":{"home":false}},"post_widget":{"tags":true,"end_text":{"enable":true,"horizon_line":true},"share":{"enable":false,"label":"Share to: ","target":"qzone, qq, weibo, wechat, douban, linkedin, facebook, twitter, google"}},"stick_top":{"position":"right","icon":"fas fa-thumbtack","rotate":"45deg","color":"#999"},"gitalk":{"enable":false,"owner":null,"repo":null,"client_id":null,"client_secret":null,"admin":null,"distraction_free_mode":false,"language":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"Just go go","avatar":"mp","meta":"nick,mail,link","pageSize":10,"visitor":false,"recordIP":false,"language":null},"minivaline":{"enable":false,"appId":null,"appKey":null,"placeholder":"Write a Comment","adminEmailMd5":null,"math":true,"md":true,"lang":null},"livere":{"enable":false,"uid":null},"disqus":{"enable":false,"shortname":null,"count":true},"utterances":{"enable":false,"owner":null,"repo":null,"mapping":"title","label":"utterances","theme":"github-light","script_url":"https://utteranc.es/client.js"},"busuanzi":{"enable":false,"icon_only":false,"site_uv":{"enable":true,"icon":"fas fa-user"},"site_pv":{"enable":true,"icon":"fas fa-eye"},"post_pv":{"enable":true,"icon":"fas fa-eye"}},"google_analytics":null,"baidu_analytics":null,"tencent_analytics":null,"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"show_stats":true}},"local_search":{"enable":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"canvas_nest":{"enable":true,"color":"0,0,0","opacity":0.6,"count":200,"zIndex":-1},"math":{"enable":false,"per_page":false,"engine":"katex","mathjax":{"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","mhchem":{"enable":false,"mhchem_js":"https://cdn.jsdelivr.net/npm/mathjax-mhchem@3.3.2/mhchem.min.js"}},"katex":{"cdn":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css","copy_tex":{"enable":true,"copy_tex_js":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.min.js","copy_tex_css":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.css"}}},"fancybox":false,"zoom_image":{"enable":true,"mask_color":"rgba(0,0,0,0.6)","gap_aside":"20px"},"gallery_waterfall":{"enable":false,"col_width":"220px","gap_x":"10px","gap_y":"10px"},"lazyload":{"enable":false,"placeholder":"gif"},"quicklink":{"enable":false,"home":true,"archive":true,"delay":true,"timeout":10000,"priority":true,"ignores":["/\\/api\\/?/","uri => uri.includes('.xml')","uri => uri.includes('.zip')","(uri, el) => el.hasAttribute('nofollow')","(uri, el) => el.hasAttribute('noprefetch')"]},"pjax":{"enable":false,"avoid_banner":false,"elements":null,"selectors":null,"switches":null,"switchesOptions":null,"history":true,"scrollTo":false,"scrollRestoration":false,"cacheBust":false,"debug":false,"currentUrlFullReload":false,"timeout":0},"google_adsense":{"enable":false,"client":null,"js_src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"},"external_link":{"icon":{"enable":true,"name":"fas fa-external-link-alt","color":"#aaa"}},"shortcuts":{"switch_post":{"enable":false}},"tag_cloud":{"start_color":"#a4d8fa","end_color":"#49b1f5","min_size":16,"max_size":26,"max_amount":200},"kill_old_ie":{"enable":false,"warning_url":"https://support.dmeng.net/upgrade-your-browser.html"},"css":"css","js":"js","images":"images","icon":{"search":"fas fa-search","localsearch_empty":"far fa-meh","menu_btn":"fas fa-bars","feed_email":"fas fa-envelope","feed_rss":"fas fa-rss","paginator_prev":"fas fa-angle-left","paginator_next":"fas fa-angle-right","read_more_btn":"fas fa-long-arrow-alt-right","post_tags":"fas fa-tag","copy_btn":"fas fa-copy","prompt_success":"fas fa-check-circle","prompt_info":"fas fa-arrow-circle-right","prompt_warning":"fas fa-exclamation-circle","prompt_error":"fas fa-times-circle","valine_visitor":"fas fa-eye","post_heading":"fas fa-link","notetag_default":"fas fa-arrow-circle-right","notetag_success":"fas fa-check-circle","notetag_info":"fas fa-info-circle","notetag_warning":"fas fa-exclamation-circle","notetag_danger":"fas fa-minus-circle"},"cdn":{"fontawesome":null,"jquery":null,"velocity":null,"velocity_ui":null,"gitalk_js":null,"gitalk_css":null,"gitalk_md5":null,"valine":null,"leancloud_storage":null,"minivaline":null,"busuanzi":null,"instantsearch_js":null,"instantsearch_css":null,"canvas_ribbon":null,"canvas_nest":null,"fancybox_js":null,"fancybox_css":null,"masonry":null,"lazyload":null,"quicklink":null,"pjax":null,"share_js":null,"share_css":null},"rootConfig":{"title":"在下的小书架","subtitle":"对一件事理解的越深，就能做的越好！","description":"","author":"zxr","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"stun","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/qingfengzxr/qingfengzxr.github.io","branch":"master","message":"(Site update {{ now('YYYY-MM-DD HH:mm:ss') }})"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"","more":"<ul>\n<li>pthread_attr_setstacksize</li>\n</ul>\n<p><strong>函数原型</strong></p>\n<figure class=\"highlight c\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pthread_attr_setstacksize</span><span class=\"params\">(<span class=\"keyword\">pthread_attr_t</span> *attr, <span class=\"keyword\">size_t</span> stacksize)</span></span>;</span><br></pre></td></tr></table></div></figure>\n\n<p>attr 是线程属性变量；stacksize 则是设置的堆栈大小。 返回值0，-1分别表示成功与失败。</p>\n<p><strong>功能</strong>: 重新设置堆栈大小</p>\n<p>pthread_create 创建线程时，若不指定分配堆栈大小，系统会分配默认值，查看默认值方法如下：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">ulimit</span> -s</span></span><br><span class=\"line\">8192</span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\">上述表示为8M；单位为KB。</span><br><span class=\"line\">也可以通过</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">ulimit</span> -a </span></span><br><span class=\"line\">其中 stack size 项也表示堆栈大小。ulimit -s  value 用来重新设置stack 大小。</span><br></pre></td></tr></table></div></figure>\n\n<p>嵌入式中内存不是很大，若采用默认值的话，会导致出现问题，若内存不足，则 pthread_create 会返回 12，定义如下：</p>\n<figure class=\"highlight c\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> EAGAIN 11</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ENOMEM 12 <span class=\"comment\">/* Out of memory*/</span></span></span><br></pre></td></tr></table></div></figure>\n\n"},{"title":"Nginx详解","date":"2020-12-31T09:26:11.000Z","_content":"","source":"_posts/Nginx/note.md","raw":"---\ntitle: Nginx详解\ndate: 2020-12-31 17:26:11\ncategories:\n  - nginx\ntags:\n  - nginx\n---\n","slug":"Nginx/note","published":1,"updated":"2020-12-31T09:47:19.866Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjcobavi0008helzh4ug2lv7","content":"","site":{"data":{"stun":{"shake_file":true,"index_subtitle":false,"canonical":true,"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu360_site_verification":null,"sougou_site_verification":null,"menu":{"home":"/ || fas fa-home","archives":"/archives/ || fas fa-folder-open","categories":"/categories/ || fas fa-layer-group","tags":"/tags/ || fas fa-tags"},"submenu":null,"menu_settings":{"icon_only":false,"text_only":false},"favicon":{"small":"/images/icons/favicon-16x16.png","medium":"/images/icons/favicon-32x32.png"},"pwa":{"enable":false,"manifest":"/manifest.json","theme_color":"#54bcff"},"night_mode":{"enable":true,"button":{"color":"#fafafa","bg_color":"#8c8a8a"},"icon":{"dark":"🌜","light":"🌞"}},"layout":{"content":"768px","sidebar":"300px","content_sidebar_gap":"30px","main_padding":{"default":"20px","tablet":"15px","mobile":"10px"}},"header":{"enable":true,"show_on":{"post":true},"height":"80%","bg_image":{"enable":true,"url":"/images/header.jpg"},"mask":{"enable":true,"opacity":0.5},"nav":{"height":"50px","bg_color":"#333"},"scroll_down_icon":{"enable":false,"name":"fas fa-angle-down","animation":true}},"body":{"bg_image":{"enable":true,"url":"/images/blogbk.jpg","fixed":true,"repeat":false},"mask":{"enable":false,"opacity":{"default":0.1,"night_mode":0.6}}},"footer":{"bg_image":{"enable":false,"url":null},"mask":{"enable":false,"opacity":0.5},"copyright":{"enable":true,"text":null,"since":null,"end":null},"icon":{"enable":true,"name":"fas fa-heart","animation":false,"color":"#ff0000"},"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":false,"icp":null},"custom":{"enable":false,"text":null}},"creative_commons":{"enable":true,"license":"BY-NC-SA","sidebar":true,"post":true,"language":null},"back2top":{"enable":true,"icon":{"name":"fas fa-rocket","rotate":"-45deg","color":"#49b1f5","hover_color":"#fc6423"}},"sidebar":{"enable":true,"position":"right","offsetTop":"20px","horizon_line":false},"author":{"enable":true,"avatar":{"url":"/images/icons/stun-logo.svg","rounded":false,"opacity":1,"animation":"turn"},"motto":"hello world"},"social":{"github":"https://github.com/ || fab fa-github","google":"https://plus.google.com/ || fab fa-google","twitter":"https://twitter.com/ || fab fa-twitter","youtube":"https://youtube.com/ || fab fa-youtube"},"social_setting":{"enable":false,"icon_only":true},"toc":{"enable":true,"list_number":true,"wrap":true,"expand_all":false,"min_depth":1,"max_depth":6},"feed":{"enable":false,"email":null,"rss":null},"reading_progress":{"enable":true,"color":"#fc6423","height":"1px"},"codeblock":{"style":"default","highlight":"light","word_wrap":false},"heading_line":true,"reward":{"enable":false,"alipay":null,"wechat":null},"post_meta":{"icon_only":false,"created":{"enable":true,"icon":"far fa-calendar-plus"},"updated":{"enable":true,"icon":"far fa-calendar-check"},"reading_time":{"enable":false,"icon":"far fa-clock","speed":{"zh":200,"en":80}},"word_count":{"enable":false,"icon":"far fa-file-word"}},"post_list":{"paginate":{"home":true,"archives":false},"cover_image":{"home":false}},"post_widget":{"tags":true,"end_text":{"enable":true,"horizon_line":true},"share":{"enable":false,"label":"Share to: ","target":"qzone, qq, weibo, wechat, douban, linkedin, facebook, twitter, google"}},"stick_top":{"position":"right","icon":"fas fa-thumbtack","rotate":"45deg","color":"#999"},"gitalk":{"enable":false,"owner":null,"repo":null,"client_id":null,"client_secret":null,"admin":null,"distraction_free_mode":false,"language":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"Just go go","avatar":"mp","meta":"nick,mail,link","pageSize":10,"visitor":false,"recordIP":false,"language":null},"minivaline":{"enable":false,"appId":null,"appKey":null,"placeholder":"Write a Comment","adminEmailMd5":null,"math":true,"md":true,"lang":null},"livere":{"enable":false,"uid":null},"disqus":{"enable":false,"shortname":null,"count":true},"utterances":{"enable":false,"owner":null,"repo":null,"mapping":"title","label":"utterances","theme":"github-light","script_url":"https://utteranc.es/client.js"},"busuanzi":{"enable":false,"icon_only":false,"site_uv":{"enable":true,"icon":"fas fa-user"},"site_pv":{"enable":true,"icon":"fas fa-eye"},"post_pv":{"enable":true,"icon":"fas fa-eye"}},"google_analytics":null,"baidu_analytics":null,"tencent_analytics":null,"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"show_stats":true}},"local_search":{"enable":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"canvas_nest":{"enable":true,"color":"0,0,0","opacity":0.6,"count":200,"zIndex":-1},"math":{"enable":false,"per_page":false,"engine":"katex","mathjax":{"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","mhchem":{"enable":false,"mhchem_js":"https://cdn.jsdelivr.net/npm/mathjax-mhchem@3.3.2/mhchem.min.js"}},"katex":{"cdn":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css","copy_tex":{"enable":true,"copy_tex_js":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.min.js","copy_tex_css":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.css"}}},"fancybox":false,"zoom_image":{"enable":true,"mask_color":"rgba(0,0,0,0.6)","gap_aside":"20px"},"gallery_waterfall":{"enable":false,"col_width":"220px","gap_x":"10px","gap_y":"10px"},"lazyload":{"enable":false,"placeholder":"gif"},"quicklink":{"enable":false,"home":true,"archive":true,"delay":true,"timeout":10000,"priority":true,"ignores":["/\\/api\\/?/","uri => uri.includes('.xml')","uri => uri.includes('.zip')","(uri, el) => el.hasAttribute('nofollow')","(uri, el) => el.hasAttribute('noprefetch')"]},"pjax":{"enable":false,"avoid_banner":false,"elements":null,"selectors":null,"switches":null,"switchesOptions":null,"history":true,"scrollTo":false,"scrollRestoration":false,"cacheBust":false,"debug":false,"currentUrlFullReload":false,"timeout":0},"google_adsense":{"enable":false,"client":null,"js_src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"},"external_link":{"icon":{"enable":true,"name":"fas fa-external-link-alt","color":"#aaa"}},"shortcuts":{"switch_post":{"enable":false}},"tag_cloud":{"start_color":"#a4d8fa","end_color":"#49b1f5","min_size":16,"max_size":26,"max_amount":200},"kill_old_ie":{"enable":false,"warning_url":"https://support.dmeng.net/upgrade-your-browser.html"},"css":"css","js":"js","images":"images","icon":{"search":"fas fa-search","localsearch_empty":"far fa-meh","menu_btn":"fas fa-bars","feed_email":"fas fa-envelope","feed_rss":"fas fa-rss","paginator_prev":"fas fa-angle-left","paginator_next":"fas fa-angle-right","read_more_btn":"fas fa-long-arrow-alt-right","post_tags":"fas fa-tag","copy_btn":"fas fa-copy","prompt_success":"fas fa-check-circle","prompt_info":"fas fa-arrow-circle-right","prompt_warning":"fas fa-exclamation-circle","prompt_error":"fas fa-times-circle","valine_visitor":"fas fa-eye","post_heading":"fas fa-link","notetag_default":"fas fa-arrow-circle-right","notetag_success":"fas fa-check-circle","notetag_info":"fas fa-info-circle","notetag_warning":"fas fa-exclamation-circle","notetag_danger":"fas fa-minus-circle"},"cdn":{"fontawesome":null,"jquery":null,"velocity":null,"velocity_ui":null,"gitalk_js":null,"gitalk_css":null,"gitalk_md5":null,"valine":null,"leancloud_storage":null,"minivaline":null,"busuanzi":null,"instantsearch_js":null,"instantsearch_css":null,"canvas_ribbon":null,"canvas_nest":null,"fancybox_js":null,"fancybox_css":null,"masonry":null,"lazyload":null,"quicklink":null,"pjax":null,"share_js":null,"share_css":null},"rootConfig":{"title":"在下的小书架","subtitle":"对一件事理解的越深，就能做的越好！","description":"","author":"zxr","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"stun","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/qingfengzxr/qingfengzxr.github.io","branch":"master","message":"(Site update {{ now('YYYY-MM-DD HH:mm:ss') }})"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"","more":""},{"title":"操作系统","date":"2020-07-17T03:56:11.000Z","_content":"\n### 操作系统\n\n#### 地址\n\n​        **物理地址**就是物理内存真正的地址，相当于内存中每个存储单元的门牌号，具有唯一性。不管在什么模式下，不管什么虚拟地址、线性地址，CPU最终都要以物理地址去访问内存，只有物理地址才是内存访问的终点站。\n\n​        在实模式下，“段基址+段内偏移地址”称为**线性地址**，不过，此时的段基址已经不再是真正的地址了，而是一个称为选择子的东西。它本质是一个索引，类似于数组下标，通过这个索引便能在GDT中找到相应的段描述符，在该描述符中记录了该段的起始、大小等信息，这样便得到了段基址。若没有开启地址分页功能，此线性地址就被当做物理地址来用，可直接访问内存。若开启了分页功能，此线性地址又多了一个名字，就是虚拟地址（虚拟地址、线性地址在分页机制下都是一回事）。虚拟地址要经过CPU页部件转换成具体的物理地址，这样CPU才能将其送上地址总线去访问内存。\n\n​\t\t无论在实模式或是保护模式下，段内偏移地址又称为有效地址，也称为逻辑地址，这是程序员可见的地址，这是因为，最终的地址是由段基址和段内偏移地址组和而成的。\n\n​\t\t__分页功能需要保护模式开启__\n\n\n\n#### 平坦模型\n\n平坦模型是相对于多段模型来说的，所以说平坦模型指的就是一个段 。 比如在实模式下，访问超过\n64KB 的内存，需要重新指定不同的段基址，通过这种迂回变通的方式才能达到目的。在保护模式下，\n由于其是 32 位的，寻址范围便能够达到 4GB ，段内偏移地址也是地址，所以也是 32 位 。 可见，在 32\n位环境下用一个段就能够访问到硬件所支持的所有内存 。 也就是说，段的大小可以是地址总线能够到达\n的范围 。 既然平坦模型是相对于多段模型来说的，为什么不称为单段模型，而称为平坦昵，我估计很多\n读者己经明白了，用多个小段再加上不断换段基址的方式访问内存确实够麻烦的，可能换着换着就晕了，\n别忘记了，这种多段模型为了访问到 lMB 地址空间，还需要额外打开 A20 地址线昵，这种访存方式本\n身就是种补救措施，相当于给硬件打了个补丁，既然是补丁，访问内存的过程必然是不顺畅的 。 相对于\n那么麻烦的多段模型，平坦模型不需要额外打开 A20 地址线，不需要来回切换段基址就可以在地址空间\n内任意朝翔。如果把内存段比喻成小格子的话，平坦模型下的内存访问，没有众多小格子成为羁绊，可\n谓一路“平坦”。\n\n\n\n#### 文件格式\n\n* Linux: ELF (Executable and Linking Format)  \n* windows: PE (Portable executable)\n\n\n\n操作系统如何识别文件系统呢：一种文件系统对应一个魔数，通过比对此值便知道文件系统类型了。\n\nBIOS->MBR(主引导记录,Master/Main Boot Record)->OBR(操作系统引导记录OS Boot Record)此后便是内核管理了。\n\n","source":"_posts/OS/note.md","raw":"---\ntitle: 操作系统\ndate: 2020-07-17 11:56:11\ncategories:\n  - OS\ntags:\n  - OS\n---\n\n### 操作系统\n\n#### 地址\n\n​        **物理地址**就是物理内存真正的地址，相当于内存中每个存储单元的门牌号，具有唯一性。不管在什么模式下，不管什么虚拟地址、线性地址，CPU最终都要以物理地址去访问内存，只有物理地址才是内存访问的终点站。\n\n​        在实模式下，“段基址+段内偏移地址”称为**线性地址**，不过，此时的段基址已经不再是真正的地址了，而是一个称为选择子的东西。它本质是一个索引，类似于数组下标，通过这个索引便能在GDT中找到相应的段描述符，在该描述符中记录了该段的起始、大小等信息，这样便得到了段基址。若没有开启地址分页功能，此线性地址就被当做物理地址来用，可直接访问内存。若开启了分页功能，此线性地址又多了一个名字，就是虚拟地址（虚拟地址、线性地址在分页机制下都是一回事）。虚拟地址要经过CPU页部件转换成具体的物理地址，这样CPU才能将其送上地址总线去访问内存。\n\n​\t\t无论在实模式或是保护模式下，段内偏移地址又称为有效地址，也称为逻辑地址，这是程序员可见的地址，这是因为，最终的地址是由段基址和段内偏移地址组和而成的。\n\n​\t\t__分页功能需要保护模式开启__\n\n\n\n#### 平坦模型\n\n平坦模型是相对于多段模型来说的，所以说平坦模型指的就是一个段 。 比如在实模式下，访问超过\n64KB 的内存，需要重新指定不同的段基址，通过这种迂回变通的方式才能达到目的。在保护模式下，\n由于其是 32 位的，寻址范围便能够达到 4GB ，段内偏移地址也是地址，所以也是 32 位 。 可见，在 32\n位环境下用一个段就能够访问到硬件所支持的所有内存 。 也就是说，段的大小可以是地址总线能够到达\n的范围 。 既然平坦模型是相对于多段模型来说的，为什么不称为单段模型，而称为平坦昵，我估计很多\n读者己经明白了，用多个小段再加上不断换段基址的方式访问内存确实够麻烦的，可能换着换着就晕了，\n别忘记了，这种多段模型为了访问到 lMB 地址空间，还需要额外打开 A20 地址线昵，这种访存方式本\n身就是种补救措施，相当于给硬件打了个补丁，既然是补丁，访问内存的过程必然是不顺畅的 。 相对于\n那么麻烦的多段模型，平坦模型不需要额外打开 A20 地址线，不需要来回切换段基址就可以在地址空间\n内任意朝翔。如果把内存段比喻成小格子的话，平坦模型下的内存访问，没有众多小格子成为羁绊，可\n谓一路“平坦”。\n\n\n\n#### 文件格式\n\n* Linux: ELF (Executable and Linking Format)  \n* windows: PE (Portable executable)\n\n\n\n操作系统如何识别文件系统呢：一种文件系统对应一个魔数，通过比对此值便知道文件系统类型了。\n\nBIOS->MBR(主引导记录,Master/Main Boot Record)->OBR(操作系统引导记录OS Boot Record)此后便是内核管理了。\n\n","slug":"OS/note","published":1,"updated":"2020-12-31T09:48:26.191Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjcobavk0009helzcdnc5w0u","content":"\n        <h3 id=\"操作系统\"   >\n          <a href=\"#操作系统\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>操作系统</h3>\n      \n        <h4 id=\"地址\"   >\n          <a href=\"#地址\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>地址</h4>\n      <p>​        <strong>物理地址</strong>就是物理内存真正的地址，相当于内存中每个存储单元的门牌号，具有唯一性。不管在什么模式下，不管什么虚拟地址、线性地址，CPU最终都要以物理地址去访问内存，只有物理地址才是内存访问的终点站。</p>\n<p>​        在实模式下，“段基址+段内偏移地址”称为<strong>线性地址</strong>，不过，此时的段基址已经不再是真正的地址了，而是一个称为选择子的东西。它本质是一个索引，类似于数组下标，通过这个索引便能在GDT中找到相应的段描述符，在该描述符中记录了该段的起始、大小等信息，这样便得到了段基址。若没有开启地址分页功能，此线性地址就被当做物理地址来用，可直接访问内存。若开启了分页功能，此线性地址又多了一个名字，就是虚拟地址（虚拟地址、线性地址在分页机制下都是一回事）。虚拟地址要经过CPU页部件转换成具体的物理地址，这样CPU才能将其送上地址总线去访问内存。</p>\n<p>​        无论在实模式或是保护模式下，段内偏移地址又称为有效地址，也称为逻辑地址，这是程序员可见的地址，这是因为，最终的地址是由段基址和段内偏移地址组和而成的。</p>\n<p>​        <strong>分页功能需要保护模式开启</strong></p>\n\n        <h4 id=\"平坦模型\"   >\n          <a href=\"#平坦模型\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>平坦模型</h4>\n      <p>平坦模型是相对于多段模型来说的，所以说平坦模型指的就是一个段 。 比如在实模式下，访问超过<br>64KB 的内存，需要重新指定不同的段基址，通过这种迂回变通的方式才能达到目的。在保护模式下，<br>由于其是 32 位的，寻址范围便能够达到 4GB ，段内偏移地址也是地址，所以也是 32 位 。 可见，在 32<br>位环境下用一个段就能够访问到硬件所支持的所有内存 。 也就是说，段的大小可以是地址总线能够到达<br>的范围 。 既然平坦模型是相对于多段模型来说的，为什么不称为单段模型，而称为平坦昵，我估计很多<br>读者己经明白了，用多个小段再加上不断换段基址的方式访问内存确实够麻烦的，可能换着换着就晕了，<br>别忘记了，这种多段模型为了访问到 lMB 地址空间，还需要额外打开 A20 地址线昵，这种访存方式本<br>身就是种补救措施，相当于给硬件打了个补丁，既然是补丁，访问内存的过程必然是不顺畅的 。 相对于<br>那么麻烦的多段模型，平坦模型不需要额外打开 A20 地址线，不需要来回切换段基址就可以在地址空间<br>内任意朝翔。如果把内存段比喻成小格子的话，平坦模型下的内存访问，没有众多小格子成为羁绊，可<br>谓一路“平坦”。</p>\n\n        <h4 id=\"文件格式\"   >\n          <a href=\"#文件格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>文件格式</h4>\n      <ul>\n<li>Linux: ELF (Executable and Linking Format)  </li>\n<li>windows: PE (Portable executable)</li>\n</ul>\n<p>操作系统如何识别文件系统呢：一种文件系统对应一个魔数，通过比对此值便知道文件系统类型了。</p>\n<p>BIOS-&gt;MBR(主引导记录,Master/Main Boot Record)-&gt;OBR(操作系统引导记录OS Boot Record)此后便是内核管理了。</p>\n","site":{"data":{"stun":{"shake_file":true,"index_subtitle":false,"canonical":true,"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu360_site_verification":null,"sougou_site_verification":null,"menu":{"home":"/ || fas fa-home","archives":"/archives/ || fas fa-folder-open","categories":"/categories/ || fas fa-layer-group","tags":"/tags/ || fas fa-tags"},"submenu":null,"menu_settings":{"icon_only":false,"text_only":false},"favicon":{"small":"/images/icons/favicon-16x16.png","medium":"/images/icons/favicon-32x32.png"},"pwa":{"enable":false,"manifest":"/manifest.json","theme_color":"#54bcff"},"night_mode":{"enable":true,"button":{"color":"#fafafa","bg_color":"#8c8a8a"},"icon":{"dark":"🌜","light":"🌞"}},"layout":{"content":"768px","sidebar":"300px","content_sidebar_gap":"30px","main_padding":{"default":"20px","tablet":"15px","mobile":"10px"}},"header":{"enable":true,"show_on":{"post":true},"height":"80%","bg_image":{"enable":true,"url":"/images/header.jpg"},"mask":{"enable":true,"opacity":0.5},"nav":{"height":"50px","bg_color":"#333"},"scroll_down_icon":{"enable":false,"name":"fas fa-angle-down","animation":true}},"body":{"bg_image":{"enable":true,"url":"/images/blogbk.jpg","fixed":true,"repeat":false},"mask":{"enable":false,"opacity":{"default":0.1,"night_mode":0.6}}},"footer":{"bg_image":{"enable":false,"url":null},"mask":{"enable":false,"opacity":0.5},"copyright":{"enable":true,"text":null,"since":null,"end":null},"icon":{"enable":true,"name":"fas fa-heart","animation":false,"color":"#ff0000"},"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":false,"icp":null},"custom":{"enable":false,"text":null}},"creative_commons":{"enable":true,"license":"BY-NC-SA","sidebar":true,"post":true,"language":null},"back2top":{"enable":true,"icon":{"name":"fas fa-rocket","rotate":"-45deg","color":"#49b1f5","hover_color":"#fc6423"}},"sidebar":{"enable":true,"position":"right","offsetTop":"20px","horizon_line":false},"author":{"enable":true,"avatar":{"url":"/images/icons/stun-logo.svg","rounded":false,"opacity":1,"animation":"turn"},"motto":"hello world"},"social":{"github":"https://github.com/ || fab fa-github","google":"https://plus.google.com/ || fab fa-google","twitter":"https://twitter.com/ || fab fa-twitter","youtube":"https://youtube.com/ || fab fa-youtube"},"social_setting":{"enable":false,"icon_only":true},"toc":{"enable":true,"list_number":true,"wrap":true,"expand_all":false,"min_depth":1,"max_depth":6},"feed":{"enable":false,"email":null,"rss":null},"reading_progress":{"enable":true,"color":"#fc6423","height":"1px"},"codeblock":{"style":"default","highlight":"light","word_wrap":false},"heading_line":true,"reward":{"enable":false,"alipay":null,"wechat":null},"post_meta":{"icon_only":false,"created":{"enable":true,"icon":"far fa-calendar-plus"},"updated":{"enable":true,"icon":"far fa-calendar-check"},"reading_time":{"enable":false,"icon":"far fa-clock","speed":{"zh":200,"en":80}},"word_count":{"enable":false,"icon":"far fa-file-word"}},"post_list":{"paginate":{"home":true,"archives":false},"cover_image":{"home":false}},"post_widget":{"tags":true,"end_text":{"enable":true,"horizon_line":true},"share":{"enable":false,"label":"Share to: ","target":"qzone, qq, weibo, wechat, douban, linkedin, facebook, twitter, google"}},"stick_top":{"position":"right","icon":"fas fa-thumbtack","rotate":"45deg","color":"#999"},"gitalk":{"enable":false,"owner":null,"repo":null,"client_id":null,"client_secret":null,"admin":null,"distraction_free_mode":false,"language":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"Just go go","avatar":"mp","meta":"nick,mail,link","pageSize":10,"visitor":false,"recordIP":false,"language":null},"minivaline":{"enable":false,"appId":null,"appKey":null,"placeholder":"Write a Comment","adminEmailMd5":null,"math":true,"md":true,"lang":null},"livere":{"enable":false,"uid":null},"disqus":{"enable":false,"shortname":null,"count":true},"utterances":{"enable":false,"owner":null,"repo":null,"mapping":"title","label":"utterances","theme":"github-light","script_url":"https://utteranc.es/client.js"},"busuanzi":{"enable":false,"icon_only":false,"site_uv":{"enable":true,"icon":"fas fa-user"},"site_pv":{"enable":true,"icon":"fas fa-eye"},"post_pv":{"enable":true,"icon":"fas fa-eye"}},"google_analytics":null,"baidu_analytics":null,"tencent_analytics":null,"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"show_stats":true}},"local_search":{"enable":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"canvas_nest":{"enable":true,"color":"0,0,0","opacity":0.6,"count":200,"zIndex":-1},"math":{"enable":false,"per_page":false,"engine":"katex","mathjax":{"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","mhchem":{"enable":false,"mhchem_js":"https://cdn.jsdelivr.net/npm/mathjax-mhchem@3.3.2/mhchem.min.js"}},"katex":{"cdn":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css","copy_tex":{"enable":true,"copy_tex_js":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.min.js","copy_tex_css":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.css"}}},"fancybox":false,"zoom_image":{"enable":true,"mask_color":"rgba(0,0,0,0.6)","gap_aside":"20px"},"gallery_waterfall":{"enable":false,"col_width":"220px","gap_x":"10px","gap_y":"10px"},"lazyload":{"enable":false,"placeholder":"gif"},"quicklink":{"enable":false,"home":true,"archive":true,"delay":true,"timeout":10000,"priority":true,"ignores":["/\\/api\\/?/","uri => uri.includes('.xml')","uri => uri.includes('.zip')","(uri, el) => el.hasAttribute('nofollow')","(uri, el) => el.hasAttribute('noprefetch')"]},"pjax":{"enable":false,"avoid_banner":false,"elements":null,"selectors":null,"switches":null,"switchesOptions":null,"history":true,"scrollTo":false,"scrollRestoration":false,"cacheBust":false,"debug":false,"currentUrlFullReload":false,"timeout":0},"google_adsense":{"enable":false,"client":null,"js_src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"},"external_link":{"icon":{"enable":true,"name":"fas fa-external-link-alt","color":"#aaa"}},"shortcuts":{"switch_post":{"enable":false}},"tag_cloud":{"start_color":"#a4d8fa","end_color":"#49b1f5","min_size":16,"max_size":26,"max_amount":200},"kill_old_ie":{"enable":false,"warning_url":"https://support.dmeng.net/upgrade-your-browser.html"},"css":"css","js":"js","images":"images","icon":{"search":"fas fa-search","localsearch_empty":"far fa-meh","menu_btn":"fas fa-bars","feed_email":"fas fa-envelope","feed_rss":"fas fa-rss","paginator_prev":"fas fa-angle-left","paginator_next":"fas fa-angle-right","read_more_btn":"fas fa-long-arrow-alt-right","post_tags":"fas fa-tag","copy_btn":"fas fa-copy","prompt_success":"fas fa-check-circle","prompt_info":"fas fa-arrow-circle-right","prompt_warning":"fas fa-exclamation-circle","prompt_error":"fas fa-times-circle","valine_visitor":"fas fa-eye","post_heading":"fas fa-link","notetag_default":"fas fa-arrow-circle-right","notetag_success":"fas fa-check-circle","notetag_info":"fas fa-info-circle","notetag_warning":"fas fa-exclamation-circle","notetag_danger":"fas fa-minus-circle"},"cdn":{"fontawesome":null,"jquery":null,"velocity":null,"velocity_ui":null,"gitalk_js":null,"gitalk_css":null,"gitalk_md5":null,"valine":null,"leancloud_storage":null,"minivaline":null,"busuanzi":null,"instantsearch_js":null,"instantsearch_css":null,"canvas_ribbon":null,"canvas_nest":null,"fancybox_js":null,"fancybox_css":null,"masonry":null,"lazyload":null,"quicklink":null,"pjax":null,"share_js":null,"share_css":null},"rootConfig":{"title":"在下的小书架","subtitle":"对一件事理解的越深，就能做的越好！","description":"","author":"zxr","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"stun","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/qingfengzxr/qingfengzxr.github.io","branch":"master","message":"(Site update {{ now('YYYY-MM-DD HH:mm:ss') }})"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"","more":"\n        <h3 id=\"操作系统\"   >\n          <a href=\"#操作系统\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>操作系统</h3>\n      \n        <h4 id=\"地址\"   >\n          <a href=\"#地址\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>地址</h4>\n      <p>​        <strong>物理地址</strong>就是物理内存真正的地址，相当于内存中每个存储单元的门牌号，具有唯一性。不管在什么模式下，不管什么虚拟地址、线性地址，CPU最终都要以物理地址去访问内存，只有物理地址才是内存访问的终点站。</p>\n<p>​        在实模式下，“段基址+段内偏移地址”称为<strong>线性地址</strong>，不过，此时的段基址已经不再是真正的地址了，而是一个称为选择子的东西。它本质是一个索引，类似于数组下标，通过这个索引便能在GDT中找到相应的段描述符，在该描述符中记录了该段的起始、大小等信息，这样便得到了段基址。若没有开启地址分页功能，此线性地址就被当做物理地址来用，可直接访问内存。若开启了分页功能，此线性地址又多了一个名字，就是虚拟地址（虚拟地址、线性地址在分页机制下都是一回事）。虚拟地址要经过CPU页部件转换成具体的物理地址，这样CPU才能将其送上地址总线去访问内存。</p>\n<p>​        无论在实模式或是保护模式下，段内偏移地址又称为有效地址，也称为逻辑地址，这是程序员可见的地址，这是因为，最终的地址是由段基址和段内偏移地址组和而成的。</p>\n<p>​        <strong>分页功能需要保护模式开启</strong></p>\n\n        <h4 id=\"平坦模型\"   >\n          <a href=\"#平坦模型\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>平坦模型</h4>\n      <p>平坦模型是相对于多段模型来说的，所以说平坦模型指的就是一个段 。 比如在实模式下，访问超过<br>64KB 的内存，需要重新指定不同的段基址，通过这种迂回变通的方式才能达到目的。在保护模式下，<br>由于其是 32 位的，寻址范围便能够达到 4GB ，段内偏移地址也是地址，所以也是 32 位 。 可见，在 32<br>位环境下用一个段就能够访问到硬件所支持的所有内存 。 也就是说，段的大小可以是地址总线能够到达<br>的范围 。 既然平坦模型是相对于多段模型来说的，为什么不称为单段模型，而称为平坦昵，我估计很多<br>读者己经明白了，用多个小段再加上不断换段基址的方式访问内存确实够麻烦的，可能换着换着就晕了，<br>别忘记了，这种多段模型为了访问到 lMB 地址空间，还需要额外打开 A20 地址线昵，这种访存方式本<br>身就是种补救措施，相当于给硬件打了个补丁，既然是补丁，访问内存的过程必然是不顺畅的 。 相对于<br>那么麻烦的多段模型，平坦模型不需要额外打开 A20 地址线，不需要来回切换段基址就可以在地址空间<br>内任意朝翔。如果把内存段比喻成小格子的话，平坦模型下的内存访问，没有众多小格子成为羁绊，可<br>谓一路“平坦”。</p>\n\n        <h4 id=\"文件格式\"   >\n          <a href=\"#文件格式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>文件格式</h4>\n      <ul>\n<li>Linux: ELF (Executable and Linking Format)  </li>\n<li>windows: PE (Portable executable)</li>\n</ul>\n<p>操作系统如何识别文件系统呢：一种文件系统对应一个魔数，通过比对此值便知道文件系统类型了。</p>\n<p>BIOS-&gt;MBR(主引导记录,Master/Main Boot Record)-&gt;OBR(操作系统引导记录OS Boot Record)此后便是内核管理了。</p>\n"},{"title":"计算机网络笔记与思考","date":"2020-08-09T09:00:07.000Z","_content":"\n## 什么是因特网？\n\n对于这个问题，*《计算机网络自顶向下方法》*一书中给出了如下两种回答该问题的方式：\n\n*“其一，我们能够描述因特网的具体构成，即构成因特网的基本硬件和软件组件。”*\n\n*“其二，我们能够根据为分布式应用提供服务的联网基础设施来描述因特网。”*\n\n\n\n## 网络的网络\n\n构成因特网的“网络的网络”已经演化成了一个非常复杂的结构。这部分内容以逐步递进的方式建造了一系列的网络结构，这部分讲解使得我们可以从宏观上认识网络的组成结构。\n\n**网络结构1**，用单一的全球传输ISP互联所有接入ISP。假想的全球传输ISP是一个路由器和通信链路构成的网络，该网络不仅跨越全球，而且至少具有一台路由器靠近数十万接入ISP中的每一个。显然，这是一个耗资巨大的网络。为了有利可图，自然要向每个接入进来的ISP收费，其价格反映一个接入ISP经过全球ISP交换的流量大小。\n\n**网络结构2**，很显然一个可赢利的全球传输ISP,其他公司建立自己的全球传输ISP并与最初的全球传输ISP竞争则是一件自然的事情。这导致了网络结构2，它由数十万个接入ISP和多个全球传输ISP组成。这些全球传输ISP必须是互联的，不然的话，与某个全球传输ISP连接的接入ISP将不能与连接到其他全球传输ISP的接入ISP进行通信。网络结构2是一种两层的等级结构，其中全球传输提供商位于顶层，而接入ISP位于底层。\n\n**网络结构3**，网络结构3在等级结构中加入了区域ISP一层，现在不仅有多个竞争的第一层ISP,而且在一个区域可能有多个竞争的区域ISP,在这样的等级结构中，每个接入ISP向其连接的区域ISP支付费用，并且每个区域ISP向它连接的第一层ISP支付费用(一个接入ISP也能直接与第一层ISP连接，这样它就向第一层ISP付费)。因此，在这个等级结构中的每一层，都有客户-提供商关系。一个现实的例子，在中国，每个城市有接入ISP,它们与省级ISP相连接，省级ISP又与国家级ISP连接，国家级ISP最终与第一层ISP连接。网络结构3粗略近似于今天的因特网。\n\n**网络结构4**，网络结构4在等级化网络结构3上增加了存在点（Point of Presence,PoP）、多宿、对等和因特网交换点。PoP存在于等级结构的所有层次，除了底层(接入ISP)等级。一个PoP只是提供商网络中的一台或多台路由器群主，其中客户ISP能够与提供商ISP连接。对于要与提供商PoP连接的客户网络，它能从第三方电信提供商租用高速链路将它的路由器之一直接连接到位于该PoP的一台路由器。任何ISP(除了第一层ISP)可以选择多宿(multi-home),即可以与两个或更多个提供商ISP连接。客户ISP为了减少支付给提供商ISP的流量费用，可以直接将它们的网络连接在一起，不通过上游的中间ISP传输。这种相同等级结构层次的一对ISP直连称为对等(peer)。类似的，第三方公司能够创建一个因特网交换点(Internet Exchange Point,IXP)，IXP是一个汇合点，多个ISP能够在这里一起对等。IXP通常位于一个有自己的交换机的独立建筑物中。现在我们可以看到，网络结构4变得复杂起来了，它由接入ISP、区域ISP、第一层ISP、PoP、多宿、对等和IXP组成。\n\n**网络结构5**，如今的因特网结构就是网络结构5所描述的结构。它通过在网络结构4顶部增加内容提供商网络(content provider network)构建而成。谷歌是当前这样的内容提供商网络的一个突出例子。谷歌专用网络通过与较低层的ISP对等，尝试绕过因特网的较高层，采用的方式可以是直接与它们连接。通过创建自己的网络，内容提供商不仅减少了向顶层ISP支付的费用，而且对其服务最终如何交付给端用户有了更多的控制。\n\n","source":"_posts/network/计算机网络笔记与思考.md","raw":"---\ntitle: 计算机网络笔记与思考\ndate: 2020-08-09 17:00:07\ncategories:\n- [computer network]\ntags:\n- computer_network\n---\n\n## 什么是因特网？\n\n对于这个问题，*《计算机网络自顶向下方法》*一书中给出了如下两种回答该问题的方式：\n\n*“其一，我们能够描述因特网的具体构成，即构成因特网的基本硬件和软件组件。”*\n\n*“其二，我们能够根据为分布式应用提供服务的联网基础设施来描述因特网。”*\n\n\n\n## 网络的网络\n\n构成因特网的“网络的网络”已经演化成了一个非常复杂的结构。这部分内容以逐步递进的方式建造了一系列的网络结构，这部分讲解使得我们可以从宏观上认识网络的组成结构。\n\n**网络结构1**，用单一的全球传输ISP互联所有接入ISP。假想的全球传输ISP是一个路由器和通信链路构成的网络，该网络不仅跨越全球，而且至少具有一台路由器靠近数十万接入ISP中的每一个。显然，这是一个耗资巨大的网络。为了有利可图，自然要向每个接入进来的ISP收费，其价格反映一个接入ISP经过全球ISP交换的流量大小。\n\n**网络结构2**，很显然一个可赢利的全球传输ISP,其他公司建立自己的全球传输ISP并与最初的全球传输ISP竞争则是一件自然的事情。这导致了网络结构2，它由数十万个接入ISP和多个全球传输ISP组成。这些全球传输ISP必须是互联的，不然的话，与某个全球传输ISP连接的接入ISP将不能与连接到其他全球传输ISP的接入ISP进行通信。网络结构2是一种两层的等级结构，其中全球传输提供商位于顶层，而接入ISP位于底层。\n\n**网络结构3**，网络结构3在等级结构中加入了区域ISP一层，现在不仅有多个竞争的第一层ISP,而且在一个区域可能有多个竞争的区域ISP,在这样的等级结构中，每个接入ISP向其连接的区域ISP支付费用，并且每个区域ISP向它连接的第一层ISP支付费用(一个接入ISP也能直接与第一层ISP连接，这样它就向第一层ISP付费)。因此，在这个等级结构中的每一层，都有客户-提供商关系。一个现实的例子，在中国，每个城市有接入ISP,它们与省级ISP相连接，省级ISP又与国家级ISP连接，国家级ISP最终与第一层ISP连接。网络结构3粗略近似于今天的因特网。\n\n**网络结构4**，网络结构4在等级化网络结构3上增加了存在点（Point of Presence,PoP）、多宿、对等和因特网交换点。PoP存在于等级结构的所有层次，除了底层(接入ISP)等级。一个PoP只是提供商网络中的一台或多台路由器群主，其中客户ISP能够与提供商ISP连接。对于要与提供商PoP连接的客户网络，它能从第三方电信提供商租用高速链路将它的路由器之一直接连接到位于该PoP的一台路由器。任何ISP(除了第一层ISP)可以选择多宿(multi-home),即可以与两个或更多个提供商ISP连接。客户ISP为了减少支付给提供商ISP的流量费用，可以直接将它们的网络连接在一起，不通过上游的中间ISP传输。这种相同等级结构层次的一对ISP直连称为对等(peer)。类似的，第三方公司能够创建一个因特网交换点(Internet Exchange Point,IXP)，IXP是一个汇合点，多个ISP能够在这里一起对等。IXP通常位于一个有自己的交换机的独立建筑物中。现在我们可以看到，网络结构4变得复杂起来了，它由接入ISP、区域ISP、第一层ISP、PoP、多宿、对等和IXP组成。\n\n**网络结构5**，如今的因特网结构就是网络结构5所描述的结构。它通过在网络结构4顶部增加内容提供商网络(content provider network)构建而成。谷歌是当前这样的内容提供商网络的一个突出例子。谷歌专用网络通过与较低层的ISP对等，尝试绕过因特网的较高层，采用的方式可以是直接与它们连接。通过创建自己的网络，内容提供商不仅减少了向顶层ISP支付的费用，而且对其服务最终如何交付给端用户有了更多的控制。\n\n","slug":"network/计算机网络笔记与思考","published":1,"updated":"2020-12-29T12:10:30.459Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjcobavl000ahelzht3xhqvq","content":"\n        <h2 id=\"什么是因特网？\"   >\n          <a href=\"#什么是因特网？\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>什么是因特网？</h2>\n      <p>对于这个问题，<em>《计算机网络自顶向下方法》</em>一书中给出了如下两种回答该问题的方式：</p>\n<p><em>“其一，我们能够描述因特网的具体构成，即构成因特网的基本硬件和软件组件。”</em></p>\n<p><em>“其二，我们能够根据为分布式应用提供服务的联网基础设施来描述因特网。”</em></p>\n\n        <h2 id=\"网络的网络\"   >\n          <a href=\"#网络的网络\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>网络的网络</h2>\n      <p>构成因特网的“网络的网络”已经演化成了一个非常复杂的结构。这部分内容以逐步递进的方式建造了一系列的网络结构，这部分讲解使得我们可以从宏观上认识网络的组成结构。</p>\n<p><strong>网络结构1</strong>，用单一的全球传输ISP互联所有接入ISP。假想的全球传输ISP是一个路由器和通信链路构成的网络，该网络不仅跨越全球，而且至少具有一台路由器靠近数十万接入ISP中的每一个。显然，这是一个耗资巨大的网络。为了有利可图，自然要向每个接入进来的ISP收费，其价格反映一个接入ISP经过全球ISP交换的流量大小。</p>\n<p><strong>网络结构2</strong>，很显然一个可赢利的全球传输ISP,其他公司建立自己的全球传输ISP并与最初的全球传输ISP竞争则是一件自然的事情。这导致了网络结构2，它由数十万个接入ISP和多个全球传输ISP组成。这些全球传输ISP必须是互联的，不然的话，与某个全球传输ISP连接的接入ISP将不能与连接到其他全球传输ISP的接入ISP进行通信。网络结构2是一种两层的等级结构，其中全球传输提供商位于顶层，而接入ISP位于底层。</p>\n<p><strong>网络结构3</strong>，网络结构3在等级结构中加入了区域ISP一层，现在不仅有多个竞争的第一层ISP,而且在一个区域可能有多个竞争的区域ISP,在这样的等级结构中，每个接入ISP向其连接的区域ISP支付费用，并且每个区域ISP向它连接的第一层ISP支付费用(一个接入ISP也能直接与第一层ISP连接，这样它就向第一层ISP付费)。因此，在这个等级结构中的每一层，都有客户-提供商关系。一个现实的例子，在中国，每个城市有接入ISP,它们与省级ISP相连接，省级ISP又与国家级ISP连接，国家级ISP最终与第一层ISP连接。网络结构3粗略近似于今天的因特网。</p>\n<p><strong>网络结构4</strong>，网络结构4在等级化网络结构3上增加了存在点（Point of Presence,PoP）、多宿、对等和因特网交换点。PoP存在于等级结构的所有层次，除了底层(接入ISP)等级。一个PoP只是提供商网络中的一台或多台路由器群主，其中客户ISP能够与提供商ISP连接。对于要与提供商PoP连接的客户网络，它能从第三方电信提供商租用高速链路将它的路由器之一直接连接到位于该PoP的一台路由器。任何ISP(除了第一层ISP)可以选择多宿(multi-home),即可以与两个或更多个提供商ISP连接。客户ISP为了减少支付给提供商ISP的流量费用，可以直接将它们的网络连接在一起，不通过上游的中间ISP传输。这种相同等级结构层次的一对ISP直连称为对等(peer)。类似的，第三方公司能够创建一个因特网交换点(Internet Exchange Point,IXP)，IXP是一个汇合点，多个ISP能够在这里一起对等。IXP通常位于一个有自己的交换机的独立建筑物中。现在我们可以看到，网络结构4变得复杂起来了，它由接入ISP、区域ISP、第一层ISP、PoP、多宿、对等和IXP组成。</p>\n<p><strong>网络结构5</strong>，如今的因特网结构就是网络结构5所描述的结构。它通过在网络结构4顶部增加内容提供商网络(content provider network)构建而成。谷歌是当前这样的内容提供商网络的一个突出例子。谷歌专用网络通过与较低层的ISP对等，尝试绕过因特网的较高层，采用的方式可以是直接与它们连接。通过创建自己的网络，内容提供商不仅减少了向顶层ISP支付的费用，而且对其服务最终如何交付给端用户有了更多的控制。</p>\n","site":{"data":{"stun":{"shake_file":true,"index_subtitle":false,"canonical":true,"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu360_site_verification":null,"sougou_site_verification":null,"menu":{"home":"/ || fas fa-home","archives":"/archives/ || fas fa-folder-open","categories":"/categories/ || fas fa-layer-group","tags":"/tags/ || fas fa-tags"},"submenu":null,"menu_settings":{"icon_only":false,"text_only":false},"favicon":{"small":"/images/icons/favicon-16x16.png","medium":"/images/icons/favicon-32x32.png"},"pwa":{"enable":false,"manifest":"/manifest.json","theme_color":"#54bcff"},"night_mode":{"enable":true,"button":{"color":"#fafafa","bg_color":"#8c8a8a"},"icon":{"dark":"🌜","light":"🌞"}},"layout":{"content":"768px","sidebar":"300px","content_sidebar_gap":"30px","main_padding":{"default":"20px","tablet":"15px","mobile":"10px"}},"header":{"enable":true,"show_on":{"post":true},"height":"80%","bg_image":{"enable":true,"url":"/images/header.jpg"},"mask":{"enable":true,"opacity":0.5},"nav":{"height":"50px","bg_color":"#333"},"scroll_down_icon":{"enable":false,"name":"fas fa-angle-down","animation":true}},"body":{"bg_image":{"enable":true,"url":"/images/blogbk.jpg","fixed":true,"repeat":false},"mask":{"enable":false,"opacity":{"default":0.1,"night_mode":0.6}}},"footer":{"bg_image":{"enable":false,"url":null},"mask":{"enable":false,"opacity":0.5},"copyright":{"enable":true,"text":null,"since":null,"end":null},"icon":{"enable":true,"name":"fas fa-heart","animation":false,"color":"#ff0000"},"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":false,"icp":null},"custom":{"enable":false,"text":null}},"creative_commons":{"enable":true,"license":"BY-NC-SA","sidebar":true,"post":true,"language":null},"back2top":{"enable":true,"icon":{"name":"fas fa-rocket","rotate":"-45deg","color":"#49b1f5","hover_color":"#fc6423"}},"sidebar":{"enable":true,"position":"right","offsetTop":"20px","horizon_line":false},"author":{"enable":true,"avatar":{"url":"/images/icons/stun-logo.svg","rounded":false,"opacity":1,"animation":"turn"},"motto":"hello world"},"social":{"github":"https://github.com/ || fab fa-github","google":"https://plus.google.com/ || fab fa-google","twitter":"https://twitter.com/ || fab fa-twitter","youtube":"https://youtube.com/ || fab fa-youtube"},"social_setting":{"enable":false,"icon_only":true},"toc":{"enable":true,"list_number":true,"wrap":true,"expand_all":false,"min_depth":1,"max_depth":6},"feed":{"enable":false,"email":null,"rss":null},"reading_progress":{"enable":true,"color":"#fc6423","height":"1px"},"codeblock":{"style":"default","highlight":"light","word_wrap":false},"heading_line":true,"reward":{"enable":false,"alipay":null,"wechat":null},"post_meta":{"icon_only":false,"created":{"enable":true,"icon":"far fa-calendar-plus"},"updated":{"enable":true,"icon":"far fa-calendar-check"},"reading_time":{"enable":false,"icon":"far fa-clock","speed":{"zh":200,"en":80}},"word_count":{"enable":false,"icon":"far fa-file-word"}},"post_list":{"paginate":{"home":true,"archives":false},"cover_image":{"home":false}},"post_widget":{"tags":true,"end_text":{"enable":true,"horizon_line":true},"share":{"enable":false,"label":"Share to: ","target":"qzone, qq, weibo, wechat, douban, linkedin, facebook, twitter, google"}},"stick_top":{"position":"right","icon":"fas fa-thumbtack","rotate":"45deg","color":"#999"},"gitalk":{"enable":false,"owner":null,"repo":null,"client_id":null,"client_secret":null,"admin":null,"distraction_free_mode":false,"language":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"Just go go","avatar":"mp","meta":"nick,mail,link","pageSize":10,"visitor":false,"recordIP":false,"language":null},"minivaline":{"enable":false,"appId":null,"appKey":null,"placeholder":"Write a Comment","adminEmailMd5":null,"math":true,"md":true,"lang":null},"livere":{"enable":false,"uid":null},"disqus":{"enable":false,"shortname":null,"count":true},"utterances":{"enable":false,"owner":null,"repo":null,"mapping":"title","label":"utterances","theme":"github-light","script_url":"https://utteranc.es/client.js"},"busuanzi":{"enable":false,"icon_only":false,"site_uv":{"enable":true,"icon":"fas fa-user"},"site_pv":{"enable":true,"icon":"fas fa-eye"},"post_pv":{"enable":true,"icon":"fas fa-eye"}},"google_analytics":null,"baidu_analytics":null,"tencent_analytics":null,"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"show_stats":true}},"local_search":{"enable":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"canvas_nest":{"enable":true,"color":"0,0,0","opacity":0.6,"count":200,"zIndex":-1},"math":{"enable":false,"per_page":false,"engine":"katex","mathjax":{"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","mhchem":{"enable":false,"mhchem_js":"https://cdn.jsdelivr.net/npm/mathjax-mhchem@3.3.2/mhchem.min.js"}},"katex":{"cdn":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css","copy_tex":{"enable":true,"copy_tex_js":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.min.js","copy_tex_css":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.css"}}},"fancybox":false,"zoom_image":{"enable":true,"mask_color":"rgba(0,0,0,0.6)","gap_aside":"20px"},"gallery_waterfall":{"enable":false,"col_width":"220px","gap_x":"10px","gap_y":"10px"},"lazyload":{"enable":false,"placeholder":"gif"},"quicklink":{"enable":false,"home":true,"archive":true,"delay":true,"timeout":10000,"priority":true,"ignores":["/\\/api\\/?/","uri => uri.includes('.xml')","uri => uri.includes('.zip')","(uri, el) => el.hasAttribute('nofollow')","(uri, el) => el.hasAttribute('noprefetch')"]},"pjax":{"enable":false,"avoid_banner":false,"elements":null,"selectors":null,"switches":null,"switchesOptions":null,"history":true,"scrollTo":false,"scrollRestoration":false,"cacheBust":false,"debug":false,"currentUrlFullReload":false,"timeout":0},"google_adsense":{"enable":false,"client":null,"js_src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"},"external_link":{"icon":{"enable":true,"name":"fas fa-external-link-alt","color":"#aaa"}},"shortcuts":{"switch_post":{"enable":false}},"tag_cloud":{"start_color":"#a4d8fa","end_color":"#49b1f5","min_size":16,"max_size":26,"max_amount":200},"kill_old_ie":{"enable":false,"warning_url":"https://support.dmeng.net/upgrade-your-browser.html"},"css":"css","js":"js","images":"images","icon":{"search":"fas fa-search","localsearch_empty":"far fa-meh","menu_btn":"fas fa-bars","feed_email":"fas fa-envelope","feed_rss":"fas fa-rss","paginator_prev":"fas fa-angle-left","paginator_next":"fas fa-angle-right","read_more_btn":"fas fa-long-arrow-alt-right","post_tags":"fas fa-tag","copy_btn":"fas fa-copy","prompt_success":"fas fa-check-circle","prompt_info":"fas fa-arrow-circle-right","prompt_warning":"fas fa-exclamation-circle","prompt_error":"fas fa-times-circle","valine_visitor":"fas fa-eye","post_heading":"fas fa-link","notetag_default":"fas fa-arrow-circle-right","notetag_success":"fas fa-check-circle","notetag_info":"fas fa-info-circle","notetag_warning":"fas fa-exclamation-circle","notetag_danger":"fas fa-minus-circle"},"cdn":{"fontawesome":null,"jquery":null,"velocity":null,"velocity_ui":null,"gitalk_js":null,"gitalk_css":null,"gitalk_md5":null,"valine":null,"leancloud_storage":null,"minivaline":null,"busuanzi":null,"instantsearch_js":null,"instantsearch_css":null,"canvas_ribbon":null,"canvas_nest":null,"fancybox_js":null,"fancybox_css":null,"masonry":null,"lazyload":null,"quicklink":null,"pjax":null,"share_js":null,"share_css":null},"rootConfig":{"title":"在下的小书架","subtitle":"对一件事理解的越深，就能做的越好！","description":"","author":"zxr","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"stun","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/qingfengzxr/qingfengzxr.github.io","branch":"master","message":"(Site update {{ now('YYYY-MM-DD HH:mm:ss') }})"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"","more":"\n        <h2 id=\"什么是因特网？\"   >\n          <a href=\"#什么是因特网？\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>什么是因特网？</h2>\n      <p>对于这个问题，<em>《计算机网络自顶向下方法》</em>一书中给出了如下两种回答该问题的方式：</p>\n<p><em>“其一，我们能够描述因特网的具体构成，即构成因特网的基本硬件和软件组件。”</em></p>\n<p><em>“其二，我们能够根据为分布式应用提供服务的联网基础设施来描述因特网。”</em></p>\n\n        <h2 id=\"网络的网络\"   >\n          <a href=\"#网络的网络\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>网络的网络</h2>\n      <p>构成因特网的“网络的网络”已经演化成了一个非常复杂的结构。这部分内容以逐步递进的方式建造了一系列的网络结构，这部分讲解使得我们可以从宏观上认识网络的组成结构。</p>\n<p><strong>网络结构1</strong>，用单一的全球传输ISP互联所有接入ISP。假想的全球传输ISP是一个路由器和通信链路构成的网络，该网络不仅跨越全球，而且至少具有一台路由器靠近数十万接入ISP中的每一个。显然，这是一个耗资巨大的网络。为了有利可图，自然要向每个接入进来的ISP收费，其价格反映一个接入ISP经过全球ISP交换的流量大小。</p>\n<p><strong>网络结构2</strong>，很显然一个可赢利的全球传输ISP,其他公司建立自己的全球传输ISP并与最初的全球传输ISP竞争则是一件自然的事情。这导致了网络结构2，它由数十万个接入ISP和多个全球传输ISP组成。这些全球传输ISP必须是互联的，不然的话，与某个全球传输ISP连接的接入ISP将不能与连接到其他全球传输ISP的接入ISP进行通信。网络结构2是一种两层的等级结构，其中全球传输提供商位于顶层，而接入ISP位于底层。</p>\n<p><strong>网络结构3</strong>，网络结构3在等级结构中加入了区域ISP一层，现在不仅有多个竞争的第一层ISP,而且在一个区域可能有多个竞争的区域ISP,在这样的等级结构中，每个接入ISP向其连接的区域ISP支付费用，并且每个区域ISP向它连接的第一层ISP支付费用(一个接入ISP也能直接与第一层ISP连接，这样它就向第一层ISP付费)。因此，在这个等级结构中的每一层，都有客户-提供商关系。一个现实的例子，在中国，每个城市有接入ISP,它们与省级ISP相连接，省级ISP又与国家级ISP连接，国家级ISP最终与第一层ISP连接。网络结构3粗略近似于今天的因特网。</p>\n<p><strong>网络结构4</strong>，网络结构4在等级化网络结构3上增加了存在点（Point of Presence,PoP）、多宿、对等和因特网交换点。PoP存在于等级结构的所有层次，除了底层(接入ISP)等级。一个PoP只是提供商网络中的一台或多台路由器群主，其中客户ISP能够与提供商ISP连接。对于要与提供商PoP连接的客户网络，它能从第三方电信提供商租用高速链路将它的路由器之一直接连接到位于该PoP的一台路由器。任何ISP(除了第一层ISP)可以选择多宿(multi-home),即可以与两个或更多个提供商ISP连接。客户ISP为了减少支付给提供商ISP的流量费用，可以直接将它们的网络连接在一起，不通过上游的中间ISP传输。这种相同等级结构层次的一对ISP直连称为对等(peer)。类似的，第三方公司能够创建一个因特网交换点(Internet Exchange Point,IXP)，IXP是一个汇合点，多个ISP能够在这里一起对等。IXP通常位于一个有自己的交换机的独立建筑物中。现在我们可以看到，网络结构4变得复杂起来了，它由接入ISP、区域ISP、第一层ISP、PoP、多宿、对等和IXP组成。</p>\n<p><strong>网络结构5</strong>，如今的因特网结构就是网络结构5所描述的结构。它通过在网络结构4顶部增加内容提供商网络(content provider network)构建而成。谷歌是当前这样的内容提供商网络的一个突出例子。谷歌专用网络通过与较低层的ISP对等，尝试绕过因特网的较高层，采用的方式可以是直接与它们连接。通过创建自己的网络，内容提供商不仅减少了向顶层ISP支付的费用，而且对其服务最终如何交付给端用户有了更多的控制。</p>\n"},{"title":"面向对象编程思想总结","date":"2020-11-10T03:50:11.000Z","_content":"\n[TOC]\n\n\n\n# 面向对象编程思想总结\n\n## 一、面向对象编程思想简介\n\n#### 什么是面向对象？\n\n面向对象是一种编程思想，把具有相同属性和动作的实体抽象成为一个类(集合)、统称。类似于现实世界中对物品、动物等进行分类。这个类的实体具有相同的属性和相同的行为。\n\n#### 什么是面向对象编程？\n\n面向对象编程(Object Oriented Programming)是基于类和对象，在这一基础上进行编程的程序设计思想。程序就是一系列对象的集合，程序负责控制调度这些对象交互从而完成最终任务。\n\n举例：把大象装入冰箱要几步？\n\n面向过程思想：\n\n1. 打开冰箱\n\n2. 装入大象\n\n3. 关闭冰箱\n\n面向对象思想：\n\n设计一个具备装大象功能的对象，让这个对象去完成这个工作。\n\n\n\n其核心是思维的转变：面向对象中，程序员从具体的操作者变成了指挥者。\n\n#### 优缺点如何？\n\n优点：\n\n1. 扩展性强（对象增加减少不影响其他对象运行）\n2. 灵活性高\n3. 可重用性高\n\n缺点：\n\n1. 程序的复杂度提高了\n2. 无法准确预知结果，分析问题的时候也不像面向过程那样简便。\n\n\n\n## 二、四大基本特征\n\n#### 抽象\n\n抽象是提取现实世界中某事物的关键特性，为该事物构建模型的过程。对同一事物中不同的需求下，需要提取的特性可能不一样。得到的抽象模型中一般包含：属性（数据）和操作（行为）。这个抽象模型我们称之为类，通过对类进行实例化得到具体的对象。\n\n\n\n#### 封装\n\n封装可以使类具有独立性和隔离性，从而保证类的高内聚。只暴露给类外部或者子类必须的属性和操作。\n\n\n\n#### 继承\n\n继承是对现有类的一种复用机制。一个类如果继承现有的类，则这个类将拥有被继承类的所有非私有特性（属性和操作）。这里指的继承包含类的继承和接口的实现。常见的继承方法有共有继承、私有继承、多重继承、多层继承。\n\n\n\n#### 多态\n\n多态是在继承的基础上实现的。多态的三个要素：继承、重写和父类引用指向子类的对象。父类引用指向不同的子类对象时，**调用相同的方法，呈现出不同的行为；就是类的多态性**。多态还可分为编译时多态（静态多态性）和运行时多态（动态多态性）。另外类的函数重载、运算符重载，也可算为多态的特性。\n\n\n\n## 三、七大设计原则\n\n在面向对象四大基础特性之上，我们在做面向对象设计时，还需要遵循一些基本设计原则。\n\n- SOLID原则（单一职责原则、开放关闭原则、里氏替换原则、接口隔离原则和依赖倒置原则）；\n- 迪米特法则；\n- 组合优于继承原则（合成复用原则）；\n\n下面是这七大原则的详细描述：\n\n#### 单一责任原则\n\n一个类应该只有一个引起变化的原因。\n\n#### 开放关闭原则\n\n类应该对扩展开放，对修改关闭；我们的目标是允许类容易扩展，在不修改现有代码的情况下，就可搭配新的行为。这样的设计具有弹性可以应对改变，可以接受新的功能来应对改变的需求。\n\n#### 里氏替换原则\n\n所有引用基类的地方必须透明地使用其子类对象。只要有父类出现的地方，都可以用子类来替代。\n\n#### 接口隔离原则\n\n客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。\n\n#### 赖倒置原则\n\n要依赖抽象，不要依赖具体类。\n\n#### 迪米特法则\n\n又叫最少知识原则，只和你的密友谈话。\n\n#### 组合犹于继承原则\n\n多用组合，少用继承；使用组合建立系统具有很大的弹性，不仅可以将算法封装成类，更可以“在运行时动态地改变行为”，只要组合的行为对象符合正确的接口标准即可。\n\n\n\n* 另外还有如下几个常用的原则：\n\n#### 好莱坞原则\n\n别调用（打电话给我们）我们，我们会调用（打电话给）你。\n\n#### 封装变化\n\n找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码混杂在一起。\n\n#### 针对接口编程，不要对实现编程\n\n针对接口编程的真正意思是针对超类型（supertype）编程，这样可以在运行时才指定具体实现对象。\n\n#### 为了交互对象之间的松耦合设计而努力\n\n松耦合的设计之所以能让我们建立有弹性的OO系统，能够应付变化，是因为对象之间的互相依赖降到了最低。\n\n\n\n## 24种设计模式\n\n在遵循上面这些面向对象设计原则的基础上，前辈们总结出一些解决不同问题场景的通用设计模式，以四人帮的gof23最为知名。24种设计模式（gol23+1）:\n\n* 创建型模式\n\n1. 简单工厂模式（不包含在gof23中）\n2. 工厂模式   （由子类决定要创建一个具体类是哪一个）\n3. 抽象工厂模式    （允许客户创建对象的家族，而无需指定他们的具体类）\n4. 单例模式    （确保有且只有一个对象被创建）\n5. 原型模式\n6. 创建者模式\n\n* 结构型模式\n\n1. 组合模式   （客户用一致的方式处理对象集合和单个对象）\n2. 装饰者模式  （包装一个对象，以提供新的功能）\n3. 外观模式   （简化一群类的接口）\n4. 适配器模式  （封装对象并提供不同的接口）\n5. 代理模式   （包装对象，以控制对此对象的访问）\n6. 享元模式\n7. 桥接模式\n\n* 行为型模式\n\n1. 观察者模式   （让对象能够在状态改变时被通知）\n2. 策略模式   （封装可以互换的行为，并使用委托来决定要使用哪一个）\n3. 状态模式   （封装了基于状态的行为，并使用委托在行为之间的切换）\n4. 中介模式\n5. 模板模式     （由子类决定如何实现一个算法中的步骤）\n6. 命令模式     （封装请求称为对象）\n7. 备忘录模式\n8. 访问者模式\n9. 解释器模式\n10. 迭代器模式  （在对象的集合之中游走，而不暴露集合的实现）\n11. 职责链模式\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 参考附录\n\n1. [该文章基于Python详细介绍了关于类以及类的相关衍生，在面向对象编程中的实际运用][https://www.jianshu.com/p/26bc163d3259]\n\n2. [该文章基于JACA详细介绍了面向对象编程四大特征的实现原理][https://www.jianshu.com/p/d66dcdbe3594]\n\n","source":"_posts/oop/OOP.md","raw":"---\ntitle: 面向对象编程思想总结\ndate: 2020-11-10 11:50:11\ncategories:\n  - oop\ntags:\n  - oop\n---\n\n[TOC]\n\n\n\n# 面向对象编程思想总结\n\n## 一、面向对象编程思想简介\n\n#### 什么是面向对象？\n\n面向对象是一种编程思想，把具有相同属性和动作的实体抽象成为一个类(集合)、统称。类似于现实世界中对物品、动物等进行分类。这个类的实体具有相同的属性和相同的行为。\n\n#### 什么是面向对象编程？\n\n面向对象编程(Object Oriented Programming)是基于类和对象，在这一基础上进行编程的程序设计思想。程序就是一系列对象的集合，程序负责控制调度这些对象交互从而完成最终任务。\n\n举例：把大象装入冰箱要几步？\n\n面向过程思想：\n\n1. 打开冰箱\n\n2. 装入大象\n\n3. 关闭冰箱\n\n面向对象思想：\n\n设计一个具备装大象功能的对象，让这个对象去完成这个工作。\n\n\n\n其核心是思维的转变：面向对象中，程序员从具体的操作者变成了指挥者。\n\n#### 优缺点如何？\n\n优点：\n\n1. 扩展性强（对象增加减少不影响其他对象运行）\n2. 灵活性高\n3. 可重用性高\n\n缺点：\n\n1. 程序的复杂度提高了\n2. 无法准确预知结果，分析问题的时候也不像面向过程那样简便。\n\n\n\n## 二、四大基本特征\n\n#### 抽象\n\n抽象是提取现实世界中某事物的关键特性，为该事物构建模型的过程。对同一事物中不同的需求下，需要提取的特性可能不一样。得到的抽象模型中一般包含：属性（数据）和操作（行为）。这个抽象模型我们称之为类，通过对类进行实例化得到具体的对象。\n\n\n\n#### 封装\n\n封装可以使类具有独立性和隔离性，从而保证类的高内聚。只暴露给类外部或者子类必须的属性和操作。\n\n\n\n#### 继承\n\n继承是对现有类的一种复用机制。一个类如果继承现有的类，则这个类将拥有被继承类的所有非私有特性（属性和操作）。这里指的继承包含类的继承和接口的实现。常见的继承方法有共有继承、私有继承、多重继承、多层继承。\n\n\n\n#### 多态\n\n多态是在继承的基础上实现的。多态的三个要素：继承、重写和父类引用指向子类的对象。父类引用指向不同的子类对象时，**调用相同的方法，呈现出不同的行为；就是类的多态性**。多态还可分为编译时多态（静态多态性）和运行时多态（动态多态性）。另外类的函数重载、运算符重载，也可算为多态的特性。\n\n\n\n## 三、七大设计原则\n\n在面向对象四大基础特性之上，我们在做面向对象设计时，还需要遵循一些基本设计原则。\n\n- SOLID原则（单一职责原则、开放关闭原则、里氏替换原则、接口隔离原则和依赖倒置原则）；\n- 迪米特法则；\n- 组合优于继承原则（合成复用原则）；\n\n下面是这七大原则的详细描述：\n\n#### 单一责任原则\n\n一个类应该只有一个引起变化的原因。\n\n#### 开放关闭原则\n\n类应该对扩展开放，对修改关闭；我们的目标是允许类容易扩展，在不修改现有代码的情况下，就可搭配新的行为。这样的设计具有弹性可以应对改变，可以接受新的功能来应对改变的需求。\n\n#### 里氏替换原则\n\n所有引用基类的地方必须透明地使用其子类对象。只要有父类出现的地方，都可以用子类来替代。\n\n#### 接口隔离原则\n\n客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。\n\n#### 赖倒置原则\n\n要依赖抽象，不要依赖具体类。\n\n#### 迪米特法则\n\n又叫最少知识原则，只和你的密友谈话。\n\n#### 组合犹于继承原则\n\n多用组合，少用继承；使用组合建立系统具有很大的弹性，不仅可以将算法封装成类，更可以“在运行时动态地改变行为”，只要组合的行为对象符合正确的接口标准即可。\n\n\n\n* 另外还有如下几个常用的原则：\n\n#### 好莱坞原则\n\n别调用（打电话给我们）我们，我们会调用（打电话给）你。\n\n#### 封装变化\n\n找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码混杂在一起。\n\n#### 针对接口编程，不要对实现编程\n\n针对接口编程的真正意思是针对超类型（supertype）编程，这样可以在运行时才指定具体实现对象。\n\n#### 为了交互对象之间的松耦合设计而努力\n\n松耦合的设计之所以能让我们建立有弹性的OO系统，能够应付变化，是因为对象之间的互相依赖降到了最低。\n\n\n\n## 24种设计模式\n\n在遵循上面这些面向对象设计原则的基础上，前辈们总结出一些解决不同问题场景的通用设计模式，以四人帮的gof23最为知名。24种设计模式（gol23+1）:\n\n* 创建型模式\n\n1. 简单工厂模式（不包含在gof23中）\n2. 工厂模式   （由子类决定要创建一个具体类是哪一个）\n3. 抽象工厂模式    （允许客户创建对象的家族，而无需指定他们的具体类）\n4. 单例模式    （确保有且只有一个对象被创建）\n5. 原型模式\n6. 创建者模式\n\n* 结构型模式\n\n1. 组合模式   （客户用一致的方式处理对象集合和单个对象）\n2. 装饰者模式  （包装一个对象，以提供新的功能）\n3. 外观模式   （简化一群类的接口）\n4. 适配器模式  （封装对象并提供不同的接口）\n5. 代理模式   （包装对象，以控制对此对象的访问）\n6. 享元模式\n7. 桥接模式\n\n* 行为型模式\n\n1. 观察者模式   （让对象能够在状态改变时被通知）\n2. 策略模式   （封装可以互换的行为，并使用委托来决定要使用哪一个）\n3. 状态模式   （封装了基于状态的行为，并使用委托在行为之间的切换）\n4. 中介模式\n5. 模板模式     （由子类决定如何实现一个算法中的步骤）\n6. 命令模式     （封装请求称为对象）\n7. 备忘录模式\n8. 访问者模式\n9. 解释器模式\n10. 迭代器模式  （在对象的集合之中游走，而不暴露集合的实现）\n11. 职责链模式\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 参考附录\n\n1. [该文章基于Python详细介绍了关于类以及类的相关衍生，在面向对象编程中的实际运用][https://www.jianshu.com/p/26bc163d3259]\n\n2. [该文章基于JACA详细介绍了面向对象编程四大特征的实现原理][https://www.jianshu.com/p/d66dcdbe3594]\n\n","slug":"oop/OOP","published":1,"updated":"2020-12-31T09:53:40.546Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjcobavo000ehelz0iosc3xr","content":"<p>[TOC]</p>\n\n        <h1 id=\"面向对象编程思想总结\"   >\n          <a href=\"#面向对象编程思想总结\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>面向对象编程思想总结</h1>\n      \n        <h2 id=\"一、面向对象编程思想简介\"   >\n          <a href=\"#一、面向对象编程思想简介\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>一、面向对象编程思想简介</h2>\n      \n        <h4 id=\"什么是面向对象？\"   >\n          <a href=\"#什么是面向对象？\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>什么是面向对象？</h4>\n      <p>面向对象是一种编程思想，把具有相同属性和动作的实体抽象成为一个类(集合)、统称。类似于现实世界中对物品、动物等进行分类。这个类的实体具有相同的属性和相同的行为。</p>\n\n        <h4 id=\"什么是面向对象编程？\"   >\n          <a href=\"#什么是面向对象编程？\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>什么是面向对象编程？</h4>\n      <p>面向对象编程(Object Oriented Programming)是基于类和对象，在这一基础上进行编程的程序设计思想。程序就是一系列对象的集合，程序负责控制调度这些对象交互从而完成最终任务。</p>\n<p>举例：把大象装入冰箱要几步？</p>\n<p>面向过程思想：</p>\n<ol>\n<li><p>打开冰箱</p>\n</li>\n<li><p>装入大象</p>\n</li>\n<li><p>关闭冰箱</p>\n</li>\n</ol>\n<p>面向对象思想：</p>\n<p>设计一个具备装大象功能的对象，让这个对象去完成这个工作。</p>\n<p>其核心是思维的转变：面向对象中，程序员从具体的操作者变成了指挥者。</p>\n\n        <h4 id=\"优缺点如何？\"   >\n          <a href=\"#优缺点如何？\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>优缺点如何？</h4>\n      <p>优点：</p>\n<ol>\n<li>扩展性强（对象增加减少不影响其他对象运行）</li>\n<li>灵活性高</li>\n<li>可重用性高</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>程序的复杂度提高了</li>\n<li>无法准确预知结果，分析问题的时候也不像面向过程那样简便。</li>\n</ol>\n\n        <h2 id=\"二、四大基本特征\"   >\n          <a href=\"#二、四大基本特征\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>二、四大基本特征</h2>\n      \n        <h4 id=\"抽象\"   >\n          <a href=\"#抽象\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>抽象</h4>\n      <p>抽象是提取现实世界中某事物的关键特性，为该事物构建模型的过程。对同一事物中不同的需求下，需要提取的特性可能不一样。得到的抽象模型中一般包含：属性（数据）和操作（行为）。这个抽象模型我们称之为类，通过对类进行实例化得到具体的对象。</p>\n\n        <h4 id=\"封装\"   >\n          <a href=\"#封装\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>封装</h4>\n      <p>封装可以使类具有独立性和隔离性，从而保证类的高内聚。只暴露给类外部或者子类必须的属性和操作。</p>\n\n        <h4 id=\"继承\"   >\n          <a href=\"#继承\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>继承</h4>\n      <p>继承是对现有类的一种复用机制。一个类如果继承现有的类，则这个类将拥有被继承类的所有非私有特性（属性和操作）。这里指的继承包含类的继承和接口的实现。常见的继承方法有共有继承、私有继承、多重继承、多层继承。</p>\n\n        <h4 id=\"多态\"   >\n          <a href=\"#多态\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>多态</h4>\n      <p>多态是在继承的基础上实现的。多态的三个要素：继承、重写和父类引用指向子类的对象。父类引用指向不同的子类对象时，<strong>调用相同的方法，呈现出不同的行为；就是类的多态性</strong>。多态还可分为编译时多态（静态多态性）和运行时多态（动态多态性）。另外类的函数重载、运算符重载，也可算为多态的特性。</p>\n\n        <h2 id=\"三、七大设计原则\"   >\n          <a href=\"#三、七大设计原则\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>三、七大设计原则</h2>\n      <p>在面向对象四大基础特性之上，我们在做面向对象设计时，还需要遵循一些基本设计原则。</p>\n<ul>\n<li>SOLID原则（单一职责原则、开放关闭原则、里氏替换原则、接口隔离原则和依赖倒置原则）；</li>\n<li>迪米特法则；</li>\n<li>组合优于继承原则（合成复用原则）；</li>\n</ul>\n<p>下面是这七大原则的详细描述：</p>\n\n        <h4 id=\"单一责任原则\"   >\n          <a href=\"#单一责任原则\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>单一责任原则</h4>\n      <p>一个类应该只有一个引起变化的原因。</p>\n\n        <h4 id=\"开放关闭原则\"   >\n          <a href=\"#开放关闭原则\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>开放关闭原则</h4>\n      <p>类应该对扩展开放，对修改关闭；我们的目标是允许类容易扩展，在不修改现有代码的情况下，就可搭配新的行为。这样的设计具有弹性可以应对改变，可以接受新的功能来应对改变的需求。</p>\n\n        <h4 id=\"里氏替换原则\"   >\n          <a href=\"#里氏替换原则\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>里氏替换原则</h4>\n      <p>所有引用基类的地方必须透明地使用其子类对象。只要有父类出现的地方，都可以用子类来替代。</p>\n\n        <h4 id=\"接口隔离原则\"   >\n          <a href=\"#接口隔离原则\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>接口隔离原则</h4>\n      <p>客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。</p>\n\n        <h4 id=\"赖倒置原则\"   >\n          <a href=\"#赖倒置原则\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>赖倒置原则</h4>\n      <p>要依赖抽象，不要依赖具体类。</p>\n\n        <h4 id=\"迪米特法则\"   >\n          <a href=\"#迪米特法则\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>迪米特法则</h4>\n      <p>又叫最少知识原则，只和你的密友谈话。</p>\n\n        <h4 id=\"组合犹于继承原则\"   >\n          <a href=\"#组合犹于继承原则\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>组合犹于继承原则</h4>\n      <p>多用组合，少用继承；使用组合建立系统具有很大的弹性，不仅可以将算法封装成类，更可以“在运行时动态地改变行为”，只要组合的行为对象符合正确的接口标准即可。</p>\n<ul>\n<li>另外还有如下几个常用的原则：</li>\n</ul>\n\n        <h4 id=\"好莱坞原则\"   >\n          <a href=\"#好莱坞原则\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>好莱坞原则</h4>\n      <p>别调用（打电话给我们）我们，我们会调用（打电话给）你。</p>\n\n        <h4 id=\"封装变化\"   >\n          <a href=\"#封装变化\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>封装变化</h4>\n      <p>找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码混杂在一起。</p>\n\n        <h4 id=\"针对接口编程，不要对实现编程\"   >\n          <a href=\"#针对接口编程，不要对实现编程\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>针对接口编程，不要对实现编程</h4>\n      <p>针对接口编程的真正意思是针对超类型（supertype）编程，这样可以在运行时才指定具体实现对象。</p>\n\n        <h4 id=\"为了交互对象之间的松耦合设计而努力\"   >\n          <a href=\"#为了交互对象之间的松耦合设计而努力\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>为了交互对象之间的松耦合设计而努力</h4>\n      <p>松耦合的设计之所以能让我们建立有弹性的OO系统，能够应付变化，是因为对象之间的互相依赖降到了最低。</p>\n\n        <h2 id=\"24种设计模式\"   >\n          <a href=\"#24种设计模式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>24种设计模式</h2>\n      <p>在遵循上面这些面向对象设计原则的基础上，前辈们总结出一些解决不同问题场景的通用设计模式，以四人帮的gof23最为知名。24种设计模式（gol23+1）:</p>\n<ul>\n<li>创建型模式</li>\n</ul>\n<ol>\n<li>简单工厂模式（不包含在gof23中）</li>\n<li>工厂模式   （由子类决定要创建一个具体类是哪一个）</li>\n<li>抽象工厂模式    （允许客户创建对象的家族，而无需指定他们的具体类）</li>\n<li>单例模式    （确保有且只有一个对象被创建）</li>\n<li>原型模式</li>\n<li>创建者模式</li>\n</ol>\n<ul>\n<li>结构型模式</li>\n</ul>\n<ol>\n<li>组合模式   （客户用一致的方式处理对象集合和单个对象）</li>\n<li>装饰者模式  （包装一个对象，以提供新的功能）</li>\n<li>外观模式   （简化一群类的接口）</li>\n<li>适配器模式  （封装对象并提供不同的接口）</li>\n<li>代理模式   （包装对象，以控制对此对象的访问）</li>\n<li>享元模式</li>\n<li>桥接模式</li>\n</ol>\n<ul>\n<li>行为型模式</li>\n</ul>\n<ol>\n<li>观察者模式   （让对象能够在状态改变时被通知）</li>\n<li>策略模式   （封装可以互换的行为，并使用委托来决定要使用哪一个）</li>\n<li>状态模式   （封装了基于状态的行为，并使用委托在行为之间的切换）</li>\n<li>中介模式</li>\n<li>模板模式     （由子类决定如何实现一个算法中的步骤）</li>\n<li>命令模式     （封装请求称为对象）</li>\n<li>备忘录模式</li>\n<li>访问者模式</li>\n<li>解释器模式</li>\n<li>迭代器模式  （在对象的集合之中游走，而不暴露集合的实现）</li>\n<li>职责链模式</li>\n</ol>\n\n        <h2 id=\"参考附录\"   >\n          <a href=\"#参考附录\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>参考附录</h2>\n      <ol>\n<li><p>[该文章基于Python详细介绍了关于类以及类的相关衍生，在面向对象编程中的实际运用][<a href=\"https://www.jianshu.com/p/26bc163d3259]\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/26bc163d3259]</a></p>\n</li>\n<li><p>[该文章基于JACA详细介绍了面向对象编程四大特征的实现原理][<a href=\"https://www.jianshu.com/p/d66dcdbe3594]\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/d66dcdbe3594]</a></p>\n</li>\n</ol>\n","site":{"data":{"stun":{"shake_file":true,"index_subtitle":false,"canonical":true,"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu360_site_verification":null,"sougou_site_verification":null,"menu":{"home":"/ || fas fa-home","archives":"/archives/ || fas fa-folder-open","categories":"/categories/ || fas fa-layer-group","tags":"/tags/ || fas fa-tags"},"submenu":null,"menu_settings":{"icon_only":false,"text_only":false},"favicon":{"small":"/images/icons/favicon-16x16.png","medium":"/images/icons/favicon-32x32.png"},"pwa":{"enable":false,"manifest":"/manifest.json","theme_color":"#54bcff"},"night_mode":{"enable":true,"button":{"color":"#fafafa","bg_color":"#8c8a8a"},"icon":{"dark":"🌜","light":"🌞"}},"layout":{"content":"768px","sidebar":"300px","content_sidebar_gap":"30px","main_padding":{"default":"20px","tablet":"15px","mobile":"10px"}},"header":{"enable":true,"show_on":{"post":true},"height":"80%","bg_image":{"enable":true,"url":"/images/header.jpg"},"mask":{"enable":true,"opacity":0.5},"nav":{"height":"50px","bg_color":"#333"},"scroll_down_icon":{"enable":false,"name":"fas fa-angle-down","animation":true}},"body":{"bg_image":{"enable":true,"url":"/images/blogbk.jpg","fixed":true,"repeat":false},"mask":{"enable":false,"opacity":{"default":0.1,"night_mode":0.6}}},"footer":{"bg_image":{"enable":false,"url":null},"mask":{"enable":false,"opacity":0.5},"copyright":{"enable":true,"text":null,"since":null,"end":null},"icon":{"enable":true,"name":"fas fa-heart","animation":false,"color":"#ff0000"},"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":false,"icp":null},"custom":{"enable":false,"text":null}},"creative_commons":{"enable":true,"license":"BY-NC-SA","sidebar":true,"post":true,"language":null},"back2top":{"enable":true,"icon":{"name":"fas fa-rocket","rotate":"-45deg","color":"#49b1f5","hover_color":"#fc6423"}},"sidebar":{"enable":true,"position":"right","offsetTop":"20px","horizon_line":false},"author":{"enable":true,"avatar":{"url":"/images/icons/stun-logo.svg","rounded":false,"opacity":1,"animation":"turn"},"motto":"hello world"},"social":{"github":"https://github.com/ || fab fa-github","google":"https://plus.google.com/ || fab fa-google","twitter":"https://twitter.com/ || fab fa-twitter","youtube":"https://youtube.com/ || fab fa-youtube"},"social_setting":{"enable":false,"icon_only":true},"toc":{"enable":true,"list_number":true,"wrap":true,"expand_all":false,"min_depth":1,"max_depth":6},"feed":{"enable":false,"email":null,"rss":null},"reading_progress":{"enable":true,"color":"#fc6423","height":"1px"},"codeblock":{"style":"default","highlight":"light","word_wrap":false},"heading_line":true,"reward":{"enable":false,"alipay":null,"wechat":null},"post_meta":{"icon_only":false,"created":{"enable":true,"icon":"far fa-calendar-plus"},"updated":{"enable":true,"icon":"far fa-calendar-check"},"reading_time":{"enable":false,"icon":"far fa-clock","speed":{"zh":200,"en":80}},"word_count":{"enable":false,"icon":"far fa-file-word"}},"post_list":{"paginate":{"home":true,"archives":false},"cover_image":{"home":false}},"post_widget":{"tags":true,"end_text":{"enable":true,"horizon_line":true},"share":{"enable":false,"label":"Share to: ","target":"qzone, qq, weibo, wechat, douban, linkedin, facebook, twitter, google"}},"stick_top":{"position":"right","icon":"fas fa-thumbtack","rotate":"45deg","color":"#999"},"gitalk":{"enable":false,"owner":null,"repo":null,"client_id":null,"client_secret":null,"admin":null,"distraction_free_mode":false,"language":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"Just go go","avatar":"mp","meta":"nick,mail,link","pageSize":10,"visitor":false,"recordIP":false,"language":null},"minivaline":{"enable":false,"appId":null,"appKey":null,"placeholder":"Write a Comment","adminEmailMd5":null,"math":true,"md":true,"lang":null},"livere":{"enable":false,"uid":null},"disqus":{"enable":false,"shortname":null,"count":true},"utterances":{"enable":false,"owner":null,"repo":null,"mapping":"title","label":"utterances","theme":"github-light","script_url":"https://utteranc.es/client.js"},"busuanzi":{"enable":false,"icon_only":false,"site_uv":{"enable":true,"icon":"fas fa-user"},"site_pv":{"enable":true,"icon":"fas fa-eye"},"post_pv":{"enable":true,"icon":"fas fa-eye"}},"google_analytics":null,"baidu_analytics":null,"tencent_analytics":null,"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"show_stats":true}},"local_search":{"enable":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"canvas_nest":{"enable":true,"color":"0,0,0","opacity":0.6,"count":200,"zIndex":-1},"math":{"enable":false,"per_page":false,"engine":"katex","mathjax":{"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","mhchem":{"enable":false,"mhchem_js":"https://cdn.jsdelivr.net/npm/mathjax-mhchem@3.3.2/mhchem.min.js"}},"katex":{"cdn":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css","copy_tex":{"enable":true,"copy_tex_js":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.min.js","copy_tex_css":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.css"}}},"fancybox":false,"zoom_image":{"enable":true,"mask_color":"rgba(0,0,0,0.6)","gap_aside":"20px"},"gallery_waterfall":{"enable":false,"col_width":"220px","gap_x":"10px","gap_y":"10px"},"lazyload":{"enable":false,"placeholder":"gif"},"quicklink":{"enable":false,"home":true,"archive":true,"delay":true,"timeout":10000,"priority":true,"ignores":["/\\/api\\/?/","uri => uri.includes('.xml')","uri => uri.includes('.zip')","(uri, el) => el.hasAttribute('nofollow')","(uri, el) => el.hasAttribute('noprefetch')"]},"pjax":{"enable":false,"avoid_banner":false,"elements":null,"selectors":null,"switches":null,"switchesOptions":null,"history":true,"scrollTo":false,"scrollRestoration":false,"cacheBust":false,"debug":false,"currentUrlFullReload":false,"timeout":0},"google_adsense":{"enable":false,"client":null,"js_src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"},"external_link":{"icon":{"enable":true,"name":"fas fa-external-link-alt","color":"#aaa"}},"shortcuts":{"switch_post":{"enable":false}},"tag_cloud":{"start_color":"#a4d8fa","end_color":"#49b1f5","min_size":16,"max_size":26,"max_amount":200},"kill_old_ie":{"enable":false,"warning_url":"https://support.dmeng.net/upgrade-your-browser.html"},"css":"css","js":"js","images":"images","icon":{"search":"fas fa-search","localsearch_empty":"far fa-meh","menu_btn":"fas fa-bars","feed_email":"fas fa-envelope","feed_rss":"fas fa-rss","paginator_prev":"fas fa-angle-left","paginator_next":"fas fa-angle-right","read_more_btn":"fas fa-long-arrow-alt-right","post_tags":"fas fa-tag","copy_btn":"fas fa-copy","prompt_success":"fas fa-check-circle","prompt_info":"fas fa-arrow-circle-right","prompt_warning":"fas fa-exclamation-circle","prompt_error":"fas fa-times-circle","valine_visitor":"fas fa-eye","post_heading":"fas fa-link","notetag_default":"fas fa-arrow-circle-right","notetag_success":"fas fa-check-circle","notetag_info":"fas fa-info-circle","notetag_warning":"fas fa-exclamation-circle","notetag_danger":"fas fa-minus-circle"},"cdn":{"fontawesome":null,"jquery":null,"velocity":null,"velocity_ui":null,"gitalk_js":null,"gitalk_css":null,"gitalk_md5":null,"valine":null,"leancloud_storage":null,"minivaline":null,"busuanzi":null,"instantsearch_js":null,"instantsearch_css":null,"canvas_ribbon":null,"canvas_nest":null,"fancybox_js":null,"fancybox_css":null,"masonry":null,"lazyload":null,"quicklink":null,"pjax":null,"share_js":null,"share_css":null},"rootConfig":{"title":"在下的小书架","subtitle":"对一件事理解的越深，就能做的越好！","description":"","author":"zxr","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"stun","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/qingfengzxr/qingfengzxr.github.io","branch":"master","message":"(Site update {{ now('YYYY-MM-DD HH:mm:ss') }})"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"","more":"<p>[TOC]</p>\n\n        <h1 id=\"面向对象编程思想总结\"   >\n          <a href=\"#面向对象编程思想总结\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>面向对象编程思想总结</h1>\n      \n        <h2 id=\"一、面向对象编程思想简介\"   >\n          <a href=\"#一、面向对象编程思想简介\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>一、面向对象编程思想简介</h2>\n      \n        <h4 id=\"什么是面向对象？\"   >\n          <a href=\"#什么是面向对象？\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>什么是面向对象？</h4>\n      <p>面向对象是一种编程思想，把具有相同属性和动作的实体抽象成为一个类(集合)、统称。类似于现实世界中对物品、动物等进行分类。这个类的实体具有相同的属性和相同的行为。</p>\n\n        <h4 id=\"什么是面向对象编程？\"   >\n          <a href=\"#什么是面向对象编程？\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>什么是面向对象编程？</h4>\n      <p>面向对象编程(Object Oriented Programming)是基于类和对象，在这一基础上进行编程的程序设计思想。程序就是一系列对象的集合，程序负责控制调度这些对象交互从而完成最终任务。</p>\n<p>举例：把大象装入冰箱要几步？</p>\n<p>面向过程思想：</p>\n<ol>\n<li><p>打开冰箱</p>\n</li>\n<li><p>装入大象</p>\n</li>\n<li><p>关闭冰箱</p>\n</li>\n</ol>\n<p>面向对象思想：</p>\n<p>设计一个具备装大象功能的对象，让这个对象去完成这个工作。</p>\n<p>其核心是思维的转变：面向对象中，程序员从具体的操作者变成了指挥者。</p>\n\n        <h4 id=\"优缺点如何？\"   >\n          <a href=\"#优缺点如何？\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>优缺点如何？</h4>\n      <p>优点：</p>\n<ol>\n<li>扩展性强（对象增加减少不影响其他对象运行）</li>\n<li>灵活性高</li>\n<li>可重用性高</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>程序的复杂度提高了</li>\n<li>无法准确预知结果，分析问题的时候也不像面向过程那样简便。</li>\n</ol>\n\n        <h2 id=\"二、四大基本特征\"   >\n          <a href=\"#二、四大基本特征\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>二、四大基本特征</h2>\n      \n        <h4 id=\"抽象\"   >\n          <a href=\"#抽象\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>抽象</h4>\n      <p>抽象是提取现实世界中某事物的关键特性，为该事物构建模型的过程。对同一事物中不同的需求下，需要提取的特性可能不一样。得到的抽象模型中一般包含：属性（数据）和操作（行为）。这个抽象模型我们称之为类，通过对类进行实例化得到具体的对象。</p>\n\n        <h4 id=\"封装\"   >\n          <a href=\"#封装\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>封装</h4>\n      <p>封装可以使类具有独立性和隔离性，从而保证类的高内聚。只暴露给类外部或者子类必须的属性和操作。</p>\n\n        <h4 id=\"继承\"   >\n          <a href=\"#继承\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>继承</h4>\n      <p>继承是对现有类的一种复用机制。一个类如果继承现有的类，则这个类将拥有被继承类的所有非私有特性（属性和操作）。这里指的继承包含类的继承和接口的实现。常见的继承方法有共有继承、私有继承、多重继承、多层继承。</p>\n\n        <h4 id=\"多态\"   >\n          <a href=\"#多态\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>多态</h4>\n      <p>多态是在继承的基础上实现的。多态的三个要素：继承、重写和父类引用指向子类的对象。父类引用指向不同的子类对象时，<strong>调用相同的方法，呈现出不同的行为；就是类的多态性</strong>。多态还可分为编译时多态（静态多态性）和运行时多态（动态多态性）。另外类的函数重载、运算符重载，也可算为多态的特性。</p>\n\n        <h2 id=\"三、七大设计原则\"   >\n          <a href=\"#三、七大设计原则\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>三、七大设计原则</h2>\n      <p>在面向对象四大基础特性之上，我们在做面向对象设计时，还需要遵循一些基本设计原则。</p>\n<ul>\n<li>SOLID原则（单一职责原则、开放关闭原则、里氏替换原则、接口隔离原则和依赖倒置原则）；</li>\n<li>迪米特法则；</li>\n<li>组合优于继承原则（合成复用原则）；</li>\n</ul>\n<p>下面是这七大原则的详细描述：</p>\n\n        <h4 id=\"单一责任原则\"   >\n          <a href=\"#单一责任原则\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>单一责任原则</h4>\n      <p>一个类应该只有一个引起变化的原因。</p>\n\n        <h4 id=\"开放关闭原则\"   >\n          <a href=\"#开放关闭原则\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>开放关闭原则</h4>\n      <p>类应该对扩展开放，对修改关闭；我们的目标是允许类容易扩展，在不修改现有代码的情况下，就可搭配新的行为。这样的设计具有弹性可以应对改变，可以接受新的功能来应对改变的需求。</p>\n\n        <h4 id=\"里氏替换原则\"   >\n          <a href=\"#里氏替换原则\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>里氏替换原则</h4>\n      <p>所有引用基类的地方必须透明地使用其子类对象。只要有父类出现的地方，都可以用子类来替代。</p>\n\n        <h4 id=\"接口隔离原则\"   >\n          <a href=\"#接口隔离原则\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>接口隔离原则</h4>\n      <p>客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。</p>\n\n        <h4 id=\"赖倒置原则\"   >\n          <a href=\"#赖倒置原则\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>赖倒置原则</h4>\n      <p>要依赖抽象，不要依赖具体类。</p>\n\n        <h4 id=\"迪米特法则\"   >\n          <a href=\"#迪米特法则\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>迪米特法则</h4>\n      <p>又叫最少知识原则，只和你的密友谈话。</p>\n\n        <h4 id=\"组合犹于继承原则\"   >\n          <a href=\"#组合犹于继承原则\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>组合犹于继承原则</h4>\n      <p>多用组合，少用继承；使用组合建立系统具有很大的弹性，不仅可以将算法封装成类，更可以“在运行时动态地改变行为”，只要组合的行为对象符合正确的接口标准即可。</p>\n<ul>\n<li>另外还有如下几个常用的原则：</li>\n</ul>\n\n        <h4 id=\"好莱坞原则\"   >\n          <a href=\"#好莱坞原则\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>好莱坞原则</h4>\n      <p>别调用（打电话给我们）我们，我们会调用（打电话给）你。</p>\n\n        <h4 id=\"封装变化\"   >\n          <a href=\"#封装变化\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>封装变化</h4>\n      <p>找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码混杂在一起。</p>\n\n        <h4 id=\"针对接口编程，不要对实现编程\"   >\n          <a href=\"#针对接口编程，不要对实现编程\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>针对接口编程，不要对实现编程</h4>\n      <p>针对接口编程的真正意思是针对超类型（supertype）编程，这样可以在运行时才指定具体实现对象。</p>\n\n        <h4 id=\"为了交互对象之间的松耦合设计而努力\"   >\n          <a href=\"#为了交互对象之间的松耦合设计而努力\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>为了交互对象之间的松耦合设计而努力</h4>\n      <p>松耦合的设计之所以能让我们建立有弹性的OO系统，能够应付变化，是因为对象之间的互相依赖降到了最低。</p>\n\n        <h2 id=\"24种设计模式\"   >\n          <a href=\"#24种设计模式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>24种设计模式</h2>\n      <p>在遵循上面这些面向对象设计原则的基础上，前辈们总结出一些解决不同问题场景的通用设计模式，以四人帮的gof23最为知名。24种设计模式（gol23+1）:</p>\n<ul>\n<li>创建型模式</li>\n</ul>\n<ol>\n<li>简单工厂模式（不包含在gof23中）</li>\n<li>工厂模式   （由子类决定要创建一个具体类是哪一个）</li>\n<li>抽象工厂模式    （允许客户创建对象的家族，而无需指定他们的具体类）</li>\n<li>单例模式    （确保有且只有一个对象被创建）</li>\n<li>原型模式</li>\n<li>创建者模式</li>\n</ol>\n<ul>\n<li>结构型模式</li>\n</ul>\n<ol>\n<li>组合模式   （客户用一致的方式处理对象集合和单个对象）</li>\n<li>装饰者模式  （包装一个对象，以提供新的功能）</li>\n<li>外观模式   （简化一群类的接口）</li>\n<li>适配器模式  （封装对象并提供不同的接口）</li>\n<li>代理模式   （包装对象，以控制对此对象的访问）</li>\n<li>享元模式</li>\n<li>桥接模式</li>\n</ol>\n<ul>\n<li>行为型模式</li>\n</ul>\n<ol>\n<li>观察者模式   （让对象能够在状态改变时被通知）</li>\n<li>策略模式   （封装可以互换的行为，并使用委托来决定要使用哪一个）</li>\n<li>状态模式   （封装了基于状态的行为，并使用委托在行为之间的切换）</li>\n<li>中介模式</li>\n<li>模板模式     （由子类决定如何实现一个算法中的步骤）</li>\n<li>命令模式     （封装请求称为对象）</li>\n<li>备忘录模式</li>\n<li>访问者模式</li>\n<li>解释器模式</li>\n<li>迭代器模式  （在对象的集合之中游走，而不暴露集合的实现）</li>\n<li>职责链模式</li>\n</ol>\n\n        <h2 id=\"参考附录\"   >\n          <a href=\"#参考附录\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>参考附录</h2>\n      <ol>\n<li><p>[该文章基于Python详细介绍了关于类以及类的相关衍生，在面向对象编程中的实际运用][<a href=\"https://www.jianshu.com/p/26bc163d3259]\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/26bc163d3259]</a></p>\n</li>\n<li><p>[该文章基于JACA详细介绍了面向对象编程四大特征的实现原理][<a href=\"https://www.jianshu.com/p/d66dcdbe3594]\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/d66dcdbe3594]</a></p>\n</li>\n</ol>\n"},{"title":"learning_plan","date":"2020-07-21T12:37:32.000Z","_content":"\n# Learning Plan\n\n理想情况下应该是8.9两个月的时间。主要做完以下几件事，完整的使用GO语言进行一些开发，加强对于GO的熟悉度。加固一下对于几个地基的理解，当前来说以计算机网络为重。最后，应该完成对于MIT6.824的学习并实现一个简单的分布式对象存储系统。\n\n| 时间      | 内容                                                         |\n| --------- | ------------------------------------------------------------ |\n| 7.26-7.31 | 过一遍HTTP权威指南，主要是要达到以下几个目的：               |\n|           | 1. 了解 HTTP 当前的应用场景                                  |\n|           | 2. 理解 网关、中继、等网络通信组件的作用                     |\n|           | 3. 能够看懂 HTTP 协议内容的大部分内容，至少一个浏览器接收信息的解包要能看懂 |\n|           |                                                              |\n| 8.1-8.15  | 以《计算机网络自顶向下方法》为主，学习计算机网络相关内容;    |\n|           | 主要目的是了解计算机网络体系的基本组件及设计框架。           |\n| 8.16-8.21 | 对GO语言进行查漏补缺，目前对于GO语言应该是关注以下内容为主： |\n|           | 1. GO语言的包组织的形式及模块管理                            |\n|           | 2. GO语言的多进程编程                                        |\n| 8.22-9.25 | 主要对 MIT6.824  课程进行完整的学习。完成所有的课程实验内容。 |\n| 9.25 - [] | 从这里开始应该对于分布式系统有一定的基础了。应该可以同步进行以下几件事情： |\n|           | 1. 回顾一些重要的数据结构                                    |\n|           | 2. 回顾一些计算机操作系统的知识，如: 内存管理，进程管理      |\n|           | 3. 刷刷题整理简历资料，准备投向我中意的公司                  |\n|           |                                                              |\n\n\n\n","source":"_posts/plan/learning-plan.md","raw":"---\ntitle: learning_plan\ndate: 2020-07-21 20:37:32\ncategories:\n- plan\ntags:\n- learning-plan\n---\n\n# Learning Plan\n\n理想情况下应该是8.9两个月的时间。主要做完以下几件事，完整的使用GO语言进行一些开发，加强对于GO的熟悉度。加固一下对于几个地基的理解，当前来说以计算机网络为重。最后，应该完成对于MIT6.824的学习并实现一个简单的分布式对象存储系统。\n\n| 时间      | 内容                                                         |\n| --------- | ------------------------------------------------------------ |\n| 7.26-7.31 | 过一遍HTTP权威指南，主要是要达到以下几个目的：               |\n|           | 1. 了解 HTTP 当前的应用场景                                  |\n|           | 2. 理解 网关、中继、等网络通信组件的作用                     |\n|           | 3. 能够看懂 HTTP 协议内容的大部分内容，至少一个浏览器接收信息的解包要能看懂 |\n|           |                                                              |\n| 8.1-8.15  | 以《计算机网络自顶向下方法》为主，学习计算机网络相关内容;    |\n|           | 主要目的是了解计算机网络体系的基本组件及设计框架。           |\n| 8.16-8.21 | 对GO语言进行查漏补缺，目前对于GO语言应该是关注以下内容为主： |\n|           | 1. GO语言的包组织的形式及模块管理                            |\n|           | 2. GO语言的多进程编程                                        |\n| 8.22-9.25 | 主要对 MIT6.824  课程进行完整的学习。完成所有的课程实验内容。 |\n| 9.25 - [] | 从这里开始应该对于分布式系统有一定的基础了。应该可以同步进行以下几件事情： |\n|           | 1. 回顾一些重要的数据结构                                    |\n|           | 2. 回顾一些计算机操作系统的知识，如: 内存管理，进程管理      |\n|           | 3. 刷刷题整理简历资料，准备投向我中意的公司                  |\n|           |                                                              |\n\n\n\n","slug":"plan/learning-plan","published":1,"updated":"2020-12-20T09:49:19.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjcobavp000fhelzcf5zey6h","content":"\n        <h1 id=\"Learning-Plan\"   >\n          <a href=\"#Learning-Plan\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>Learning Plan</h1>\n      <p>理想情况下应该是8.9两个月的时间。主要做完以下几件事，完整的使用GO语言进行一些开发，加强对于GO的熟悉度。加固一下对于几个地基的理解，当前来说以计算机网络为重。最后，应该完成对于MIT6.824的学习并实现一个简单的分布式对象存储系统。</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>时间</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>7.26-7.31</td>\n<td>过一遍HTTP权威指南，主要是要达到以下几个目的：</td>\n</tr>\n<tr>\n<td></td>\n<td>1. 了解 HTTP 当前的应用场景</td>\n</tr>\n<tr>\n<td></td>\n<td>2. 理解 网关、中继、等网络通信组件的作用</td>\n</tr>\n<tr>\n<td></td>\n<td>3. 能够看懂 HTTP 协议内容的大部分内容，至少一个浏览器接收信息的解包要能看懂</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>8.1-8.15</td>\n<td>以《计算机网络自顶向下方法》为主，学习计算机网络相关内容;</td>\n</tr>\n<tr>\n<td></td>\n<td>主要目的是了解计算机网络体系的基本组件及设计框架。</td>\n</tr>\n<tr>\n<td>8.16-8.21</td>\n<td>对GO语言进行查漏补缺，目前对于GO语言应该是关注以下内容为主：</td>\n</tr>\n<tr>\n<td></td>\n<td>1. GO语言的包组织的形式及模块管理</td>\n</tr>\n<tr>\n<td></td>\n<td>2. GO语言的多进程编程</td>\n</tr>\n<tr>\n<td>8.22-9.25</td>\n<td>主要对 MIT6.824  课程进行完整的学习。完成所有的课程实验内容。</td>\n</tr>\n<tr>\n<td>9.25 - []</td>\n<td>从这里开始应该对于分布式系统有一定的基础了。应该可以同步进行以下几件事情：</td>\n</tr>\n<tr>\n<td></td>\n<td>1. 回顾一些重要的数据结构</td>\n</tr>\n<tr>\n<td></td>\n<td>2. 回顾一些计算机操作系统的知识，如: 内存管理，进程管理</td>\n</tr>\n<tr>\n<td></td>\n<td>3. 刷刷题整理简历资料，准备投向我中意的公司</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table></div>\n","site":{"data":{"stun":{"shake_file":true,"index_subtitle":false,"canonical":true,"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu360_site_verification":null,"sougou_site_verification":null,"menu":{"home":"/ || fas fa-home","archives":"/archives/ || fas fa-folder-open","categories":"/categories/ || fas fa-layer-group","tags":"/tags/ || fas fa-tags"},"submenu":null,"menu_settings":{"icon_only":false,"text_only":false},"favicon":{"small":"/images/icons/favicon-16x16.png","medium":"/images/icons/favicon-32x32.png"},"pwa":{"enable":false,"manifest":"/manifest.json","theme_color":"#54bcff"},"night_mode":{"enable":true,"button":{"color":"#fafafa","bg_color":"#8c8a8a"},"icon":{"dark":"🌜","light":"🌞"}},"layout":{"content":"768px","sidebar":"300px","content_sidebar_gap":"30px","main_padding":{"default":"20px","tablet":"15px","mobile":"10px"}},"header":{"enable":true,"show_on":{"post":true},"height":"80%","bg_image":{"enable":true,"url":"/images/header.jpg"},"mask":{"enable":true,"opacity":0.5},"nav":{"height":"50px","bg_color":"#333"},"scroll_down_icon":{"enable":false,"name":"fas fa-angle-down","animation":true}},"body":{"bg_image":{"enable":true,"url":"/images/blogbk.jpg","fixed":true,"repeat":false},"mask":{"enable":false,"opacity":{"default":0.1,"night_mode":0.6}}},"footer":{"bg_image":{"enable":false,"url":null},"mask":{"enable":false,"opacity":0.5},"copyright":{"enable":true,"text":null,"since":null,"end":null},"icon":{"enable":true,"name":"fas fa-heart","animation":false,"color":"#ff0000"},"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":false,"icp":null},"custom":{"enable":false,"text":null}},"creative_commons":{"enable":true,"license":"BY-NC-SA","sidebar":true,"post":true,"language":null},"back2top":{"enable":true,"icon":{"name":"fas fa-rocket","rotate":"-45deg","color":"#49b1f5","hover_color":"#fc6423"}},"sidebar":{"enable":true,"position":"right","offsetTop":"20px","horizon_line":false},"author":{"enable":true,"avatar":{"url":"/images/icons/stun-logo.svg","rounded":false,"opacity":1,"animation":"turn"},"motto":"hello world"},"social":{"github":"https://github.com/ || fab fa-github","google":"https://plus.google.com/ || fab fa-google","twitter":"https://twitter.com/ || fab fa-twitter","youtube":"https://youtube.com/ || fab fa-youtube"},"social_setting":{"enable":false,"icon_only":true},"toc":{"enable":true,"list_number":true,"wrap":true,"expand_all":false,"min_depth":1,"max_depth":6},"feed":{"enable":false,"email":null,"rss":null},"reading_progress":{"enable":true,"color":"#fc6423","height":"1px"},"codeblock":{"style":"default","highlight":"light","word_wrap":false},"heading_line":true,"reward":{"enable":false,"alipay":null,"wechat":null},"post_meta":{"icon_only":false,"created":{"enable":true,"icon":"far fa-calendar-plus"},"updated":{"enable":true,"icon":"far fa-calendar-check"},"reading_time":{"enable":false,"icon":"far fa-clock","speed":{"zh":200,"en":80}},"word_count":{"enable":false,"icon":"far fa-file-word"}},"post_list":{"paginate":{"home":true,"archives":false},"cover_image":{"home":false}},"post_widget":{"tags":true,"end_text":{"enable":true,"horizon_line":true},"share":{"enable":false,"label":"Share to: ","target":"qzone, qq, weibo, wechat, douban, linkedin, facebook, twitter, google"}},"stick_top":{"position":"right","icon":"fas fa-thumbtack","rotate":"45deg","color":"#999"},"gitalk":{"enable":false,"owner":null,"repo":null,"client_id":null,"client_secret":null,"admin":null,"distraction_free_mode":false,"language":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"Just go go","avatar":"mp","meta":"nick,mail,link","pageSize":10,"visitor":false,"recordIP":false,"language":null},"minivaline":{"enable":false,"appId":null,"appKey":null,"placeholder":"Write a Comment","adminEmailMd5":null,"math":true,"md":true,"lang":null},"livere":{"enable":false,"uid":null},"disqus":{"enable":false,"shortname":null,"count":true},"utterances":{"enable":false,"owner":null,"repo":null,"mapping":"title","label":"utterances","theme":"github-light","script_url":"https://utteranc.es/client.js"},"busuanzi":{"enable":false,"icon_only":false,"site_uv":{"enable":true,"icon":"fas fa-user"},"site_pv":{"enable":true,"icon":"fas fa-eye"},"post_pv":{"enable":true,"icon":"fas fa-eye"}},"google_analytics":null,"baidu_analytics":null,"tencent_analytics":null,"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"show_stats":true}},"local_search":{"enable":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"canvas_nest":{"enable":true,"color":"0,0,0","opacity":0.6,"count":200,"zIndex":-1},"math":{"enable":false,"per_page":false,"engine":"katex","mathjax":{"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","mhchem":{"enable":false,"mhchem_js":"https://cdn.jsdelivr.net/npm/mathjax-mhchem@3.3.2/mhchem.min.js"}},"katex":{"cdn":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css","copy_tex":{"enable":true,"copy_tex_js":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.min.js","copy_tex_css":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.css"}}},"fancybox":false,"zoom_image":{"enable":true,"mask_color":"rgba(0,0,0,0.6)","gap_aside":"20px"},"gallery_waterfall":{"enable":false,"col_width":"220px","gap_x":"10px","gap_y":"10px"},"lazyload":{"enable":false,"placeholder":"gif"},"quicklink":{"enable":false,"home":true,"archive":true,"delay":true,"timeout":10000,"priority":true,"ignores":["/\\/api\\/?/","uri => uri.includes('.xml')","uri => uri.includes('.zip')","(uri, el) => el.hasAttribute('nofollow')","(uri, el) => el.hasAttribute('noprefetch')"]},"pjax":{"enable":false,"avoid_banner":false,"elements":null,"selectors":null,"switches":null,"switchesOptions":null,"history":true,"scrollTo":false,"scrollRestoration":false,"cacheBust":false,"debug":false,"currentUrlFullReload":false,"timeout":0},"google_adsense":{"enable":false,"client":null,"js_src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"},"external_link":{"icon":{"enable":true,"name":"fas fa-external-link-alt","color":"#aaa"}},"shortcuts":{"switch_post":{"enable":false}},"tag_cloud":{"start_color":"#a4d8fa","end_color":"#49b1f5","min_size":16,"max_size":26,"max_amount":200},"kill_old_ie":{"enable":false,"warning_url":"https://support.dmeng.net/upgrade-your-browser.html"},"css":"css","js":"js","images":"images","icon":{"search":"fas fa-search","localsearch_empty":"far fa-meh","menu_btn":"fas fa-bars","feed_email":"fas fa-envelope","feed_rss":"fas fa-rss","paginator_prev":"fas fa-angle-left","paginator_next":"fas fa-angle-right","read_more_btn":"fas fa-long-arrow-alt-right","post_tags":"fas fa-tag","copy_btn":"fas fa-copy","prompt_success":"fas fa-check-circle","prompt_info":"fas fa-arrow-circle-right","prompt_warning":"fas fa-exclamation-circle","prompt_error":"fas fa-times-circle","valine_visitor":"fas fa-eye","post_heading":"fas fa-link","notetag_default":"fas fa-arrow-circle-right","notetag_success":"fas fa-check-circle","notetag_info":"fas fa-info-circle","notetag_warning":"fas fa-exclamation-circle","notetag_danger":"fas fa-minus-circle"},"cdn":{"fontawesome":null,"jquery":null,"velocity":null,"velocity_ui":null,"gitalk_js":null,"gitalk_css":null,"gitalk_md5":null,"valine":null,"leancloud_storage":null,"minivaline":null,"busuanzi":null,"instantsearch_js":null,"instantsearch_css":null,"canvas_ribbon":null,"canvas_nest":null,"fancybox_js":null,"fancybox_css":null,"masonry":null,"lazyload":null,"quicklink":null,"pjax":null,"share_js":null,"share_css":null},"rootConfig":{"title":"在下的小书架","subtitle":"对一件事理解的越深，就能做的越好！","description":"","author":"zxr","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"stun","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/qingfengzxr/qingfengzxr.github.io","branch":"master","message":"(Site update {{ now('YYYY-MM-DD HH:mm:ss') }})"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"","more":"\n        <h1 id=\"Learning-Plan\"   >\n          <a href=\"#Learning-Plan\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>Learning Plan</h1>\n      <p>理想情况下应该是8.9两个月的时间。主要做完以下几件事，完整的使用GO语言进行一些开发，加强对于GO的熟悉度。加固一下对于几个地基的理解，当前来说以计算机网络为重。最后，应该完成对于MIT6.824的学习并实现一个简单的分布式对象存储系统。</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>时间</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>7.26-7.31</td>\n<td>过一遍HTTP权威指南，主要是要达到以下几个目的：</td>\n</tr>\n<tr>\n<td></td>\n<td>1. 了解 HTTP 当前的应用场景</td>\n</tr>\n<tr>\n<td></td>\n<td>2. 理解 网关、中继、等网络通信组件的作用</td>\n</tr>\n<tr>\n<td></td>\n<td>3. 能够看懂 HTTP 协议内容的大部分内容，至少一个浏览器接收信息的解包要能看懂</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>8.1-8.15</td>\n<td>以《计算机网络自顶向下方法》为主，学习计算机网络相关内容;</td>\n</tr>\n<tr>\n<td></td>\n<td>主要目的是了解计算机网络体系的基本组件及设计框架。</td>\n</tr>\n<tr>\n<td>8.16-8.21</td>\n<td>对GO语言进行查漏补缺，目前对于GO语言应该是关注以下内容为主：</td>\n</tr>\n<tr>\n<td></td>\n<td>1. GO语言的包组织的形式及模块管理</td>\n</tr>\n<tr>\n<td></td>\n<td>2. GO语言的多进程编程</td>\n</tr>\n<tr>\n<td>8.22-9.25</td>\n<td>主要对 MIT6.824  课程进行完整的学习。完成所有的课程实验内容。</td>\n</tr>\n<tr>\n<td>9.25 - []</td>\n<td>从这里开始应该对于分布式系统有一定的基础了。应该可以同步进行以下几件事情：</td>\n</tr>\n<tr>\n<td></td>\n<td>1. 回顾一些重要的数据结构</td>\n</tr>\n<tr>\n<td></td>\n<td>2. 回顾一些计算机操作系统的知识，如: 内存管理，进程管理</td>\n</tr>\n<tr>\n<td></td>\n<td>3. 刷刷题整理简历资料，准备投向我中意的公司</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table></div>\n"},{"title":"广度优先搜索算法详解","date":"2020-07-17T03:56:11.000Z","_content":"\n#### 广度优先搜索算法核心思想\n```\n与广度优先搜索相对应的还有深度优先搜索，二者都是针对图的遍历而言的。\n广度优先搜索的主要思想是：\n\t首先以一个未被访问过的顶点作为起始顶点，访问其所有相邻的顶点，然后对每个相邻的顶点，再访问它们相邻的未被访问过的顶点，直到所有顶点都被访问过，遍历结束。\n```\n\n#### 演示效果\n\n![](https://github.com/qingfengzxr/Learning-Warehouse/blob/master/DataStucture/BreadthFirstSearch/map.gif?raw=true)\n\n\n\n#### 以找迷宫出口类的题目为示例\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"image\"\n\t\"image/color\"\n\t\"image/png\"\n\t\"image/gif\"\n\t\"log\"\n\t\"os\"\n)\n\n/*=================== 队列结构 ==========================*/\ntype note struct{\n\tx \t\tint\n\ty \t\tint \n\tfather  int //父亲在队列中的编号\n\tstep \tint //步数\n}\n\ntype Queue struct{\n\tdata\t[26]note\n\thead\tint\n\ttail\tint\n}\n\nfunc (q *Queue) Put(x int, y int, s int) {\n\tq.data[q.tail].x = x\n\tq.data[q.tail].y = y\n\tq.data[q.tail].step = s\n\tq.tail += 1\n}\n\nfunc (q *Queue) Get() (int,int,int) {\n\tvar x,y,s int\n\tx = q.data[q.head].x\n\ty = q.data[q.head].y\n\ts = q.data[q.head].step\n\tq.head++\n\treturn x,y,s\n}\n\nfunc (q *Queue) IsEmpty() bool{\n\tif q.head ==  q.tail {\n\t\treturn true\n\t}else if q.head > q.tail {\n\t\treturn false\n\t}else if q.head < q.tail {\n\t\treturn false\n\t}\n\treturn false\n}\n\n/*============================ 地图类 ==================================*/\ntype Map struct{\n\tSquareLen\tint\t\t\t//地图格子大小\n\tEntinexty\t[5][4]int\t//地图数据\n\tMapImage *image.Paletted\n}\n\n//绘制地图\nfunc (m *Map) DrawTheMap(){\n\tfor x := 0; x < 4; x++ {\n\t\tfor y := 0; y < 5; y++ {\n\t\t\tif m.Entinexty[y][x] == 1 {\n\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+1) * m.SquareLen,(y+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(m.MapImage,rect,4)\n\t\t\t} else if m.Entinexty[y][x] == 2 {\n\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+1) * m.SquareLen,(y+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(m.MapImage,rect,2)\n\t\t\t} else if m.Entinexty[y][x] == 3 {\n\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+1) * m.SquareLen,(y+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(m.MapImage,rect,1)\n\t\t\t}\n\t\t}\n\t}\n}\n/*============================= end ===================================*/\n\n/*=========================== gif图绘制所需 ============================*/\n//创建调色板\nvar palette = []color.Color{\n\tcolor.RGBA{255,255,255,255},//底板色彩\n\tcolor.RGBA{0,255,0,255},//公主色彩\n\tcolor.RGBA{0,0,255,255},//已通过路径色彩\n\tcolor.RGBA{255,0,0,255},//搜索结束点色彩\n\tcolor.RGBA{177,177,0,255},//障碍物色彩\n\tcolor.RGBA{0,255,255,255},//头部色彩\n}\n\nvar anim = gif.GIF{LoopCount:510}\t//创建gif图像，并设置动画帧数为510\n\nvar forwardImg  [255]Map//前进路径示意图临时存档数组\nvar rollbackImg\t [255]Map//回退路径示意图临时存放数组\nvar forwardCounter int = 0//前进路径示意图计数\nvar rollbackCounter int = 0\t//回退路径示意图计数\n\n\n//矩形绘制\nfunc DrawRectangle(img *image.Paletted,rect image.Rectangle,color uint8){\n\tfor x:= rect.Min.X; x < rect.Max.X; x++ {\n\t\tfor y := rect.Min.Y; y < rect.Max.Y; y++ {\n\t\t\timg.SetColorIndex(x,y,color)\n\t\t}\n\t}\n}\n\n/*============================ end ======================================*/\n\n//全局数据\nvar book[51][51]int\t//已搜索点记录\n\n//行走行为\nvar next = [4][2]int{\n\t{0,1},//向右走\n\t{1,0},//向下走\n\t{0,-1},//向左走\n\t{-1,0},//向上走\n}\n\n//地图内容\nvar MapArr = [5][4]int{\t//0: 可通过；1： 障碍物； 2：骑士； 3：公主\n\t{0,0,1,0,},\n\t{0,0,0,0,},\n\t{0,0,1,0,},\n\t{0,1,3,0,},\n\t{0,0,0,1,},\n}\n\n//广度优先搜索算法实现\nfunc bfs(m *Map,queue *Queue) {\n\n\t//var startx,starty,step,flag int\n\tflag := 0\t//标记是否到达目的地\n\n\tfor ; !queue.IsEmpty(); {\n\t\tstartx,starty,step := queue.Get()\n\t\tfor k := 0; k <= 3; k++ {\n\t\t\tnextx := startx + next[k][0]\n\t\t\tnexty := starty + next[k][1]\n\n\t\t\t/*==== 绘制搜索路线相应存图 =====*/\n\t\t\tforwardImg[forwardCounter].SquareLen = 60\n\t\t\tforwardImg[forwardCounter].MapImage = image.NewPaletted(image.Rect(0, 0, 240, 300),palette)\n\t\t\tforwardImg[forwardCounter].Entinexty = MapArr\t\n\t\t\tforwardImg[forwardCounter].DrawTheMap()\n\n\t\t\tfor _x := 0; _x < 4; _x++ {\n\t\t\t\tfor _y := 0; _y < 5; _y++ {\n\t\t\t\t\tif ( book[_y][_x] == 1 ){\n\t\t\t\t\t\trect := image.Rect(_x * m.SquareLen, _y * m.SquareLen, (_x+1) * m.SquareLen, (_y+1) * m.SquareLen)\n\t\t\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,2)\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t/*=====  end  =====*/\n\n\t\t\tif nextx < 0 || nextx >= 5 || nexty < 0 || nexty >= 4 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif m.Entinexty[nextx][nexty] == 0 && book[nextx][nexty] == 0 {\n\t\t\t\tbook[nextx][nexty] = 1\n\t\t\t\tqueue.Put( nextx, nexty, step+1 )\n\n\n\t\t\t\t/*==== 绘制当前搜索点图像 =====*/\n\t\t\t\trect := image.Rect(nexty * m.SquareLen, nextx*m.SquareLen, (nexty+1) * m.SquareLen, (nextx+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,5)\t\n\t\t\t\tanim.Image = append(anim.Image,forwardImg[forwardCounter].MapImage)\n\t\t\t\tforwardCounter += 1\n\t\t\t\tanim.Delay = append(anim.Delay,60)//加入gif图像,设置帧间间隔60ms\n\t\t\t\t/*===== end =====*/\n\n\t\t\t}\n\n\t\t\tif m.Entinexty[nextx][nexty] == 3 {\n\t\t\t\tflag = 1;\n\n\t\t\t\t/*======= 绘制搜索终点图 =======*/\n\t\t\t\trect := image.Rect(nexty * m.SquareLen, nextx*m.SquareLen, (nexty+1) * m.SquareLen, (nextx+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,3)\t\n\t\t\t\tanim.Image = append(anim.Image,forwardImg[forwardCounter].MapImage)\n\t\t\t\tforwardCounter += 1\n\t\t\t\tanim.Delay = append(anim.Delay,60)//加入gif图像,设置帧间间隔60ms\n\t\t\t\t/*===== end =====*/\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\n\t\tif flag == 1 {\n\t\t\tbreak;\n\t\t}\t\n\t}\n}\n\n\nfunc main(){\n\n\timgfile, _ := os.Create(fmt.Sprintf(\"map.png\"))\n\tgiffile, _ := os.Create(fmt.Sprintf(\"map.gif\"))\n\n\tvar MazeMap Map\n\tvar queue Queue\n\n\tqueue.Put(0,0,1)\t//设置入口点\n\tbook[0][0] = 1\n\n\tMazeMap.Entinexty = MapArr\n\tMazeMap.SquareLen = 60\n\tMazeMap.MapImage = image.NewPaletted(image.Rect(0, 0, 240, 300),palette)\n\tMazeMap.DrawTheMap()\n\n\n\tbfs(&MazeMap,&queue)\n\n\tfmt.Println(queue.Get())\n\n\terr := png.Encode(imgfile, MazeMap.MapImage)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t\tfmt.Printf(\"error is genrate\\n\")\n\t}\n\n\terr = gif.EncodeAll(giffile,&anim)\n    if err != nil {\n        log.Fatal(err)\n    }\n}\n```\n","source":"_posts/DataStucture/BreadthFirstSearch/广度优先搜索算法详解.md","raw":"---\ntitle: 广度优先搜索算法详解\ndate: 2020-07-17 11:56:11\ncategories:\n  - [datastruct, algorithm]\ntags:\n  - algorithm\n---\n\n#### 广度优先搜索算法核心思想\n```\n与广度优先搜索相对应的还有深度优先搜索，二者都是针对图的遍历而言的。\n广度优先搜索的主要思想是：\n\t首先以一个未被访问过的顶点作为起始顶点，访问其所有相邻的顶点，然后对每个相邻的顶点，再访问它们相邻的未被访问过的顶点，直到所有顶点都被访问过，遍历结束。\n```\n\n#### 演示效果\n\n![](https://github.com/qingfengzxr/Learning-Warehouse/blob/master/DataStucture/BreadthFirstSearch/map.gif?raw=true)\n\n\n\n#### 以找迷宫出口类的题目为示例\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"image\"\n\t\"image/color\"\n\t\"image/png\"\n\t\"image/gif\"\n\t\"log\"\n\t\"os\"\n)\n\n/*=================== 队列结构 ==========================*/\ntype note struct{\n\tx \t\tint\n\ty \t\tint \n\tfather  int //父亲在队列中的编号\n\tstep \tint //步数\n}\n\ntype Queue struct{\n\tdata\t[26]note\n\thead\tint\n\ttail\tint\n}\n\nfunc (q *Queue) Put(x int, y int, s int) {\n\tq.data[q.tail].x = x\n\tq.data[q.tail].y = y\n\tq.data[q.tail].step = s\n\tq.tail += 1\n}\n\nfunc (q *Queue) Get() (int,int,int) {\n\tvar x,y,s int\n\tx = q.data[q.head].x\n\ty = q.data[q.head].y\n\ts = q.data[q.head].step\n\tq.head++\n\treturn x,y,s\n}\n\nfunc (q *Queue) IsEmpty() bool{\n\tif q.head ==  q.tail {\n\t\treturn true\n\t}else if q.head > q.tail {\n\t\treturn false\n\t}else if q.head < q.tail {\n\t\treturn false\n\t}\n\treturn false\n}\n\n/*============================ 地图类 ==================================*/\ntype Map struct{\n\tSquareLen\tint\t\t\t//地图格子大小\n\tEntinexty\t[5][4]int\t//地图数据\n\tMapImage *image.Paletted\n}\n\n//绘制地图\nfunc (m *Map) DrawTheMap(){\n\tfor x := 0; x < 4; x++ {\n\t\tfor y := 0; y < 5; y++ {\n\t\t\tif m.Entinexty[y][x] == 1 {\n\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+1) * m.SquareLen,(y+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(m.MapImage,rect,4)\n\t\t\t} else if m.Entinexty[y][x] == 2 {\n\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+1) * m.SquareLen,(y+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(m.MapImage,rect,2)\n\t\t\t} else if m.Entinexty[y][x] == 3 {\n\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+1) * m.SquareLen,(y+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(m.MapImage,rect,1)\n\t\t\t}\n\t\t}\n\t}\n}\n/*============================= end ===================================*/\n\n/*=========================== gif图绘制所需 ============================*/\n//创建调色板\nvar palette = []color.Color{\n\tcolor.RGBA{255,255,255,255},//底板色彩\n\tcolor.RGBA{0,255,0,255},//公主色彩\n\tcolor.RGBA{0,0,255,255},//已通过路径色彩\n\tcolor.RGBA{255,0,0,255},//搜索结束点色彩\n\tcolor.RGBA{177,177,0,255},//障碍物色彩\n\tcolor.RGBA{0,255,255,255},//头部色彩\n}\n\nvar anim = gif.GIF{LoopCount:510}\t//创建gif图像，并设置动画帧数为510\n\nvar forwardImg  [255]Map//前进路径示意图临时存档数组\nvar rollbackImg\t [255]Map//回退路径示意图临时存放数组\nvar forwardCounter int = 0//前进路径示意图计数\nvar rollbackCounter int = 0\t//回退路径示意图计数\n\n\n//矩形绘制\nfunc DrawRectangle(img *image.Paletted,rect image.Rectangle,color uint8){\n\tfor x:= rect.Min.X; x < rect.Max.X; x++ {\n\t\tfor y := rect.Min.Y; y < rect.Max.Y; y++ {\n\t\t\timg.SetColorIndex(x,y,color)\n\t\t}\n\t}\n}\n\n/*============================ end ======================================*/\n\n//全局数据\nvar book[51][51]int\t//已搜索点记录\n\n//行走行为\nvar next = [4][2]int{\n\t{0,1},//向右走\n\t{1,0},//向下走\n\t{0,-1},//向左走\n\t{-1,0},//向上走\n}\n\n//地图内容\nvar MapArr = [5][4]int{\t//0: 可通过；1： 障碍物； 2：骑士； 3：公主\n\t{0,0,1,0,},\n\t{0,0,0,0,},\n\t{0,0,1,0,},\n\t{0,1,3,0,},\n\t{0,0,0,1,},\n}\n\n//广度优先搜索算法实现\nfunc bfs(m *Map,queue *Queue) {\n\n\t//var startx,starty,step,flag int\n\tflag := 0\t//标记是否到达目的地\n\n\tfor ; !queue.IsEmpty(); {\n\t\tstartx,starty,step := queue.Get()\n\t\tfor k := 0; k <= 3; k++ {\n\t\t\tnextx := startx + next[k][0]\n\t\t\tnexty := starty + next[k][1]\n\n\t\t\t/*==== 绘制搜索路线相应存图 =====*/\n\t\t\tforwardImg[forwardCounter].SquareLen = 60\n\t\t\tforwardImg[forwardCounter].MapImage = image.NewPaletted(image.Rect(0, 0, 240, 300),palette)\n\t\t\tforwardImg[forwardCounter].Entinexty = MapArr\t\n\t\t\tforwardImg[forwardCounter].DrawTheMap()\n\n\t\t\tfor _x := 0; _x < 4; _x++ {\n\t\t\t\tfor _y := 0; _y < 5; _y++ {\n\t\t\t\t\tif ( book[_y][_x] == 1 ){\n\t\t\t\t\t\trect := image.Rect(_x * m.SquareLen, _y * m.SquareLen, (_x+1) * m.SquareLen, (_y+1) * m.SquareLen)\n\t\t\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,2)\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t/*=====  end  =====*/\n\n\t\t\tif nextx < 0 || nextx >= 5 || nexty < 0 || nexty >= 4 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif m.Entinexty[nextx][nexty] == 0 && book[nextx][nexty] == 0 {\n\t\t\t\tbook[nextx][nexty] = 1\n\t\t\t\tqueue.Put( nextx, nexty, step+1 )\n\n\n\t\t\t\t/*==== 绘制当前搜索点图像 =====*/\n\t\t\t\trect := image.Rect(nexty * m.SquareLen, nextx*m.SquareLen, (nexty+1) * m.SquareLen, (nextx+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,5)\t\n\t\t\t\tanim.Image = append(anim.Image,forwardImg[forwardCounter].MapImage)\n\t\t\t\tforwardCounter += 1\n\t\t\t\tanim.Delay = append(anim.Delay,60)//加入gif图像,设置帧间间隔60ms\n\t\t\t\t/*===== end =====*/\n\n\t\t\t}\n\n\t\t\tif m.Entinexty[nextx][nexty] == 3 {\n\t\t\t\tflag = 1;\n\n\t\t\t\t/*======= 绘制搜索终点图 =======*/\n\t\t\t\trect := image.Rect(nexty * m.SquareLen, nextx*m.SquareLen, (nexty+1) * m.SquareLen, (nextx+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,3)\t\n\t\t\t\tanim.Image = append(anim.Image,forwardImg[forwardCounter].MapImage)\n\t\t\t\tforwardCounter += 1\n\t\t\t\tanim.Delay = append(anim.Delay,60)//加入gif图像,设置帧间间隔60ms\n\t\t\t\t/*===== end =====*/\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\n\t\tif flag == 1 {\n\t\t\tbreak;\n\t\t}\t\n\t}\n}\n\n\nfunc main(){\n\n\timgfile, _ := os.Create(fmt.Sprintf(\"map.png\"))\n\tgiffile, _ := os.Create(fmt.Sprintf(\"map.gif\"))\n\n\tvar MazeMap Map\n\tvar queue Queue\n\n\tqueue.Put(0,0,1)\t//设置入口点\n\tbook[0][0] = 1\n\n\tMazeMap.Entinexty = MapArr\n\tMazeMap.SquareLen = 60\n\tMazeMap.MapImage = image.NewPaletted(image.Rect(0, 0, 240, 300),palette)\n\tMazeMap.DrawTheMap()\n\n\n\tbfs(&MazeMap,&queue)\n\n\tfmt.Println(queue.Get())\n\n\terr := png.Encode(imgfile, MazeMap.MapImage)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t\tfmt.Printf(\"error is genrate\\n\")\n\t}\n\n\terr = gif.EncodeAll(giffile,&anim)\n    if err != nil {\n        log.Fatal(err)\n    }\n}\n```\n","slug":"DataStucture/BreadthFirstSearch/广度优先搜索算法详解","published":1,"updated":"2020-12-30T12:56:48.141Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjcobbbg0017helzcykx14je","content":"\n        <h4 id=\"广度优先搜索算法核心思想\"   >\n          <a href=\"#广度优先搜索算法核心思想\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>广度优先搜索算法核心思想</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">与广度优先搜索相对应的还有深度优先搜索，二者都是针对图的遍历而言的。</span><br><span class=\"line\">广度优先搜索的主要思想是：</span><br><span class=\"line\">\t首先以一个未被访问过的顶点作为起始顶点，访问其所有相邻的顶点，然后对每个相邻的顶点，再访问它们相邻的未被访问过的顶点，直到所有顶点都被访问过，遍历结束。</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"演示效果\"   >\n          <a href=\"#演示效果\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>演示效果</h4>\n      <p><img   src=\"https://github.com/qingfengzxr/Learning-Warehouse/blob/master/DataStucture/BreadthFirstSearch/map.gif?raw=true\" style=\"\"  alt=\"\"></p>\n\n        <h4 id=\"以找迷宫出口类的题目为示例\"   >\n          <a href=\"#以找迷宫出口类的题目为示例\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>以找迷宫出口类的题目为示例</h4>\n      <figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image/color\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image/png\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image/gif\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*=================== 队列结构 ==========================*/</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> note <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tx \t\t<span class=\"keyword\">int</span></span><br><span class=\"line\">\ty \t\t<span class=\"keyword\">int</span> </span><br><span class=\"line\">\tfather  <span class=\"keyword\">int</span> <span class=\"comment\">//父亲在队列中的编号</span></span><br><span class=\"line\">\tstep \t<span class=\"keyword\">int</span> <span class=\"comment\">//步数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Queue <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tdata\t[<span class=\"number\">26</span>]note</span><br><span class=\"line\">\thead\t<span class=\"keyword\">int</span></span><br><span class=\"line\">\ttail\t<span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(q *Queue)</span> <span class=\"title\">Put</span><span class=\"params\">(x <span class=\"keyword\">int</span>, y <span class=\"keyword\">int</span>, s <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tq.data[q.tail].x = x</span><br><span class=\"line\">\tq.data[q.tail].y = y</span><br><span class=\"line\">\tq.data[q.tail].step = s</span><br><span class=\"line\">\tq.tail += <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(q *Queue)</span> <span class=\"title\">Get</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x,y,s <span class=\"keyword\">int</span></span><br><span class=\"line\">\tx = q.data[q.head].x</span><br><span class=\"line\">\ty = q.data[q.head].y</span><br><span class=\"line\">\ts = q.data[q.head].step</span><br><span class=\"line\">\tq.head++</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x,y,s</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(q *Queue)</span> <span class=\"title\">IsEmpty</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> q.head ==  q.tail &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> q.head &gt; q.tail &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> q.head &lt; q.tail &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*============================ 地图类 ==================================*/</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Map <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tSquareLen\t<span class=\"keyword\">int</span>\t\t\t<span class=\"comment\">//地图格子大小</span></span><br><span class=\"line\">\tEntinexty\t[<span class=\"number\">5</span>][<span class=\"number\">4</span>]<span class=\"keyword\">int</span>\t<span class=\"comment\">//地图数据</span></span><br><span class=\"line\">\tMapImage *image.Paletted</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//绘制地图</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Map)</span> <span class=\"title\">DrawTheMap</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x := <span class=\"number\">0</span>; x &lt; <span class=\"number\">4</span>; x++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> y := <span class=\"number\">0</span>; y &lt; <span class=\"number\">5</span>; y++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> m.Entinexty[y][x] == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+<span class=\"number\">1</span>) * m.SquareLen,(y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(m.MapImage,rect,<span class=\"number\">4</span>)</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> m.Entinexty[y][x] == <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+<span class=\"number\">1</span>) * m.SquareLen,(y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(m.MapImage,rect,<span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> m.Entinexty[y][x] == <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+<span class=\"number\">1</span>) * m.SquareLen,(y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(m.MapImage,rect,<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*============================= end ===================================*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*=========================== gif图绘制所需 ============================*/</span></span><br><span class=\"line\"><span class=\"comment\">//创建调色板</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> palette = []color.Color&#123;</span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//底板色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//公主色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//已通过路径色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//搜索结束点色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">177</span>,<span class=\"number\">177</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//障碍物色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//头部色彩</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> anim = gif.GIF&#123;LoopCount:<span class=\"number\">510</span>&#125;\t<span class=\"comment\">//创建gif图像，并设置动画帧数为510</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> forwardImg  [<span class=\"number\">255</span>]Map<span class=\"comment\">//前进路径示意图临时存档数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rollbackImg\t [<span class=\"number\">255</span>]Map<span class=\"comment\">//回退路径示意图临时存放数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> forwardCounter <span class=\"keyword\">int</span> = <span class=\"number\">0</span><span class=\"comment\">//前进路径示意图计数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rollbackCounter <span class=\"keyword\">int</span> = <span class=\"number\">0</span>\t<span class=\"comment\">//回退路径示意图计数</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//矩形绘制</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DrawRectangle</span><span class=\"params\">(img *image.Paletted,rect image.Rectangle,color <span class=\"keyword\">uint8</span>)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x:= rect.Min.X; x &lt; rect.Max.X; x++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> y := rect.Min.Y; y &lt; rect.Max.Y; y++ &#123;</span><br><span class=\"line\">\t\t\timg.SetColorIndex(x,y,color)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*============================ end ======================================*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//全局数据</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> book[<span class=\"number\">51</span>][<span class=\"number\">51</span>]<span class=\"keyword\">int</span>\t<span class=\"comment\">//已搜索点记录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//行走行为</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> next = [<span class=\"number\">4</span>][<span class=\"number\">2</span>]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;,<span class=\"comment\">//向右走</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,<span class=\"comment\">//向下走</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;,<span class=\"comment\">//向左走</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;,<span class=\"comment\">//向上走</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//地图内容</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> MapArr = [<span class=\"number\">5</span>][<span class=\"number\">4</span>]<span class=\"keyword\">int</span>&#123;\t<span class=\"comment\">//0: 可通过；1： 障碍物； 2：骑士； 3：公主</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//广度优先搜索算法实现</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">bfs</span><span class=\"params\">(m *Map,queue *Queue)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//var startx,starty,step,flag int</span></span><br><span class=\"line\">\tflag := <span class=\"number\">0</span>\t<span class=\"comment\">//标记是否到达目的地</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ; !queue.IsEmpty(); &#123;</span><br><span class=\"line\">\t\tstartx,starty,step := queue.Get()</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> k := <span class=\"number\">0</span>; k &lt;= <span class=\"number\">3</span>; k++ &#123;</span><br><span class=\"line\">\t\t\tnextx := startx + next[k][<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\t\tnexty := starty + next[k][<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*==== 绘制搜索路线相应存图 =====*/</span></span><br><span class=\"line\">\t\t\tforwardImg[forwardCounter].SquareLen = <span class=\"number\">60</span></span><br><span class=\"line\">\t\t\tforwardImg[forwardCounter].MapImage = image.NewPaletted(image.Rect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">240</span>, <span class=\"number\">300</span>),palette)</span><br><span class=\"line\">\t\t\tforwardImg[forwardCounter].Entinexty = MapArr\t</span><br><span class=\"line\">\t\t\tforwardImg[forwardCounter].DrawTheMap()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _x := <span class=\"number\">0</span>; _x &lt; <span class=\"number\">4</span>; _x++ &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> _y := <span class=\"number\">0</span>; _y &lt; <span class=\"number\">5</span>; _y++ &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> ( book[_y][_x] == <span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">\t\t\t\t\t\trect := image.Rect(_x * m.SquareLen, _y * m.SquareLen, (_x+<span class=\"number\">1</span>) * m.SquareLen, (_y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,<span class=\"number\">2</span>)\t</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*=====  end  =====*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> nextx &lt; <span class=\"number\">0</span> || nextx &gt;= <span class=\"number\">5</span> || nexty &lt; <span class=\"number\">0</span> || nexty &gt;= <span class=\"number\">4</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> m.Entinexty[nextx][nexty] == <span class=\"number\">0</span> &amp;&amp; book[nextx][nexty] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\tbook[nextx][nexty] = <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\tqueue.Put( nextx, nexty, step+<span class=\"number\">1</span> )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">/*==== 绘制当前搜索点图像 =====*/</span></span><br><span class=\"line\">\t\t\t\trect := image.Rect(nexty * m.SquareLen, nextx*m.SquareLen, (nexty+<span class=\"number\">1</span>) * m.SquareLen, (nextx+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,<span class=\"number\">5</span>)\t</span><br><span class=\"line\">\t\t\t\tanim.Image = <span class=\"built_in\">append</span>(anim.Image,forwardImg[forwardCounter].MapImage)</span><br><span class=\"line\">\t\t\t\tforwardCounter += <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\tanim.Delay = <span class=\"built_in\">append</span>(anim.Delay,<span class=\"number\">60</span>)<span class=\"comment\">//加入gif图像,设置帧间间隔60ms</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">/*===== end =====*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> m.Entinexty[nextx][nexty] == <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">\t\t\t\tflag = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">/*======= 绘制搜索终点图 =======*/</span></span><br><span class=\"line\">\t\t\t\trect := image.Rect(nexty * m.SquareLen, nextx*m.SquareLen, (nexty+<span class=\"number\">1</span>) * m.SquareLen, (nextx+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,<span class=\"number\">3</span>)\t</span><br><span class=\"line\">\t\t\t\tanim.Image = <span class=\"built_in\">append</span>(anim.Image,forwardImg[forwardCounter].MapImage)</span><br><span class=\"line\">\t\t\t\tforwardCounter += <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\tanim.Delay = <span class=\"built_in\">append</span>(anim.Delay,<span class=\"number\">60</span>)<span class=\"comment\">//加入gif图像,设置帧间间隔60ms</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">/*===== end =====*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> flag == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\timgfile, _ := os.Create(fmt.Sprintf(<span class=\"string\">\"map.png\"</span>))</span><br><span class=\"line\">\tgiffile, _ := os.Create(fmt.Sprintf(<span class=\"string\">\"map.gif\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> MazeMap Map</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> queue Queue</span><br><span class=\"line\"></span><br><span class=\"line\">\tqueue.Put(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>)\t<span class=\"comment\">//设置入口点</span></span><br><span class=\"line\">\tbook[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tMazeMap.Entinexty = MapArr</span><br><span class=\"line\">\tMazeMap.SquareLen = <span class=\"number\">60</span></span><br><span class=\"line\">\tMazeMap.MapImage = image.NewPaletted(image.Rect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">240</span>, <span class=\"number\">300</span>),palette)</span><br><span class=\"line\">\tMazeMap.DrawTheMap()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tbfs(&amp;MazeMap,&amp;queue)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(queue.Get())</span><br><span class=\"line\"></span><br><span class=\"line\">\terr := png.Encode(imgfile, MazeMap.MapImage)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"error is genrate\\n\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = gif.EncodeAll(giffile,&amp;anim)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n","site":{"data":{"stun":{"shake_file":true,"index_subtitle":false,"canonical":true,"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu360_site_verification":null,"sougou_site_verification":null,"menu":{"home":"/ || fas fa-home","archives":"/archives/ || fas fa-folder-open","categories":"/categories/ || fas fa-layer-group","tags":"/tags/ || fas fa-tags"},"submenu":null,"menu_settings":{"icon_only":false,"text_only":false},"favicon":{"small":"/images/icons/favicon-16x16.png","medium":"/images/icons/favicon-32x32.png"},"pwa":{"enable":false,"manifest":"/manifest.json","theme_color":"#54bcff"},"night_mode":{"enable":true,"button":{"color":"#fafafa","bg_color":"#8c8a8a"},"icon":{"dark":"🌜","light":"🌞"}},"layout":{"content":"768px","sidebar":"300px","content_sidebar_gap":"30px","main_padding":{"default":"20px","tablet":"15px","mobile":"10px"}},"header":{"enable":true,"show_on":{"post":true},"height":"80%","bg_image":{"enable":true,"url":"/images/header.jpg"},"mask":{"enable":true,"opacity":0.5},"nav":{"height":"50px","bg_color":"#333"},"scroll_down_icon":{"enable":false,"name":"fas fa-angle-down","animation":true}},"body":{"bg_image":{"enable":true,"url":"/images/blogbk.jpg","fixed":true,"repeat":false},"mask":{"enable":false,"opacity":{"default":0.1,"night_mode":0.6}}},"footer":{"bg_image":{"enable":false,"url":null},"mask":{"enable":false,"opacity":0.5},"copyright":{"enable":true,"text":null,"since":null,"end":null},"icon":{"enable":true,"name":"fas fa-heart","animation":false,"color":"#ff0000"},"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":false,"icp":null},"custom":{"enable":false,"text":null}},"creative_commons":{"enable":true,"license":"BY-NC-SA","sidebar":true,"post":true,"language":null},"back2top":{"enable":true,"icon":{"name":"fas fa-rocket","rotate":"-45deg","color":"#49b1f5","hover_color":"#fc6423"}},"sidebar":{"enable":true,"position":"right","offsetTop":"20px","horizon_line":false},"author":{"enable":true,"avatar":{"url":"/images/icons/stun-logo.svg","rounded":false,"opacity":1,"animation":"turn"},"motto":"hello world"},"social":{"github":"https://github.com/ || fab fa-github","google":"https://plus.google.com/ || fab fa-google","twitter":"https://twitter.com/ || fab fa-twitter","youtube":"https://youtube.com/ || fab fa-youtube"},"social_setting":{"enable":false,"icon_only":true},"toc":{"enable":true,"list_number":true,"wrap":true,"expand_all":false,"min_depth":1,"max_depth":6},"feed":{"enable":false,"email":null,"rss":null},"reading_progress":{"enable":true,"color":"#fc6423","height":"1px"},"codeblock":{"style":"default","highlight":"light","word_wrap":false},"heading_line":true,"reward":{"enable":false,"alipay":null,"wechat":null},"post_meta":{"icon_only":false,"created":{"enable":true,"icon":"far fa-calendar-plus"},"updated":{"enable":true,"icon":"far fa-calendar-check"},"reading_time":{"enable":false,"icon":"far fa-clock","speed":{"zh":200,"en":80}},"word_count":{"enable":false,"icon":"far fa-file-word"}},"post_list":{"paginate":{"home":true,"archives":false},"cover_image":{"home":false}},"post_widget":{"tags":true,"end_text":{"enable":true,"horizon_line":true},"share":{"enable":false,"label":"Share to: ","target":"qzone, qq, weibo, wechat, douban, linkedin, facebook, twitter, google"}},"stick_top":{"position":"right","icon":"fas fa-thumbtack","rotate":"45deg","color":"#999"},"gitalk":{"enable":false,"owner":null,"repo":null,"client_id":null,"client_secret":null,"admin":null,"distraction_free_mode":false,"language":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"Just go go","avatar":"mp","meta":"nick,mail,link","pageSize":10,"visitor":false,"recordIP":false,"language":null},"minivaline":{"enable":false,"appId":null,"appKey":null,"placeholder":"Write a Comment","adminEmailMd5":null,"math":true,"md":true,"lang":null},"livere":{"enable":false,"uid":null},"disqus":{"enable":false,"shortname":null,"count":true},"utterances":{"enable":false,"owner":null,"repo":null,"mapping":"title","label":"utterances","theme":"github-light","script_url":"https://utteranc.es/client.js"},"busuanzi":{"enable":false,"icon_only":false,"site_uv":{"enable":true,"icon":"fas fa-user"},"site_pv":{"enable":true,"icon":"fas fa-eye"},"post_pv":{"enable":true,"icon":"fas fa-eye"}},"google_analytics":null,"baidu_analytics":null,"tencent_analytics":null,"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"show_stats":true}},"local_search":{"enable":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"canvas_nest":{"enable":true,"color":"0,0,0","opacity":0.6,"count":200,"zIndex":-1},"math":{"enable":false,"per_page":false,"engine":"katex","mathjax":{"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","mhchem":{"enable":false,"mhchem_js":"https://cdn.jsdelivr.net/npm/mathjax-mhchem@3.3.2/mhchem.min.js"}},"katex":{"cdn":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css","copy_tex":{"enable":true,"copy_tex_js":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.min.js","copy_tex_css":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.css"}}},"fancybox":false,"zoom_image":{"enable":true,"mask_color":"rgba(0,0,0,0.6)","gap_aside":"20px"},"gallery_waterfall":{"enable":false,"col_width":"220px","gap_x":"10px","gap_y":"10px"},"lazyload":{"enable":false,"placeholder":"gif"},"quicklink":{"enable":false,"home":true,"archive":true,"delay":true,"timeout":10000,"priority":true,"ignores":["/\\/api\\/?/","uri => uri.includes('.xml')","uri => uri.includes('.zip')","(uri, el) => el.hasAttribute('nofollow')","(uri, el) => el.hasAttribute('noprefetch')"]},"pjax":{"enable":false,"avoid_banner":false,"elements":null,"selectors":null,"switches":null,"switchesOptions":null,"history":true,"scrollTo":false,"scrollRestoration":false,"cacheBust":false,"debug":false,"currentUrlFullReload":false,"timeout":0},"google_adsense":{"enable":false,"client":null,"js_src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"},"external_link":{"icon":{"enable":true,"name":"fas fa-external-link-alt","color":"#aaa"}},"shortcuts":{"switch_post":{"enable":false}},"tag_cloud":{"start_color":"#a4d8fa","end_color":"#49b1f5","min_size":16,"max_size":26,"max_amount":200},"kill_old_ie":{"enable":false,"warning_url":"https://support.dmeng.net/upgrade-your-browser.html"},"css":"css","js":"js","images":"images","icon":{"search":"fas fa-search","localsearch_empty":"far fa-meh","menu_btn":"fas fa-bars","feed_email":"fas fa-envelope","feed_rss":"fas fa-rss","paginator_prev":"fas fa-angle-left","paginator_next":"fas fa-angle-right","read_more_btn":"fas fa-long-arrow-alt-right","post_tags":"fas fa-tag","copy_btn":"fas fa-copy","prompt_success":"fas fa-check-circle","prompt_info":"fas fa-arrow-circle-right","prompt_warning":"fas fa-exclamation-circle","prompt_error":"fas fa-times-circle","valine_visitor":"fas fa-eye","post_heading":"fas fa-link","notetag_default":"fas fa-arrow-circle-right","notetag_success":"fas fa-check-circle","notetag_info":"fas fa-info-circle","notetag_warning":"fas fa-exclamation-circle","notetag_danger":"fas fa-minus-circle"},"cdn":{"fontawesome":null,"jquery":null,"velocity":null,"velocity_ui":null,"gitalk_js":null,"gitalk_css":null,"gitalk_md5":null,"valine":null,"leancloud_storage":null,"minivaline":null,"busuanzi":null,"instantsearch_js":null,"instantsearch_css":null,"canvas_ribbon":null,"canvas_nest":null,"fancybox_js":null,"fancybox_css":null,"masonry":null,"lazyload":null,"quicklink":null,"pjax":null,"share_js":null,"share_css":null},"rootConfig":{"title":"在下的小书架","subtitle":"对一件事理解的越深，就能做的越好！","description":"","author":"zxr","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"stun","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/qingfengzxr/qingfengzxr.github.io","branch":"master","message":"(Site update {{ now('YYYY-MM-DD HH:mm:ss') }})"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"","more":"\n        <h4 id=\"广度优先搜索算法核心思想\"   >\n          <a href=\"#广度优先搜索算法核心思想\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>广度优先搜索算法核心思想</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">与广度优先搜索相对应的还有深度优先搜索，二者都是针对图的遍历而言的。</span><br><span class=\"line\">广度优先搜索的主要思想是：</span><br><span class=\"line\">\t首先以一个未被访问过的顶点作为起始顶点，访问其所有相邻的顶点，然后对每个相邻的顶点，再访问它们相邻的未被访问过的顶点，直到所有顶点都被访问过，遍历结束。</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"演示效果\"   >\n          <a href=\"#演示效果\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>演示效果</h4>\n      <p><img   src=\"https://github.com/qingfengzxr/Learning-Warehouse/blob/master/DataStucture/BreadthFirstSearch/map.gif?raw=true\" style=\"\"  alt=\"\"></p>\n\n        <h4 id=\"以找迷宫出口类的题目为示例\"   >\n          <a href=\"#以找迷宫出口类的题目为示例\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>以找迷宫出口类的题目为示例</h4>\n      <figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image/color\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image/png\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image/gif\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*=================== 队列结构 ==========================*/</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> note <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tx \t\t<span class=\"keyword\">int</span></span><br><span class=\"line\">\ty \t\t<span class=\"keyword\">int</span> </span><br><span class=\"line\">\tfather  <span class=\"keyword\">int</span> <span class=\"comment\">//父亲在队列中的编号</span></span><br><span class=\"line\">\tstep \t<span class=\"keyword\">int</span> <span class=\"comment\">//步数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Queue <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tdata\t[<span class=\"number\">26</span>]note</span><br><span class=\"line\">\thead\t<span class=\"keyword\">int</span></span><br><span class=\"line\">\ttail\t<span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(q *Queue)</span> <span class=\"title\">Put</span><span class=\"params\">(x <span class=\"keyword\">int</span>, y <span class=\"keyword\">int</span>, s <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tq.data[q.tail].x = x</span><br><span class=\"line\">\tq.data[q.tail].y = y</span><br><span class=\"line\">\tq.data[q.tail].step = s</span><br><span class=\"line\">\tq.tail += <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(q *Queue)</span> <span class=\"title\">Get</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x,y,s <span class=\"keyword\">int</span></span><br><span class=\"line\">\tx = q.data[q.head].x</span><br><span class=\"line\">\ty = q.data[q.head].y</span><br><span class=\"line\">\ts = q.data[q.head].step</span><br><span class=\"line\">\tq.head++</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x,y,s</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(q *Queue)</span> <span class=\"title\">IsEmpty</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> q.head ==  q.tail &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> q.head &gt; q.tail &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> q.head &lt; q.tail &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*============================ 地图类 ==================================*/</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Map <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tSquareLen\t<span class=\"keyword\">int</span>\t\t\t<span class=\"comment\">//地图格子大小</span></span><br><span class=\"line\">\tEntinexty\t[<span class=\"number\">5</span>][<span class=\"number\">4</span>]<span class=\"keyword\">int</span>\t<span class=\"comment\">//地图数据</span></span><br><span class=\"line\">\tMapImage *image.Paletted</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//绘制地图</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Map)</span> <span class=\"title\">DrawTheMap</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x := <span class=\"number\">0</span>; x &lt; <span class=\"number\">4</span>; x++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> y := <span class=\"number\">0</span>; y &lt; <span class=\"number\">5</span>; y++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> m.Entinexty[y][x] == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+<span class=\"number\">1</span>) * m.SquareLen,(y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(m.MapImage,rect,<span class=\"number\">4</span>)</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> m.Entinexty[y][x] == <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+<span class=\"number\">1</span>) * m.SquareLen,(y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(m.MapImage,rect,<span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> m.Entinexty[y][x] == <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+<span class=\"number\">1</span>) * m.SquareLen,(y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(m.MapImage,rect,<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*============================= end ===================================*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*=========================== gif图绘制所需 ============================*/</span></span><br><span class=\"line\"><span class=\"comment\">//创建调色板</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> palette = []color.Color&#123;</span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//底板色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//公主色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//已通过路径色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//搜索结束点色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">177</span>,<span class=\"number\">177</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//障碍物色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//头部色彩</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> anim = gif.GIF&#123;LoopCount:<span class=\"number\">510</span>&#125;\t<span class=\"comment\">//创建gif图像，并设置动画帧数为510</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> forwardImg  [<span class=\"number\">255</span>]Map<span class=\"comment\">//前进路径示意图临时存档数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rollbackImg\t [<span class=\"number\">255</span>]Map<span class=\"comment\">//回退路径示意图临时存放数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> forwardCounter <span class=\"keyword\">int</span> = <span class=\"number\">0</span><span class=\"comment\">//前进路径示意图计数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rollbackCounter <span class=\"keyword\">int</span> = <span class=\"number\">0</span>\t<span class=\"comment\">//回退路径示意图计数</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//矩形绘制</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DrawRectangle</span><span class=\"params\">(img *image.Paletted,rect image.Rectangle,color <span class=\"keyword\">uint8</span>)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x:= rect.Min.X; x &lt; rect.Max.X; x++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> y := rect.Min.Y; y &lt; rect.Max.Y; y++ &#123;</span><br><span class=\"line\">\t\t\timg.SetColorIndex(x,y,color)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*============================ end ======================================*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//全局数据</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> book[<span class=\"number\">51</span>][<span class=\"number\">51</span>]<span class=\"keyword\">int</span>\t<span class=\"comment\">//已搜索点记录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//行走行为</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> next = [<span class=\"number\">4</span>][<span class=\"number\">2</span>]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;,<span class=\"comment\">//向右走</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,<span class=\"comment\">//向下走</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;,<span class=\"comment\">//向左走</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;,<span class=\"comment\">//向上走</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//地图内容</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> MapArr = [<span class=\"number\">5</span>][<span class=\"number\">4</span>]<span class=\"keyword\">int</span>&#123;\t<span class=\"comment\">//0: 可通过；1： 障碍物； 2：骑士； 3：公主</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//广度优先搜索算法实现</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">bfs</span><span class=\"params\">(m *Map,queue *Queue)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//var startx,starty,step,flag int</span></span><br><span class=\"line\">\tflag := <span class=\"number\">0</span>\t<span class=\"comment\">//标记是否到达目的地</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ; !queue.IsEmpty(); &#123;</span><br><span class=\"line\">\t\tstartx,starty,step := queue.Get()</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> k := <span class=\"number\">0</span>; k &lt;= <span class=\"number\">3</span>; k++ &#123;</span><br><span class=\"line\">\t\t\tnextx := startx + next[k][<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\t\tnexty := starty + next[k][<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*==== 绘制搜索路线相应存图 =====*/</span></span><br><span class=\"line\">\t\t\tforwardImg[forwardCounter].SquareLen = <span class=\"number\">60</span></span><br><span class=\"line\">\t\t\tforwardImg[forwardCounter].MapImage = image.NewPaletted(image.Rect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">240</span>, <span class=\"number\">300</span>),palette)</span><br><span class=\"line\">\t\t\tforwardImg[forwardCounter].Entinexty = MapArr\t</span><br><span class=\"line\">\t\t\tforwardImg[forwardCounter].DrawTheMap()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _x := <span class=\"number\">0</span>; _x &lt; <span class=\"number\">4</span>; _x++ &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> _y := <span class=\"number\">0</span>; _y &lt; <span class=\"number\">5</span>; _y++ &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> ( book[_y][_x] == <span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">\t\t\t\t\t\trect := image.Rect(_x * m.SquareLen, _y * m.SquareLen, (_x+<span class=\"number\">1</span>) * m.SquareLen, (_y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,<span class=\"number\">2</span>)\t</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*=====  end  =====*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> nextx &lt; <span class=\"number\">0</span> || nextx &gt;= <span class=\"number\">5</span> || nexty &lt; <span class=\"number\">0</span> || nexty &gt;= <span class=\"number\">4</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> m.Entinexty[nextx][nexty] == <span class=\"number\">0</span> &amp;&amp; book[nextx][nexty] == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\tbook[nextx][nexty] = <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\tqueue.Put( nextx, nexty, step+<span class=\"number\">1</span> )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">/*==== 绘制当前搜索点图像 =====*/</span></span><br><span class=\"line\">\t\t\t\trect := image.Rect(nexty * m.SquareLen, nextx*m.SquareLen, (nexty+<span class=\"number\">1</span>) * m.SquareLen, (nextx+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,<span class=\"number\">5</span>)\t</span><br><span class=\"line\">\t\t\t\tanim.Image = <span class=\"built_in\">append</span>(anim.Image,forwardImg[forwardCounter].MapImage)</span><br><span class=\"line\">\t\t\t\tforwardCounter += <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\tanim.Delay = <span class=\"built_in\">append</span>(anim.Delay,<span class=\"number\">60</span>)<span class=\"comment\">//加入gif图像,设置帧间间隔60ms</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">/*===== end =====*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> m.Entinexty[nextx][nexty] == <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">\t\t\t\tflag = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">/*======= 绘制搜索终点图 =======*/</span></span><br><span class=\"line\">\t\t\t\trect := image.Rect(nexty * m.SquareLen, nextx*m.SquareLen, (nexty+<span class=\"number\">1</span>) * m.SquareLen, (nextx+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,<span class=\"number\">3</span>)\t</span><br><span class=\"line\">\t\t\t\tanim.Image = <span class=\"built_in\">append</span>(anim.Image,forwardImg[forwardCounter].MapImage)</span><br><span class=\"line\">\t\t\t\tforwardCounter += <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\tanim.Delay = <span class=\"built_in\">append</span>(anim.Delay,<span class=\"number\">60</span>)<span class=\"comment\">//加入gif图像,设置帧间间隔60ms</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">/*===== end =====*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> flag == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\timgfile, _ := os.Create(fmt.Sprintf(<span class=\"string\">\"map.png\"</span>))</span><br><span class=\"line\">\tgiffile, _ := os.Create(fmt.Sprintf(<span class=\"string\">\"map.gif\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> MazeMap Map</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> queue Queue</span><br><span class=\"line\"></span><br><span class=\"line\">\tqueue.Put(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>)\t<span class=\"comment\">//设置入口点</span></span><br><span class=\"line\">\tbook[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tMazeMap.Entinexty = MapArr</span><br><span class=\"line\">\tMazeMap.SquareLen = <span class=\"number\">60</span></span><br><span class=\"line\">\tMazeMap.MapImage = image.NewPaletted(image.Rect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">240</span>, <span class=\"number\">300</span>),palette)</span><br><span class=\"line\">\tMazeMap.DrawTheMap()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tbfs(&amp;MazeMap,&amp;queue)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(queue.Get())</span><br><span class=\"line\"></span><br><span class=\"line\">\terr := png.Encode(imgfile, MazeMap.MapImage)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"error is genrate\\n\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = gif.EncodeAll(giffile,&amp;anim)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n"},{"title":"深度优先搜索算法详解","date":"2020-07-17T03:56:11.000Z","_content":"\n#### 深度优先搜索算法核心思想\n```\n深度优先搜索算法与广度优先搜索算法相对，二者都是针对图的遍历而言的。\n深度优先搜索算法的核心思想：\n\t首先以一个未被访问过的顶点作为起始顶点，沿当前顶点的边走到未访问过的顶点;当没有未访问过的顶点时，则回到上一个顶点，继续试探访问别的顶点，直到所有的顶点都被访问过。\n\t其特点是总是沿着图的某一分支遍历直到末端，然后回溯，再沿着另一条进行同样的遍历，直到所有顶点都被访问过。其回溯的特点十分贴合递归思想。\n```\n\n#### 演示动图\n\n![](https://github.com/qingfengzxr/Learning-Warehouse/blob/master/DataStucture/DepthFistSearch/map.gif?raw=true)\n\n\n\n#### 深度优先搜索算法示例\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"image\"\n\t\"image/color\"\n\t\"image/png\"\n\t\"image/gif\"\n\t\"log\"\n\t\"os\"\n)\n\n\n/*================================== 地图类 ==============================*/\ntype Map struct{\n\tSquareLen\tint\t\t\t//地图格子大小\n\tEntinexty\t[5][4]int\t//地图数据\n\tMapImage *image.Paletted\n}\n\n//绘制地图\nfunc (m *Map) DrawTheMap(){\n\tfor x := 0; x < 4; x++ {\n\t\tfor y := 0; y < 5; y++ {\n\t\t\tif m.Entinexty[y][x] == 1 {\n\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+1) * m.SquareLen,(y+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(m.MapImage,rect,4)\n\t\t\t} else if m.Entinexty[y][x] == 2 {\n\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+1) * m.SquareLen,(y+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(m.MapImage,rect,2)\n\t\t\t} else if m.Entinexty[y][x] == 3 {\n\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+1) * m.SquareLen,(y+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(m.MapImage,rect,1)\n\t\t\t}\n\t\t}\n\t}\n}\n/*============================= end =======================================*/\n\n/*=========================== gif图绘制所需 ============================*/\n//创建调色板\nvar palette = []color.Color{\n\tcolor.RGBA{255,255,255,255},//底板色彩\n\tcolor.RGBA{0,255,0,255},//公主色彩\n\tcolor.RGBA{0,0,255,255},//已通过路径色彩\n\tcolor.RGBA{255,0,0,255},//回退点色彩\n\tcolor.RGBA{177,177,0,255},//障碍物色彩\n\tcolor.RGBA{0,255,255,255},//头部色彩\n}\n\nvar anim = gif.GIF{LoopCount:510}\t//创建gif图像，并设置动画帧数为510\n\nvar forwardImg  [255]Map//前进路径示意图临时存档数组\nvar rollbackImg\t [255]Map//回退路径示意图临时存放数组\nvar forwardCounter int = 0//前进路径示意图计数\nvar rollbackCounter int = 0\t//回退路径示意图计数\n\n\n//矩形绘制\nfunc DrawRectangle(img *image.Paletted,rect image.Rectangle,color uint8){\n\tfor x:= rect.Min.X; x < rect.Max.X; x++ {\n\t\tfor y := rect.Min.Y; y < rect.Max.Y; y++ {\n\t\t\timg.SetColorIndex(x,y,color)\n\t\t}\n\t}\n}\n\n/*============================ end ======================================*/\n\n\n/*========================= 骑士救公主 ^v^ ===============================*/\n//地图内容\nvar MapArr = [5][4]int{\t//0: 可通过；1： 障碍物； 2：骑士； 3：公主\n\t{0,0,1,0,},\n\t{0,0,0,0,},\n\t{0,0,1,0,},\n\t{0,1,3,0,},\n\t{0,0,0,1,},\n}\n\n//行走行为\nvar next = [4][2]int{\n\t{0,1},//向右走\n\t{1,0},//向下走\n\t{0,-1},//向左走\n\t{-1,0},//向上走\n}\n\n// 深度优先搜索算法实现\nvar min int = 99999\t\t//最短路径\nvar book [5][4]int\t\t//已行进坐标记录\n\nfunc dfs(m *Map , x int, y int, step int, counter int) {\n\tvar nextx,nexty int \n\t\n\tif m.Entinexty[x][y] == 3 {\n\t\tif step < min {\n\t\t\tmin = step\n\t\t} \n\t\treturn \n\t}\n\n\t//枚举4种走法\n\tfor k := 0; k <= 3; k++ {\n\t\tnextx = x+next[k][0]\n\t\tnexty = y+next[k][1]\n\t\tif nextx < 0 || nextx >= 5 || nexty < 0 || nexty >= 4 {\t//越界\n\t\t\tcontinue\n\t\t}\n\t\t\n\t\t/*==== 分别为前进、后退绘制相应存图 =====*/\n\t\tforwardImg[forwardCounter].SquareLen = 60\n\t\tforwardImg[forwardCounter].MapImage = image.NewPaletted(image.Rect(0, 0, 240, 300),palette)\n\t\tforwardImg[forwardCounter].Entinexty = MapArr\t\n\t\tforwardImg[forwardCounter].DrawTheMap()\n\n\t\trollbackImg[forwardCounter].SquareLen = 60\n\t\trollbackImg[forwardCounter].MapImage = image.NewPaletted(image.Rect(0, 0, 240, 300),palette)\n\t\trollbackImg[forwardCounter].Entinexty = MapArr\t\n\t\trollbackImg[forwardCounter].DrawTheMap()\n\n\n\t\tfor _x := 0; _x < 4; _x++ {\n\t\t\tfor _y := 0; _y < 5; _y++ {\n\t\t\t\tif ( book[_y][_x] == 1 ){\n\t\t\t\t\trect := image.Rect(_x * m.SquareLen, _y * m.SquareLen, (_x+1) * m.SquareLen, (_y+1) * m.SquareLen)\n\t\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,2)\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/*=====  end  =====*/\n\n\t\tif m.Entinexty[nextx][nexty] == 0 && book[nextx][nexty] == 0 || \n\t\t\t\t\t\t\t\t\tm.Entinexty[nextx][nexty] == 3 {\n\t\t\tbook[nextx][nexty] = 1\t//记录当前路径\n\n\t\t\t/*==== 绘制前进图像 =====*/\n\t\t\trect := image.Rect(nexty * m.SquareLen, nextx*m.SquareLen, (nexty+1) * m.SquareLen, (nextx+1) * m.SquareLen)\n\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,5)\t\n\t\t\tanim.Image = append(anim.Image,forwardImg[forwardCounter].MapImage)\n\t\t\tforwardCounter += 1\n\t\t\tanim.Delay = append(anim.Delay,60)//加入gif图像,设置帧间间隔60ms\n\t\t\t/*===== end =====*/\n\n\t\t\tdfs(m,nextx,nexty,step+1,forwardCounter)\n\t\t\t\n\t\t\t/*======= 绘制回退图像 =======*/\n\t\t\tfor _x := 0; _x < 4; _x++ {\n\t\t\t\tfor _y := 0; _y < 5; _y++ {\n\t\t\t\t\tif ( book[_y][_x] == 1 ){\n\t\t\t\t\t\trect := image.Rect(_x * m.SquareLen, _y * m.SquareLen, (_x+1) * m.SquareLen, (_y+1) * m.SquareLen)\n\t\t\t\t\t\tDrawRectangle(rollbackImg[rollbackCounter].MapImage,rect,2)\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\trect2 := image.Rect(nexty * m.SquareLen, nextx * m.SquareLen, (nexty+1) * m.SquareLen, (nextx+1) * m.SquareLen)\n\t\t\tDrawRectangle(rollbackImg[rollbackCounter].MapImage,rect2,3)\n\t\t\tanim.Image = append(anim.Image,rollbackImg[rollbackCounter].MapImage)\n\t\t\trollbackCounter += 1;\n\t\t\tanim.Delay = append(anim.Delay,60)//加入gif图像,设置帧间间隔60ms\n\t\t\t/*===== end =======*/\n\n\t\t\tbook[nextx][nexty] = 0\t//回退路径\n\t\t}\n\t}\n\treturn \n}\n\nfunc main(){\n\timgfile, _ := os.Create(fmt.Sprintf(\"map.png\"))\n\tgiffile, _ := os.Create(fmt.Sprintf(\"map.gif\"))\n\n\tvar MazeMap Map\n\t//初始化地图数据\n\tMazeMap.Entinexty = MapArr\n\tMazeMap.SquareLen = 60\n\tMazeMap.MapImage = image.NewPaletted(image.Rect(0, 0, 240, 300),palette)\n\tMazeMap.DrawTheMap()\n\n\n\tbook[0][0] = 1\n\tdfs(&MazeMap,0,0,0,forwardCounter)\n\tfmt.Println(min)\n\n\terr := png.Encode(imgfile, MazeMap.MapImage)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t\tfmt.Printf(\"error is genrate\\n\")\n\t}\n\n\terr = gif.EncodeAll(giffile,&anim)\n    if err != nil {\n        log.Fatal(err)\n    }\n}\n```\n\n","source":"_posts/DataStucture/DepthFistSearch/深度优先搜索算法详解.md","raw":"---\ntitle: 深度优先搜索算法详解\ndate: 2020-07-17 11:56:11\ncategories:\n  - [datastruct, algorithm]\ntags:\n  - algorithm\n---\n\n#### 深度优先搜索算法核心思想\n```\n深度优先搜索算法与广度优先搜索算法相对，二者都是针对图的遍历而言的。\n深度优先搜索算法的核心思想：\n\t首先以一个未被访问过的顶点作为起始顶点，沿当前顶点的边走到未访问过的顶点;当没有未访问过的顶点时，则回到上一个顶点，继续试探访问别的顶点，直到所有的顶点都被访问过。\n\t其特点是总是沿着图的某一分支遍历直到末端，然后回溯，再沿着另一条进行同样的遍历，直到所有顶点都被访问过。其回溯的特点十分贴合递归思想。\n```\n\n#### 演示动图\n\n![](https://github.com/qingfengzxr/Learning-Warehouse/blob/master/DataStucture/DepthFistSearch/map.gif?raw=true)\n\n\n\n#### 深度优先搜索算法示例\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"image\"\n\t\"image/color\"\n\t\"image/png\"\n\t\"image/gif\"\n\t\"log\"\n\t\"os\"\n)\n\n\n/*================================== 地图类 ==============================*/\ntype Map struct{\n\tSquareLen\tint\t\t\t//地图格子大小\n\tEntinexty\t[5][4]int\t//地图数据\n\tMapImage *image.Paletted\n}\n\n//绘制地图\nfunc (m *Map) DrawTheMap(){\n\tfor x := 0; x < 4; x++ {\n\t\tfor y := 0; y < 5; y++ {\n\t\t\tif m.Entinexty[y][x] == 1 {\n\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+1) * m.SquareLen,(y+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(m.MapImage,rect,4)\n\t\t\t} else if m.Entinexty[y][x] == 2 {\n\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+1) * m.SquareLen,(y+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(m.MapImage,rect,2)\n\t\t\t} else if m.Entinexty[y][x] == 3 {\n\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+1) * m.SquareLen,(y+1) * m.SquareLen)\n\t\t\t\tDrawRectangle(m.MapImage,rect,1)\n\t\t\t}\n\t\t}\n\t}\n}\n/*============================= end =======================================*/\n\n/*=========================== gif图绘制所需 ============================*/\n//创建调色板\nvar palette = []color.Color{\n\tcolor.RGBA{255,255,255,255},//底板色彩\n\tcolor.RGBA{0,255,0,255},//公主色彩\n\tcolor.RGBA{0,0,255,255},//已通过路径色彩\n\tcolor.RGBA{255,0,0,255},//回退点色彩\n\tcolor.RGBA{177,177,0,255},//障碍物色彩\n\tcolor.RGBA{0,255,255,255},//头部色彩\n}\n\nvar anim = gif.GIF{LoopCount:510}\t//创建gif图像，并设置动画帧数为510\n\nvar forwardImg  [255]Map//前进路径示意图临时存档数组\nvar rollbackImg\t [255]Map//回退路径示意图临时存放数组\nvar forwardCounter int = 0//前进路径示意图计数\nvar rollbackCounter int = 0\t//回退路径示意图计数\n\n\n//矩形绘制\nfunc DrawRectangle(img *image.Paletted,rect image.Rectangle,color uint8){\n\tfor x:= rect.Min.X; x < rect.Max.X; x++ {\n\t\tfor y := rect.Min.Y; y < rect.Max.Y; y++ {\n\t\t\timg.SetColorIndex(x,y,color)\n\t\t}\n\t}\n}\n\n/*============================ end ======================================*/\n\n\n/*========================= 骑士救公主 ^v^ ===============================*/\n//地图内容\nvar MapArr = [5][4]int{\t//0: 可通过；1： 障碍物； 2：骑士； 3：公主\n\t{0,0,1,0,},\n\t{0,0,0,0,},\n\t{0,0,1,0,},\n\t{0,1,3,0,},\n\t{0,0,0,1,},\n}\n\n//行走行为\nvar next = [4][2]int{\n\t{0,1},//向右走\n\t{1,0},//向下走\n\t{0,-1},//向左走\n\t{-1,0},//向上走\n}\n\n// 深度优先搜索算法实现\nvar min int = 99999\t\t//最短路径\nvar book [5][4]int\t\t//已行进坐标记录\n\nfunc dfs(m *Map , x int, y int, step int, counter int) {\n\tvar nextx,nexty int \n\t\n\tif m.Entinexty[x][y] == 3 {\n\t\tif step < min {\n\t\t\tmin = step\n\t\t} \n\t\treturn \n\t}\n\n\t//枚举4种走法\n\tfor k := 0; k <= 3; k++ {\n\t\tnextx = x+next[k][0]\n\t\tnexty = y+next[k][1]\n\t\tif nextx < 0 || nextx >= 5 || nexty < 0 || nexty >= 4 {\t//越界\n\t\t\tcontinue\n\t\t}\n\t\t\n\t\t/*==== 分别为前进、后退绘制相应存图 =====*/\n\t\tforwardImg[forwardCounter].SquareLen = 60\n\t\tforwardImg[forwardCounter].MapImage = image.NewPaletted(image.Rect(0, 0, 240, 300),palette)\n\t\tforwardImg[forwardCounter].Entinexty = MapArr\t\n\t\tforwardImg[forwardCounter].DrawTheMap()\n\n\t\trollbackImg[forwardCounter].SquareLen = 60\n\t\trollbackImg[forwardCounter].MapImage = image.NewPaletted(image.Rect(0, 0, 240, 300),palette)\n\t\trollbackImg[forwardCounter].Entinexty = MapArr\t\n\t\trollbackImg[forwardCounter].DrawTheMap()\n\n\n\t\tfor _x := 0; _x < 4; _x++ {\n\t\t\tfor _y := 0; _y < 5; _y++ {\n\t\t\t\tif ( book[_y][_x] == 1 ){\n\t\t\t\t\trect := image.Rect(_x * m.SquareLen, _y * m.SquareLen, (_x+1) * m.SquareLen, (_y+1) * m.SquareLen)\n\t\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,2)\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/*=====  end  =====*/\n\n\t\tif m.Entinexty[nextx][nexty] == 0 && book[nextx][nexty] == 0 || \n\t\t\t\t\t\t\t\t\tm.Entinexty[nextx][nexty] == 3 {\n\t\t\tbook[nextx][nexty] = 1\t//记录当前路径\n\n\t\t\t/*==== 绘制前进图像 =====*/\n\t\t\trect := image.Rect(nexty * m.SquareLen, nextx*m.SquareLen, (nexty+1) * m.SquareLen, (nextx+1) * m.SquareLen)\n\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,5)\t\n\t\t\tanim.Image = append(anim.Image,forwardImg[forwardCounter].MapImage)\n\t\t\tforwardCounter += 1\n\t\t\tanim.Delay = append(anim.Delay,60)//加入gif图像,设置帧间间隔60ms\n\t\t\t/*===== end =====*/\n\n\t\t\tdfs(m,nextx,nexty,step+1,forwardCounter)\n\t\t\t\n\t\t\t/*======= 绘制回退图像 =======*/\n\t\t\tfor _x := 0; _x < 4; _x++ {\n\t\t\t\tfor _y := 0; _y < 5; _y++ {\n\t\t\t\t\tif ( book[_y][_x] == 1 ){\n\t\t\t\t\t\trect := image.Rect(_x * m.SquareLen, _y * m.SquareLen, (_x+1) * m.SquareLen, (_y+1) * m.SquareLen)\n\t\t\t\t\t\tDrawRectangle(rollbackImg[rollbackCounter].MapImage,rect,2)\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\trect2 := image.Rect(nexty * m.SquareLen, nextx * m.SquareLen, (nexty+1) * m.SquareLen, (nextx+1) * m.SquareLen)\n\t\t\tDrawRectangle(rollbackImg[rollbackCounter].MapImage,rect2,3)\n\t\t\tanim.Image = append(anim.Image,rollbackImg[rollbackCounter].MapImage)\n\t\t\trollbackCounter += 1;\n\t\t\tanim.Delay = append(anim.Delay,60)//加入gif图像,设置帧间间隔60ms\n\t\t\t/*===== end =======*/\n\n\t\t\tbook[nextx][nexty] = 0\t//回退路径\n\t\t}\n\t}\n\treturn \n}\n\nfunc main(){\n\timgfile, _ := os.Create(fmt.Sprintf(\"map.png\"))\n\tgiffile, _ := os.Create(fmt.Sprintf(\"map.gif\"))\n\n\tvar MazeMap Map\n\t//初始化地图数据\n\tMazeMap.Entinexty = MapArr\n\tMazeMap.SquareLen = 60\n\tMazeMap.MapImage = image.NewPaletted(image.Rect(0, 0, 240, 300),palette)\n\tMazeMap.DrawTheMap()\n\n\n\tbook[0][0] = 1\n\tdfs(&MazeMap,0,0,0,forwardCounter)\n\tfmt.Println(min)\n\n\terr := png.Encode(imgfile, MazeMap.MapImage)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t\tfmt.Printf(\"error is genrate\\n\")\n\t}\n\n\terr = gif.EncodeAll(giffile,&anim)\n    if err != nil {\n        log.Fatal(err)\n    }\n}\n```\n\n","slug":"DataStucture/DepthFistSearch/深度优先搜索算法详解","published":1,"updated":"2020-12-30T12:52:36.563Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjcobbbi0018helz34h358ho","content":"\n        <h4 id=\"深度优先搜索算法核心思想\"   >\n          <a href=\"#深度优先搜索算法核心思想\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>深度优先搜索算法核心思想</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">深度优先搜索算法与广度优先搜索算法相对，二者都是针对图的遍历而言的。</span><br><span class=\"line\">深度优先搜索算法的核心思想：</span><br><span class=\"line\">\t首先以一个未被访问过的顶点作为起始顶点，沿当前顶点的边走到未访问过的顶点;当没有未访问过的顶点时，则回到上一个顶点，继续试探访问别的顶点，直到所有的顶点都被访问过。</span><br><span class=\"line\">\t其特点是总是沿着图的某一分支遍历直到末端，然后回溯，再沿着另一条进行同样的遍历，直到所有顶点都被访问过。其回溯的特点十分贴合递归思想。</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"演示动图\"   >\n          <a href=\"#演示动图\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>演示动图</h4>\n      <p><img   src=\"https://github.com/qingfengzxr/Learning-Warehouse/blob/master/DataStucture/DepthFistSearch/map.gif?raw=true\" style=\"\"  alt=\"\"></p>\n\n        <h4 id=\"深度优先搜索算法示例\"   >\n          <a href=\"#深度优先搜索算法示例\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>深度优先搜索算法示例</h4>\n      <figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image/color\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image/png\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image/gif\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*================================== 地图类 ==============================*/</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Map <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tSquareLen\t<span class=\"keyword\">int</span>\t\t\t<span class=\"comment\">//地图格子大小</span></span><br><span class=\"line\">\tEntinexty\t[<span class=\"number\">5</span>][<span class=\"number\">4</span>]<span class=\"keyword\">int</span>\t<span class=\"comment\">//地图数据</span></span><br><span class=\"line\">\tMapImage *image.Paletted</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//绘制地图</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Map)</span> <span class=\"title\">DrawTheMap</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x := <span class=\"number\">0</span>; x &lt; <span class=\"number\">4</span>; x++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> y := <span class=\"number\">0</span>; y &lt; <span class=\"number\">5</span>; y++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> m.Entinexty[y][x] == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+<span class=\"number\">1</span>) * m.SquareLen,(y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(m.MapImage,rect,<span class=\"number\">4</span>)</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> m.Entinexty[y][x] == <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+<span class=\"number\">1</span>) * m.SquareLen,(y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(m.MapImage,rect,<span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> m.Entinexty[y][x] == <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+<span class=\"number\">1</span>) * m.SquareLen,(y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(m.MapImage,rect,<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*============================= end =======================================*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*=========================== gif图绘制所需 ============================*/</span></span><br><span class=\"line\"><span class=\"comment\">//创建调色板</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> palette = []color.Color&#123;</span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//底板色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//公主色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//已通过路径色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//回退点色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">177</span>,<span class=\"number\">177</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//障碍物色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//头部色彩</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> anim = gif.GIF&#123;LoopCount:<span class=\"number\">510</span>&#125;\t<span class=\"comment\">//创建gif图像，并设置动画帧数为510</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> forwardImg  [<span class=\"number\">255</span>]Map<span class=\"comment\">//前进路径示意图临时存档数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rollbackImg\t [<span class=\"number\">255</span>]Map<span class=\"comment\">//回退路径示意图临时存放数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> forwardCounter <span class=\"keyword\">int</span> = <span class=\"number\">0</span><span class=\"comment\">//前进路径示意图计数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rollbackCounter <span class=\"keyword\">int</span> = <span class=\"number\">0</span>\t<span class=\"comment\">//回退路径示意图计数</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//矩形绘制</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DrawRectangle</span><span class=\"params\">(img *image.Paletted,rect image.Rectangle,color <span class=\"keyword\">uint8</span>)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x:= rect.Min.X; x &lt; rect.Max.X; x++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> y := rect.Min.Y; y &lt; rect.Max.Y; y++ &#123;</span><br><span class=\"line\">\t\t\timg.SetColorIndex(x,y,color)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*============================ end ======================================*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*========================= 骑士救公主 ^v^ ===============================*/</span></span><br><span class=\"line\"><span class=\"comment\">//地图内容</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> MapArr = [<span class=\"number\">5</span>][<span class=\"number\">4</span>]<span class=\"keyword\">int</span>&#123;\t<span class=\"comment\">//0: 可通过；1： 障碍物； 2：骑士； 3：公主</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//行走行为</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> next = [<span class=\"number\">4</span>][<span class=\"number\">2</span>]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;,<span class=\"comment\">//向右走</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,<span class=\"comment\">//向下走</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;,<span class=\"comment\">//向左走</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;,<span class=\"comment\">//向上走</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 深度优先搜索算法实现</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> min <span class=\"keyword\">int</span> = <span class=\"number\">99999</span>\t\t<span class=\"comment\">//最短路径</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> book [<span class=\"number\">5</span>][<span class=\"number\">4</span>]<span class=\"keyword\">int</span>\t\t<span class=\"comment\">//已行进坐标记录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dfs</span><span class=\"params\">(m *Map , x <span class=\"keyword\">int</span>, y <span class=\"keyword\">int</span>, step <span class=\"keyword\">int</span>, counter <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> nextx,nexty <span class=\"keyword\">int</span> </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> m.Entinexty[x][y] == <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> step &lt; min &#123;</span><br><span class=\"line\">\t\t\tmin = step</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//枚举4种走法</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k := <span class=\"number\">0</span>; k &lt;= <span class=\"number\">3</span>; k++ &#123;</span><br><span class=\"line\">\t\tnextx = x+next[k][<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\tnexty = y+next[k][<span class=\"number\">1</span>]</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> nextx &lt; <span class=\"number\">0</span> || nextx &gt;= <span class=\"number\">5</span> || nexty &lt; <span class=\"number\">0</span> || nexty &gt;= <span class=\"number\">4</span> &#123;\t<span class=\"comment\">//越界</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/*==== 分别为前进、后退绘制相应存图 =====*/</span></span><br><span class=\"line\">\t\tforwardImg[forwardCounter].SquareLen = <span class=\"number\">60</span></span><br><span class=\"line\">\t\tforwardImg[forwardCounter].MapImage = image.NewPaletted(image.Rect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">240</span>, <span class=\"number\">300</span>),palette)</span><br><span class=\"line\">\t\tforwardImg[forwardCounter].Entinexty = MapArr\t</span><br><span class=\"line\">\t\tforwardImg[forwardCounter].DrawTheMap()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\trollbackImg[forwardCounter].SquareLen = <span class=\"number\">60</span></span><br><span class=\"line\">\t\trollbackImg[forwardCounter].MapImage = image.NewPaletted(image.Rect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">240</span>, <span class=\"number\">300</span>),palette)</span><br><span class=\"line\">\t\trollbackImg[forwardCounter].Entinexty = MapArr\t</span><br><span class=\"line\">\t\trollbackImg[forwardCounter].DrawTheMap()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _x := <span class=\"number\">0</span>; _x &lt; <span class=\"number\">4</span>; _x++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _y := <span class=\"number\">0</span>; _y &lt; <span class=\"number\">5</span>; _y++ &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> ( book[_y][_x] == <span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">\t\t\t\t\trect := image.Rect(_x * m.SquareLen, _y * m.SquareLen, (_x+<span class=\"number\">1</span>) * m.SquareLen, (_y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,<span class=\"number\">2</span>)\t</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*=====  end  =====*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> m.Entinexty[nextx][nexty] == <span class=\"number\">0</span> &amp;&amp; book[nextx][nexty] == <span class=\"number\">0</span> || </span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tm.Entinexty[nextx][nexty] == <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">\t\t\tbook[nextx][nexty] = <span class=\"number\">1</span>\t<span class=\"comment\">//记录当前路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*==== 绘制前进图像 =====*/</span></span><br><span class=\"line\">\t\t\trect := image.Rect(nexty * m.SquareLen, nextx*m.SquareLen, (nexty+<span class=\"number\">1</span>) * m.SquareLen, (nextx+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,<span class=\"number\">5</span>)\t</span><br><span class=\"line\">\t\t\tanim.Image = <span class=\"built_in\">append</span>(anim.Image,forwardImg[forwardCounter].MapImage)</span><br><span class=\"line\">\t\t\tforwardCounter += <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\tanim.Delay = <span class=\"built_in\">append</span>(anim.Delay,<span class=\"number\">60</span>)<span class=\"comment\">//加入gif图像,设置帧间间隔60ms</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*===== end =====*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tdfs(m,nextx,nexty,step+<span class=\"number\">1</span>,forwardCounter)</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*======= 绘制回退图像 =======*/</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _x := <span class=\"number\">0</span>; _x &lt; <span class=\"number\">4</span>; _x++ &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> _y := <span class=\"number\">0</span>; _y &lt; <span class=\"number\">5</span>; _y++ &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> ( book[_y][_x] == <span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">\t\t\t\t\t\trect := image.Rect(_x * m.SquareLen, _y * m.SquareLen, (_x+<span class=\"number\">1</span>) * m.SquareLen, (_y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\t\t\tDrawRectangle(rollbackImg[rollbackCounter].MapImage,rect,<span class=\"number\">2</span>)\t\t</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\trect2 := image.Rect(nexty * m.SquareLen, nextx * m.SquareLen, (nexty+<span class=\"number\">1</span>) * m.SquareLen, (nextx+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\tDrawRectangle(rollbackImg[rollbackCounter].MapImage,rect2,<span class=\"number\">3</span>)</span><br><span class=\"line\">\t\t\tanim.Image = <span class=\"built_in\">append</span>(anim.Image,rollbackImg[rollbackCounter].MapImage)</span><br><span class=\"line\">\t\t\trollbackCounter += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tanim.Delay = <span class=\"built_in\">append</span>(anim.Delay,<span class=\"number\">60</span>)<span class=\"comment\">//加入gif图像,设置帧间间隔60ms</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*===== end =======*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tbook[nextx][nexty] = <span class=\"number\">0</span>\t<span class=\"comment\">//回退路径</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\timgfile, _ := os.Create(fmt.Sprintf(<span class=\"string\">\"map.png\"</span>))</span><br><span class=\"line\">\tgiffile, _ := os.Create(fmt.Sprintf(<span class=\"string\">\"map.gif\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> MazeMap Map</span><br><span class=\"line\">\t<span class=\"comment\">//初始化地图数据</span></span><br><span class=\"line\">\tMazeMap.Entinexty = MapArr</span><br><span class=\"line\">\tMazeMap.SquareLen = <span class=\"number\">60</span></span><br><span class=\"line\">\tMazeMap.MapImage = image.NewPaletted(image.Rect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">240</span>, <span class=\"number\">300</span>),palette)</span><br><span class=\"line\">\tMazeMap.DrawTheMap()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tbook[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">\tdfs(&amp;MazeMap,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,forwardCounter)</span><br><span class=\"line\">\tfmt.Println(min)</span><br><span class=\"line\"></span><br><span class=\"line\">\terr := png.Encode(imgfile, MazeMap.MapImage)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"error is genrate\\n\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = gif.EncodeAll(giffile,&amp;anim)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n","site":{"data":{"stun":{"shake_file":true,"index_subtitle":false,"canonical":true,"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu360_site_verification":null,"sougou_site_verification":null,"menu":{"home":"/ || fas fa-home","archives":"/archives/ || fas fa-folder-open","categories":"/categories/ || fas fa-layer-group","tags":"/tags/ || fas fa-tags"},"submenu":null,"menu_settings":{"icon_only":false,"text_only":false},"favicon":{"small":"/images/icons/favicon-16x16.png","medium":"/images/icons/favicon-32x32.png"},"pwa":{"enable":false,"manifest":"/manifest.json","theme_color":"#54bcff"},"night_mode":{"enable":true,"button":{"color":"#fafafa","bg_color":"#8c8a8a"},"icon":{"dark":"🌜","light":"🌞"}},"layout":{"content":"768px","sidebar":"300px","content_sidebar_gap":"30px","main_padding":{"default":"20px","tablet":"15px","mobile":"10px"}},"header":{"enable":true,"show_on":{"post":true},"height":"80%","bg_image":{"enable":true,"url":"/images/header.jpg"},"mask":{"enable":true,"opacity":0.5},"nav":{"height":"50px","bg_color":"#333"},"scroll_down_icon":{"enable":false,"name":"fas fa-angle-down","animation":true}},"body":{"bg_image":{"enable":true,"url":"/images/blogbk.jpg","fixed":true,"repeat":false},"mask":{"enable":false,"opacity":{"default":0.1,"night_mode":0.6}}},"footer":{"bg_image":{"enable":false,"url":null},"mask":{"enable":false,"opacity":0.5},"copyright":{"enable":true,"text":null,"since":null,"end":null},"icon":{"enable":true,"name":"fas fa-heart","animation":false,"color":"#ff0000"},"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":false,"icp":null},"custom":{"enable":false,"text":null}},"creative_commons":{"enable":true,"license":"BY-NC-SA","sidebar":true,"post":true,"language":null},"back2top":{"enable":true,"icon":{"name":"fas fa-rocket","rotate":"-45deg","color":"#49b1f5","hover_color":"#fc6423"}},"sidebar":{"enable":true,"position":"right","offsetTop":"20px","horizon_line":false},"author":{"enable":true,"avatar":{"url":"/images/icons/stun-logo.svg","rounded":false,"opacity":1,"animation":"turn"},"motto":"hello world"},"social":{"github":"https://github.com/ || fab fa-github","google":"https://plus.google.com/ || fab fa-google","twitter":"https://twitter.com/ || fab fa-twitter","youtube":"https://youtube.com/ || fab fa-youtube"},"social_setting":{"enable":false,"icon_only":true},"toc":{"enable":true,"list_number":true,"wrap":true,"expand_all":false,"min_depth":1,"max_depth":6},"feed":{"enable":false,"email":null,"rss":null},"reading_progress":{"enable":true,"color":"#fc6423","height":"1px"},"codeblock":{"style":"default","highlight":"light","word_wrap":false},"heading_line":true,"reward":{"enable":false,"alipay":null,"wechat":null},"post_meta":{"icon_only":false,"created":{"enable":true,"icon":"far fa-calendar-plus"},"updated":{"enable":true,"icon":"far fa-calendar-check"},"reading_time":{"enable":false,"icon":"far fa-clock","speed":{"zh":200,"en":80}},"word_count":{"enable":false,"icon":"far fa-file-word"}},"post_list":{"paginate":{"home":true,"archives":false},"cover_image":{"home":false}},"post_widget":{"tags":true,"end_text":{"enable":true,"horizon_line":true},"share":{"enable":false,"label":"Share to: ","target":"qzone, qq, weibo, wechat, douban, linkedin, facebook, twitter, google"}},"stick_top":{"position":"right","icon":"fas fa-thumbtack","rotate":"45deg","color":"#999"},"gitalk":{"enable":false,"owner":null,"repo":null,"client_id":null,"client_secret":null,"admin":null,"distraction_free_mode":false,"language":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"Just go go","avatar":"mp","meta":"nick,mail,link","pageSize":10,"visitor":false,"recordIP":false,"language":null},"minivaline":{"enable":false,"appId":null,"appKey":null,"placeholder":"Write a Comment","adminEmailMd5":null,"math":true,"md":true,"lang":null},"livere":{"enable":false,"uid":null},"disqus":{"enable":false,"shortname":null,"count":true},"utterances":{"enable":false,"owner":null,"repo":null,"mapping":"title","label":"utterances","theme":"github-light","script_url":"https://utteranc.es/client.js"},"busuanzi":{"enable":false,"icon_only":false,"site_uv":{"enable":true,"icon":"fas fa-user"},"site_pv":{"enable":true,"icon":"fas fa-eye"},"post_pv":{"enable":true,"icon":"fas fa-eye"}},"google_analytics":null,"baidu_analytics":null,"tencent_analytics":null,"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"show_stats":true}},"local_search":{"enable":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"canvas_nest":{"enable":true,"color":"0,0,0","opacity":0.6,"count":200,"zIndex":-1},"math":{"enable":false,"per_page":false,"engine":"katex","mathjax":{"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","mhchem":{"enable":false,"mhchem_js":"https://cdn.jsdelivr.net/npm/mathjax-mhchem@3.3.2/mhchem.min.js"}},"katex":{"cdn":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css","copy_tex":{"enable":true,"copy_tex_js":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.min.js","copy_tex_css":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.css"}}},"fancybox":false,"zoom_image":{"enable":true,"mask_color":"rgba(0,0,0,0.6)","gap_aside":"20px"},"gallery_waterfall":{"enable":false,"col_width":"220px","gap_x":"10px","gap_y":"10px"},"lazyload":{"enable":false,"placeholder":"gif"},"quicklink":{"enable":false,"home":true,"archive":true,"delay":true,"timeout":10000,"priority":true,"ignores":["/\\/api\\/?/","uri => uri.includes('.xml')","uri => uri.includes('.zip')","(uri, el) => el.hasAttribute('nofollow')","(uri, el) => el.hasAttribute('noprefetch')"]},"pjax":{"enable":false,"avoid_banner":false,"elements":null,"selectors":null,"switches":null,"switchesOptions":null,"history":true,"scrollTo":false,"scrollRestoration":false,"cacheBust":false,"debug":false,"currentUrlFullReload":false,"timeout":0},"google_adsense":{"enable":false,"client":null,"js_src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"},"external_link":{"icon":{"enable":true,"name":"fas fa-external-link-alt","color":"#aaa"}},"shortcuts":{"switch_post":{"enable":false}},"tag_cloud":{"start_color":"#a4d8fa","end_color":"#49b1f5","min_size":16,"max_size":26,"max_amount":200},"kill_old_ie":{"enable":false,"warning_url":"https://support.dmeng.net/upgrade-your-browser.html"},"css":"css","js":"js","images":"images","icon":{"search":"fas fa-search","localsearch_empty":"far fa-meh","menu_btn":"fas fa-bars","feed_email":"fas fa-envelope","feed_rss":"fas fa-rss","paginator_prev":"fas fa-angle-left","paginator_next":"fas fa-angle-right","read_more_btn":"fas fa-long-arrow-alt-right","post_tags":"fas fa-tag","copy_btn":"fas fa-copy","prompt_success":"fas fa-check-circle","prompt_info":"fas fa-arrow-circle-right","prompt_warning":"fas fa-exclamation-circle","prompt_error":"fas fa-times-circle","valine_visitor":"fas fa-eye","post_heading":"fas fa-link","notetag_default":"fas fa-arrow-circle-right","notetag_success":"fas fa-check-circle","notetag_info":"fas fa-info-circle","notetag_warning":"fas fa-exclamation-circle","notetag_danger":"fas fa-minus-circle"},"cdn":{"fontawesome":null,"jquery":null,"velocity":null,"velocity_ui":null,"gitalk_js":null,"gitalk_css":null,"gitalk_md5":null,"valine":null,"leancloud_storage":null,"minivaline":null,"busuanzi":null,"instantsearch_js":null,"instantsearch_css":null,"canvas_ribbon":null,"canvas_nest":null,"fancybox_js":null,"fancybox_css":null,"masonry":null,"lazyload":null,"quicklink":null,"pjax":null,"share_js":null,"share_css":null},"rootConfig":{"title":"在下的小书架","subtitle":"对一件事理解的越深，就能做的越好！","description":"","author":"zxr","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"stun","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/qingfengzxr/qingfengzxr.github.io","branch":"master","message":"(Site update {{ now('YYYY-MM-DD HH:mm:ss') }})"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"","more":"\n        <h4 id=\"深度优先搜索算法核心思想\"   >\n          <a href=\"#深度优先搜索算法核心思想\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>深度优先搜索算法核心思想</h4>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">深度优先搜索算法与广度优先搜索算法相对，二者都是针对图的遍历而言的。</span><br><span class=\"line\">深度优先搜索算法的核心思想：</span><br><span class=\"line\">\t首先以一个未被访问过的顶点作为起始顶点，沿当前顶点的边走到未访问过的顶点;当没有未访问过的顶点时，则回到上一个顶点，继续试探访问别的顶点，直到所有的顶点都被访问过。</span><br><span class=\"line\">\t其特点是总是沿着图的某一分支遍历直到末端，然后回溯，再沿着另一条进行同样的遍历，直到所有顶点都被访问过。其回溯的特点十分贴合递归思想。</span><br></pre></td></tr></table></div></figure>\n\n\n        <h4 id=\"演示动图\"   >\n          <a href=\"#演示动图\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>演示动图</h4>\n      <p><img   src=\"https://github.com/qingfengzxr/Learning-Warehouse/blob/master/DataStucture/DepthFistSearch/map.gif?raw=true\" style=\"\"  alt=\"\"></p>\n\n        <h4 id=\"深度优先搜索算法示例\"   >\n          <a href=\"#深度优先搜索算法示例\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>深度优先搜索算法示例</h4>\n      <figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image/color\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image/png\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"image/gif\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"os\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*================================== 地图类 ==============================*/</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Map <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tSquareLen\t<span class=\"keyword\">int</span>\t\t\t<span class=\"comment\">//地图格子大小</span></span><br><span class=\"line\">\tEntinexty\t[<span class=\"number\">5</span>][<span class=\"number\">4</span>]<span class=\"keyword\">int</span>\t<span class=\"comment\">//地图数据</span></span><br><span class=\"line\">\tMapImage *image.Paletted</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//绘制地图</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Map)</span> <span class=\"title\">DrawTheMap</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x := <span class=\"number\">0</span>; x &lt; <span class=\"number\">4</span>; x++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> y := <span class=\"number\">0</span>; y &lt; <span class=\"number\">5</span>; y++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> m.Entinexty[y][x] == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+<span class=\"number\">1</span>) * m.SquareLen,(y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(m.MapImage,rect,<span class=\"number\">4</span>)</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> m.Entinexty[y][x] == <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+<span class=\"number\">1</span>) * m.SquareLen,(y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(m.MapImage,rect,<span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> m.Entinexty[y][x] == <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">\t\t\t\trect := image.Rect(x * m.SquareLen,y * m.SquareLen,(x+<span class=\"number\">1</span>) * m.SquareLen,(y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\tDrawRectangle(m.MapImage,rect,<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*============================= end =======================================*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*=========================== gif图绘制所需 ============================*/</span></span><br><span class=\"line\"><span class=\"comment\">//创建调色板</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> palette = []color.Color&#123;</span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//底板色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//公主色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//已通过路径色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//回退点色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">177</span>,<span class=\"number\">177</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//障碍物色彩</span></span><br><span class=\"line\">\tcolor.RGBA&#123;<span class=\"number\">0</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>,<span class=\"number\">255</span>&#125;,<span class=\"comment\">//头部色彩</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> anim = gif.GIF&#123;LoopCount:<span class=\"number\">510</span>&#125;\t<span class=\"comment\">//创建gif图像，并设置动画帧数为510</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> forwardImg  [<span class=\"number\">255</span>]Map<span class=\"comment\">//前进路径示意图临时存档数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rollbackImg\t [<span class=\"number\">255</span>]Map<span class=\"comment\">//回退路径示意图临时存放数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> forwardCounter <span class=\"keyword\">int</span> = <span class=\"number\">0</span><span class=\"comment\">//前进路径示意图计数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rollbackCounter <span class=\"keyword\">int</span> = <span class=\"number\">0</span>\t<span class=\"comment\">//回退路径示意图计数</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//矩形绘制</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DrawRectangle</span><span class=\"params\">(img *image.Paletted,rect image.Rectangle,color <span class=\"keyword\">uint8</span>)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x:= rect.Min.X; x &lt; rect.Max.X; x++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> y := rect.Min.Y; y &lt; rect.Max.Y; y++ &#123;</span><br><span class=\"line\">\t\t\timg.SetColorIndex(x,y,color)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*============================ end ======================================*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*========================= 骑士救公主 ^v^ ===============================*/</span></span><br><span class=\"line\"><span class=\"comment\">//地图内容</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> MapArr = [<span class=\"number\">5</span>][<span class=\"number\">4</span>]<span class=\"keyword\">int</span>&#123;\t<span class=\"comment\">//0: 可通过；1： 障碍物； 2：骑士； 3：公主</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">0</span>,&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//行走行为</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> next = [<span class=\"number\">4</span>][<span class=\"number\">2</span>]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;,<span class=\"comment\">//向右走</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,<span class=\"comment\">//向下走</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;,<span class=\"comment\">//向左走</span></span><br><span class=\"line\">\t&#123;<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;,<span class=\"comment\">//向上走</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 深度优先搜索算法实现</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> min <span class=\"keyword\">int</span> = <span class=\"number\">99999</span>\t\t<span class=\"comment\">//最短路径</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> book [<span class=\"number\">5</span>][<span class=\"number\">4</span>]<span class=\"keyword\">int</span>\t\t<span class=\"comment\">//已行进坐标记录</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dfs</span><span class=\"params\">(m *Map , x <span class=\"keyword\">int</span>, y <span class=\"keyword\">int</span>, step <span class=\"keyword\">int</span>, counter <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> nextx,nexty <span class=\"keyword\">int</span> </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> m.Entinexty[x][y] == <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> step &lt; min &#123;</span><br><span class=\"line\">\t\t\tmin = step</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//枚举4种走法</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k := <span class=\"number\">0</span>; k &lt;= <span class=\"number\">3</span>; k++ &#123;</span><br><span class=\"line\">\t\tnextx = x+next[k][<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\tnexty = y+next[k][<span class=\"number\">1</span>]</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> nextx &lt; <span class=\"number\">0</span> || nextx &gt;= <span class=\"number\">5</span> || nexty &lt; <span class=\"number\">0</span> || nexty &gt;= <span class=\"number\">4</span> &#123;\t<span class=\"comment\">//越界</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/*==== 分别为前进、后退绘制相应存图 =====*/</span></span><br><span class=\"line\">\t\tforwardImg[forwardCounter].SquareLen = <span class=\"number\">60</span></span><br><span class=\"line\">\t\tforwardImg[forwardCounter].MapImage = image.NewPaletted(image.Rect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">240</span>, <span class=\"number\">300</span>),palette)</span><br><span class=\"line\">\t\tforwardImg[forwardCounter].Entinexty = MapArr\t</span><br><span class=\"line\">\t\tforwardImg[forwardCounter].DrawTheMap()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\trollbackImg[forwardCounter].SquareLen = <span class=\"number\">60</span></span><br><span class=\"line\">\t\trollbackImg[forwardCounter].MapImage = image.NewPaletted(image.Rect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">240</span>, <span class=\"number\">300</span>),palette)</span><br><span class=\"line\">\t\trollbackImg[forwardCounter].Entinexty = MapArr\t</span><br><span class=\"line\">\t\trollbackImg[forwardCounter].DrawTheMap()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _x := <span class=\"number\">0</span>; _x &lt; <span class=\"number\">4</span>; _x++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _y := <span class=\"number\">0</span>; _y &lt; <span class=\"number\">5</span>; _y++ &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> ( book[_y][_x] == <span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">\t\t\t\t\trect := image.Rect(_x * m.SquareLen, _y * m.SquareLen, (_x+<span class=\"number\">1</span>) * m.SquareLen, (_y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,<span class=\"number\">2</span>)\t</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*=====  end  =====*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> m.Entinexty[nextx][nexty] == <span class=\"number\">0</span> &amp;&amp; book[nextx][nexty] == <span class=\"number\">0</span> || </span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tm.Entinexty[nextx][nexty] == <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">\t\t\tbook[nextx][nexty] = <span class=\"number\">1</span>\t<span class=\"comment\">//记录当前路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*==== 绘制前进图像 =====*/</span></span><br><span class=\"line\">\t\t\trect := image.Rect(nexty * m.SquareLen, nextx*m.SquareLen, (nexty+<span class=\"number\">1</span>) * m.SquareLen, (nextx+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\tDrawRectangle(forwardImg[forwardCounter].MapImage,rect,<span class=\"number\">5</span>)\t</span><br><span class=\"line\">\t\t\tanim.Image = <span class=\"built_in\">append</span>(anim.Image,forwardImg[forwardCounter].MapImage)</span><br><span class=\"line\">\t\t\tforwardCounter += <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\tanim.Delay = <span class=\"built_in\">append</span>(anim.Delay,<span class=\"number\">60</span>)<span class=\"comment\">//加入gif图像,设置帧间间隔60ms</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*===== end =====*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tdfs(m,nextx,nexty,step+<span class=\"number\">1</span>,forwardCounter)</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*======= 绘制回退图像 =======*/</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _x := <span class=\"number\">0</span>; _x &lt; <span class=\"number\">4</span>; _x++ &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> _y := <span class=\"number\">0</span>; _y &lt; <span class=\"number\">5</span>; _y++ &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> ( book[_y][_x] == <span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">\t\t\t\t\t\trect := image.Rect(_x * m.SquareLen, _y * m.SquareLen, (_x+<span class=\"number\">1</span>) * m.SquareLen, (_y+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\t\t\t\tDrawRectangle(rollbackImg[rollbackCounter].MapImage,rect,<span class=\"number\">2</span>)\t\t</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\trect2 := image.Rect(nexty * m.SquareLen, nextx * m.SquareLen, (nexty+<span class=\"number\">1</span>) * m.SquareLen, (nextx+<span class=\"number\">1</span>) * m.SquareLen)</span><br><span class=\"line\">\t\t\tDrawRectangle(rollbackImg[rollbackCounter].MapImage,rect2,<span class=\"number\">3</span>)</span><br><span class=\"line\">\t\t\tanim.Image = <span class=\"built_in\">append</span>(anim.Image,rollbackImg[rollbackCounter].MapImage)</span><br><span class=\"line\">\t\t\trollbackCounter += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tanim.Delay = <span class=\"built_in\">append</span>(anim.Delay,<span class=\"number\">60</span>)<span class=\"comment\">//加入gif图像,设置帧间间隔60ms</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*===== end =======*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tbook[nextx][nexty] = <span class=\"number\">0</span>\t<span class=\"comment\">//回退路径</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\timgfile, _ := os.Create(fmt.Sprintf(<span class=\"string\">\"map.png\"</span>))</span><br><span class=\"line\">\tgiffile, _ := os.Create(fmt.Sprintf(<span class=\"string\">\"map.gif\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> MazeMap Map</span><br><span class=\"line\">\t<span class=\"comment\">//初始化地图数据</span></span><br><span class=\"line\">\tMazeMap.Entinexty = MapArr</span><br><span class=\"line\">\tMazeMap.SquareLen = <span class=\"number\">60</span></span><br><span class=\"line\">\tMazeMap.MapImage = image.NewPaletted(image.Rect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">240</span>, <span class=\"number\">300</span>),palette)</span><br><span class=\"line\">\tMazeMap.DrawTheMap()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tbook[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">\tdfs(&amp;MazeMap,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,forwardCounter)</span><br><span class=\"line\">\tfmt.Println(min)</span><br><span class=\"line\"></span><br><span class=\"line\">\terr := png.Encode(imgfile, MazeMap.MapImage)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatal(err)</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"error is genrate\\n\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\terr = gif.EncodeAll(giffile,&amp;anim)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n"},{"title":"Golang - 基础骨架","_content":"\n# GOLANG\n\n#### GO语言的特性\n\n1. GO语言是按值调用语言。\n\n2. GO是面向函数的语言，仅管它允许面向对象风格的编程。\n\n   它的面向对象风格是由结构体（复合数据类型）、方法、接口来实现的。\n\n   具体表现为：结构体嵌套，为类型定义方法，接口等\n\n3. 就像Python的所有数据类型都是类的思想一样，Go也拥有自己的独特的类型系统，每一个类型都由底层接口定义而来。\n\n\n\n#### GO语言的实用功能包\n\n1. golang.org/x/net/html:\n\n它提供了解析HTML的功能。\n\n2. \n\n\n\n#### 变量\n\n* 短变量声明\n\n一个容易被忽略但重要的地方是：\n\n短变量声明不需要声明所有在左边的变量。如果一些变量在同一个词法块中声明，那么对于那些变量，短变量行为等同于赋值。\n\n在下面的代码中，第一条语句声明了in和err。第二条语句仅仅声明了out,但向已有的err变量赋了值。\n\n```go\nin,err := os.Open(infile)\n//下面的语句和第二条语句联系一起看\nout,err := os.Create(outfile)\n```\n\n短变量声明最少声明一个新变量，否则编译不通过。\n\n\n\n#### slice\n\n```go\n//slice操作符s[i:j]\n//数据结构如下\n// src/runtime/slice.go(go.19.1)\ntype slice struct{\n    array unsafe.Pointer //指向底层数组的指针\n    len int //slice元素数量\n    cap int //底层数组的容量\n}\n```\n\n1. 如果slice的引用超过了被引用对象的容量，即cap(s),那么会导致程序宕机；但是如果slice的引用超出了被引用对象的长度，即len(s),那么最终slice会比原slice长。\n\n2. 和数组不同的是，slice无法作比较，因此不能用 == 来检测两个slice是否含有相同的元素。\n3. slice需要做深度比较，因此不能用slice作为map的键。\n4. slice唯一允许的比较操作是和nil做比较。slice类型的零值是nil。值为nil的slice没有对应的底层数组。值得注意的是：值为nil的slice长度和容量都是零，但是也有非nil的slice长度和容量也是零，例如[]int{}或者make([]int,3)[3:0]。\n\n\n\n#### map\n\n```go\n//创建一个map\nages = make(map[string]int) //创建了一个键为string值为int的map\n//初始化\nages := map[string]int{\n\t\"alice\":31,\n\t\"charlie\":34,\n}\n//or \nages[\"alice\"] = 31\n```\n\n1. map元素不是一个变量，不可以获取它的地址\n2. map使用给定的键来查找元素，如果对应的元素不存在，就返回值类型的零值\n\n\n\n#### 函数\n\n* 函数定义\n\n```go\nfunc funcName(param-list)(result-list){\n\tfunction-body\n}\n```\n\n* 函数签名\n\n函数类型又叫函数签名，一个函数的类型就是函数定义首行去掉函数名、参数名和{，可以使用fmt.Printf的“%T”格式化参数打印函数类型。\n\n两个函数类型相同的条件是：拥有相同形参列表和返回值列表（列表元素的次序、个数和类型都相同），形参名可以不同。\n\n可以用type定义函数类型，函数类型变量可以作为函数的参数或者返回值。\n\n```go\nfunc add(a, b int) int {\n\treturn a + b\n}\nfmt.Printf(\"%T\\n\", add) // func(int,int) int\n```\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc add(a,b int) int {\n    return a+b\n}\n\nfunc sub(a,b int) int {\n    return a-b\n}\n\ntype Op func(int, int) int //定义一个函数类型\n\nfunc do(f Op, a, b int) int { //定义一个函数，第一个参数是函数类型Op\n    return f(a, b) //函数类型变量可以直接用来进行函数调用\n}\n\nfunc main(){\n    a := do(add,1,2) //函数名add可以当作相同函数类型形参，不需要强制类型转换\n    fmt.Println(a)\n    s := do(sub,1,2)\n    fmt.Println(s)\n}\n\n```\n\n：不知道为什么，很有一种Python中装饰器的味道，暂时来说不知道在go语言的开发中会有怎样的用途，适用于怎样的场景，但感觉用途挺有意思的。\n\n**注意：**\n1. GO函数使用 caller-save 模式，即由调用者负责保存寄存器，由主调函数保存和恢复现场。\n2. GO内嵌汇编和反汇编产生的代码并不是一一对应的，汇编编译器对内嵌汇编程序自动做了调整，主要差别就是增加了保护现场，以及函数调用前的保持PC、SP偏移地址重定位等逻辑。\n3. GO函数调用前已经为返回值和参数分配了栈空间，分配顺序是从右向左的，先是返回值，然后是参数。\n4. 函数的多值返回是主调函数预先分配好存放空间，然后被调函数执行时将返回值复制到该返回位置实现。\n5. GO语言是按值调用的语言，调用函数接收到的是实参的一个副本，并不是实参的引用。\n6. GO语言没有默认参数值的概念也不能指定实参名。\n\n\n\n#### 结构体\n\n* 示例\n\n```go\ntype Employee struct{\n\tID\t\t\t\tint\n    Name,Address\tstring\n    DoB\t\t\t\ttime.Time\n    Position\t\tstring\n    Salary\t\t\tint\n    ManagerID\t\tint\n}\n//结构体的成员变量通常一行写一个，变量的名称在类型的前面，但是相同类型的连续成员变 //量可以写在一行上\n```\n\n* 初始化\n\n```go\ntype Person struct {\n\tname string\n\tage int\n}\n\n//比较推荐指定字段名初始化\na := Person{name:\"andes\",age:\"18\"}\na := Person{\n    name:\"andes\",\n    age:18,\n}\na := Person{\n    name:\"andes\",\n    age:18}\n//初始化语句的末尾的‘}’独占一行时，最后一个字段的后面一定要带上逗号\n\ntype Apple struct{int}\nf := Apple{3}\nfmt.Println(f)//#输出{3}\n```\n\n* 匿名字段\n\n在定义struct的过程中，如果字段只给出字段类型，没有给出字段名，则称这样的字段为匿名字段。\n\n```go\ntype File struct{\n\t*file\n}\n```\n\n1. 被匿名嵌入的字段必须是命名类型或命名类型的指针，类型字面量不能作为匿名字段使用。\n2. 匿名字段的字段名默认就是类型名。\n3. 如果匿名字段是指针类型，则默认的字段名就是指针指向的类型名。\n4. 一个结构体里面不能同时存在某一类型及其指针类型的匿名字段，因为二者的字段名相等。\n5. 如果嵌入的字段来自其他包，则需要加上包名，并且必须是其他包可以导出的类型。\n\n6. 在GO语言里，成员变量的顺序对于结构体同一性很重要。不同的顺序代表不同的结构体类型。\n\n7. 如果一个结构体的成员变量是首字母大写的，那么这个变量是可导出的，这个是GO最主要的访问控制机制。\n\n8. 一个结构体可以同时包含可导出和不可导出的成员变量。\n\n9. 如果结构体的所有成员都可以比较，那么这个结构体就是可比较的。和其他可比较的类型一样，可比较的结构体类型都可以作为map的键类型。\n\n\n\n#### 方法\n\n```go\n//方法的声明和普通函数的声明类似，只是在函数名字前面多了一个参数。这个参数把这个方法绑定到这个参数对应的类型上。\npackage geometry\nimport \"math\"\n\ntype Point struct{X,Y float64}\n\n//普通的函数\nfunc Distance(p,q Point) float64 {\n    return math.Hypot(q.X-p.X,q.Y-p.Y)\n}\n\n//Point类型的方法\nfunc (p Point) Distance(q Point) float64{\n    return math.Hypot(q.X-p.X,q.Y-p.Y)\n}\n//附加的参数p,称为方法的接收者，用来描述主调方法就像向对象发送消息。\n//调用方法的时候，接收者在方法名的前面。这样就和声明保持一致。\n\n//上面两个Distance函数声明没有冲突。\n//第一个声明一个包级别的函数，称为 geometry.Distance \n//第二个声明一个类型Point的方法，因此它的名字是Point.Distance\n```\n\n1. 由于方法和字段来自于同一个命名空间，因此在Point结构类型中声明一个叫做X的方法会与字段X冲突，编译器会报错。\n2. GO和许多其他面向对象的语言不同，它可以将方法绑定到任何类型上。同一个包下的任何类型都可以声明方法，只要它的类型既不是指针类型也不是接口类型。\n3. 不允许本身是指针的类型进行方法声明。\n4. 在任何方法的接收者是指针的情况下，应该避免复制T的实例，因为这么做可能会破坏内部原本的数据。\n\n\n\n#### 接口\n\n```go\n//一个接口类型定义了一套方法，如果一个具体类型要实现该接口，那么必须实现接口类型定义中的所有方法\n//\ntype Reader interface{\n    Read(p []byte)(n int,err error)\n}\n```\n\n* 接口值\n\n​        一个接口类型的值（简称接口值）其实有两部分：一个具体类型和该类型的一个值。二者称为接口的动态类型和动态值。\n\n​        对于像GO这样的静态类型语言，类型仅仅是一个编译时的概念，所以类型不是一个值。在我们的概念模型中，用类型描述符来提供每个类型的具体信息，比如它的名字和方法。对于一个接口值，类型部分就用对应的类型描述符来表述。\n\n```go\nvar w io.Writer\nw = os.Stdout\n//这次复制把一个具体类型隐式转换为一个接口类型，它与对应的显式转换io.Writer(os.Stdout)等价\n//转换会转换操作数的类型和值，接口值的动态类型会设置为指针类型 *os.File的类型描述符，它的动态值会设置为 os.Stdout 的副本，即一个指向代表进程的标准输出的os.File类型的指针。\n```\n\n注意：接口类型是非平凡的。应该仅在能确认接口值包含的动态值可以比较时，才比较接口值。否则会导致崩溃。\n\n\n\n\n\n#### 反射\n\n\n\n\n\n\n\n\n\n####　包和ｇo工具\n\n众所周知，ＧＯ程序的编译速度比其他语言快，即便从零开始也是如此。这里有三个主要原因。\n\n第一，所有的导入都必须在每一个源文件的开头显式列出，这样编译器在确定依赖性的时候就不需要读取和处理整个文件；\n\n第二，包的依赖性形成有向无环图，因为没有环，所以包可以独立甚至并行编译。\n\n第三，ＧＯ包编译输出的目标文件不仅记录它自己的导出信息，还记录它所依赖包的导出信息。当编译一个包时，编译器必须从每一个导入中读取一个目标文件，但是不会超过这些文件。\n\n对于准备共享或公开的包，导入路径需要全局唯一。为了避免冲突，除了标准库中的包外，其他包的导入路径应该以互联网域名（组织机构拥有的域名或用于存放包的域名）作为路径的开始，这样也方便查找包。\n\n```go\nimport (\n\t\"fmt\"\n\t\"encoding/json\"\n\t\"golang.org/x/net/html\"\n\t\"github.com/go-sql-driver/mysql\"\n)\n```\n\n\n\n* 重命名导入\n\n```go\nimport(\n\t\"crypto/rand\"\n\tmrand \"math/rand\" //通过指定一个不同的名称mrand就避免了冲突\n)\n```\n\n\n\n* 空白导入\n\n如果导入的包的名字没有在文件中引用，就会产生一个编译错误。\n\n```go\nimport _ \"image/png\"\t//注册PNG解码器\t\n```\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/golang/bases/note.md","raw":"---\ntitle: Golang - 基础骨架\ncategories: \n- [golang, base]\ntags: \n- programming_language \n- golang\n---\n\n# GOLANG\n\n#### GO语言的特性\n\n1. GO语言是按值调用语言。\n\n2. GO是面向函数的语言，仅管它允许面向对象风格的编程。\n\n   它的面向对象风格是由结构体（复合数据类型）、方法、接口来实现的。\n\n   具体表现为：结构体嵌套，为类型定义方法，接口等\n\n3. 就像Python的所有数据类型都是类的思想一样，Go也拥有自己的独特的类型系统，每一个类型都由底层接口定义而来。\n\n\n\n#### GO语言的实用功能包\n\n1. golang.org/x/net/html:\n\n它提供了解析HTML的功能。\n\n2. \n\n\n\n#### 变量\n\n* 短变量声明\n\n一个容易被忽略但重要的地方是：\n\n短变量声明不需要声明所有在左边的变量。如果一些变量在同一个词法块中声明，那么对于那些变量，短变量行为等同于赋值。\n\n在下面的代码中，第一条语句声明了in和err。第二条语句仅仅声明了out,但向已有的err变量赋了值。\n\n```go\nin,err := os.Open(infile)\n//下面的语句和第二条语句联系一起看\nout,err := os.Create(outfile)\n```\n\n短变量声明最少声明一个新变量，否则编译不通过。\n\n\n\n#### slice\n\n```go\n//slice操作符s[i:j]\n//数据结构如下\n// src/runtime/slice.go(go.19.1)\ntype slice struct{\n    array unsafe.Pointer //指向底层数组的指针\n    len int //slice元素数量\n    cap int //底层数组的容量\n}\n```\n\n1. 如果slice的引用超过了被引用对象的容量，即cap(s),那么会导致程序宕机；但是如果slice的引用超出了被引用对象的长度，即len(s),那么最终slice会比原slice长。\n\n2. 和数组不同的是，slice无法作比较，因此不能用 == 来检测两个slice是否含有相同的元素。\n3. slice需要做深度比较，因此不能用slice作为map的键。\n4. slice唯一允许的比较操作是和nil做比较。slice类型的零值是nil。值为nil的slice没有对应的底层数组。值得注意的是：值为nil的slice长度和容量都是零，但是也有非nil的slice长度和容量也是零，例如[]int{}或者make([]int,3)[3:0]。\n\n\n\n#### map\n\n```go\n//创建一个map\nages = make(map[string]int) //创建了一个键为string值为int的map\n//初始化\nages := map[string]int{\n\t\"alice\":31,\n\t\"charlie\":34,\n}\n//or \nages[\"alice\"] = 31\n```\n\n1. map元素不是一个变量，不可以获取它的地址\n2. map使用给定的键来查找元素，如果对应的元素不存在，就返回值类型的零值\n\n\n\n#### 函数\n\n* 函数定义\n\n```go\nfunc funcName(param-list)(result-list){\n\tfunction-body\n}\n```\n\n* 函数签名\n\n函数类型又叫函数签名，一个函数的类型就是函数定义首行去掉函数名、参数名和{，可以使用fmt.Printf的“%T”格式化参数打印函数类型。\n\n两个函数类型相同的条件是：拥有相同形参列表和返回值列表（列表元素的次序、个数和类型都相同），形参名可以不同。\n\n可以用type定义函数类型，函数类型变量可以作为函数的参数或者返回值。\n\n```go\nfunc add(a, b int) int {\n\treturn a + b\n}\nfmt.Printf(\"%T\\n\", add) // func(int,int) int\n```\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc add(a,b int) int {\n    return a+b\n}\n\nfunc sub(a,b int) int {\n    return a-b\n}\n\ntype Op func(int, int) int //定义一个函数类型\n\nfunc do(f Op, a, b int) int { //定义一个函数，第一个参数是函数类型Op\n    return f(a, b) //函数类型变量可以直接用来进行函数调用\n}\n\nfunc main(){\n    a := do(add,1,2) //函数名add可以当作相同函数类型形参，不需要强制类型转换\n    fmt.Println(a)\n    s := do(sub,1,2)\n    fmt.Println(s)\n}\n\n```\n\n：不知道为什么，很有一种Python中装饰器的味道，暂时来说不知道在go语言的开发中会有怎样的用途，适用于怎样的场景，但感觉用途挺有意思的。\n\n**注意：**\n1. GO函数使用 caller-save 模式，即由调用者负责保存寄存器，由主调函数保存和恢复现场。\n2. GO内嵌汇编和反汇编产生的代码并不是一一对应的，汇编编译器对内嵌汇编程序自动做了调整，主要差别就是增加了保护现场，以及函数调用前的保持PC、SP偏移地址重定位等逻辑。\n3. GO函数调用前已经为返回值和参数分配了栈空间，分配顺序是从右向左的，先是返回值，然后是参数。\n4. 函数的多值返回是主调函数预先分配好存放空间，然后被调函数执行时将返回值复制到该返回位置实现。\n5. GO语言是按值调用的语言，调用函数接收到的是实参的一个副本，并不是实参的引用。\n6. GO语言没有默认参数值的概念也不能指定实参名。\n\n\n\n#### 结构体\n\n* 示例\n\n```go\ntype Employee struct{\n\tID\t\t\t\tint\n    Name,Address\tstring\n    DoB\t\t\t\ttime.Time\n    Position\t\tstring\n    Salary\t\t\tint\n    ManagerID\t\tint\n}\n//结构体的成员变量通常一行写一个，变量的名称在类型的前面，但是相同类型的连续成员变 //量可以写在一行上\n```\n\n* 初始化\n\n```go\ntype Person struct {\n\tname string\n\tage int\n}\n\n//比较推荐指定字段名初始化\na := Person{name:\"andes\",age:\"18\"}\na := Person{\n    name:\"andes\",\n    age:18,\n}\na := Person{\n    name:\"andes\",\n    age:18}\n//初始化语句的末尾的‘}’独占一行时，最后一个字段的后面一定要带上逗号\n\ntype Apple struct{int}\nf := Apple{3}\nfmt.Println(f)//#输出{3}\n```\n\n* 匿名字段\n\n在定义struct的过程中，如果字段只给出字段类型，没有给出字段名，则称这样的字段为匿名字段。\n\n```go\ntype File struct{\n\t*file\n}\n```\n\n1. 被匿名嵌入的字段必须是命名类型或命名类型的指针，类型字面量不能作为匿名字段使用。\n2. 匿名字段的字段名默认就是类型名。\n3. 如果匿名字段是指针类型，则默认的字段名就是指针指向的类型名。\n4. 一个结构体里面不能同时存在某一类型及其指针类型的匿名字段，因为二者的字段名相等。\n5. 如果嵌入的字段来自其他包，则需要加上包名，并且必须是其他包可以导出的类型。\n\n6. 在GO语言里，成员变量的顺序对于结构体同一性很重要。不同的顺序代表不同的结构体类型。\n\n7. 如果一个结构体的成员变量是首字母大写的，那么这个变量是可导出的，这个是GO最主要的访问控制机制。\n\n8. 一个结构体可以同时包含可导出和不可导出的成员变量。\n\n9. 如果结构体的所有成员都可以比较，那么这个结构体就是可比较的。和其他可比较的类型一样，可比较的结构体类型都可以作为map的键类型。\n\n\n\n#### 方法\n\n```go\n//方法的声明和普通函数的声明类似，只是在函数名字前面多了一个参数。这个参数把这个方法绑定到这个参数对应的类型上。\npackage geometry\nimport \"math\"\n\ntype Point struct{X,Y float64}\n\n//普通的函数\nfunc Distance(p,q Point) float64 {\n    return math.Hypot(q.X-p.X,q.Y-p.Y)\n}\n\n//Point类型的方法\nfunc (p Point) Distance(q Point) float64{\n    return math.Hypot(q.X-p.X,q.Y-p.Y)\n}\n//附加的参数p,称为方法的接收者，用来描述主调方法就像向对象发送消息。\n//调用方法的时候，接收者在方法名的前面。这样就和声明保持一致。\n\n//上面两个Distance函数声明没有冲突。\n//第一个声明一个包级别的函数，称为 geometry.Distance \n//第二个声明一个类型Point的方法，因此它的名字是Point.Distance\n```\n\n1. 由于方法和字段来自于同一个命名空间，因此在Point结构类型中声明一个叫做X的方法会与字段X冲突，编译器会报错。\n2. GO和许多其他面向对象的语言不同，它可以将方法绑定到任何类型上。同一个包下的任何类型都可以声明方法，只要它的类型既不是指针类型也不是接口类型。\n3. 不允许本身是指针的类型进行方法声明。\n4. 在任何方法的接收者是指针的情况下，应该避免复制T的实例，因为这么做可能会破坏内部原本的数据。\n\n\n\n#### 接口\n\n```go\n//一个接口类型定义了一套方法，如果一个具体类型要实现该接口，那么必须实现接口类型定义中的所有方法\n//\ntype Reader interface{\n    Read(p []byte)(n int,err error)\n}\n```\n\n* 接口值\n\n​        一个接口类型的值（简称接口值）其实有两部分：一个具体类型和该类型的一个值。二者称为接口的动态类型和动态值。\n\n​        对于像GO这样的静态类型语言，类型仅仅是一个编译时的概念，所以类型不是一个值。在我们的概念模型中，用类型描述符来提供每个类型的具体信息，比如它的名字和方法。对于一个接口值，类型部分就用对应的类型描述符来表述。\n\n```go\nvar w io.Writer\nw = os.Stdout\n//这次复制把一个具体类型隐式转换为一个接口类型，它与对应的显式转换io.Writer(os.Stdout)等价\n//转换会转换操作数的类型和值，接口值的动态类型会设置为指针类型 *os.File的类型描述符，它的动态值会设置为 os.Stdout 的副本，即一个指向代表进程的标准输出的os.File类型的指针。\n```\n\n注意：接口类型是非平凡的。应该仅在能确认接口值包含的动态值可以比较时，才比较接口值。否则会导致崩溃。\n\n\n\n\n\n#### 反射\n\n\n\n\n\n\n\n\n\n####　包和ｇo工具\n\n众所周知，ＧＯ程序的编译速度比其他语言快，即便从零开始也是如此。这里有三个主要原因。\n\n第一，所有的导入都必须在每一个源文件的开头显式列出，这样编译器在确定依赖性的时候就不需要读取和处理整个文件；\n\n第二，包的依赖性形成有向无环图，因为没有环，所以包可以独立甚至并行编译。\n\n第三，ＧＯ包编译输出的目标文件不仅记录它自己的导出信息，还记录它所依赖包的导出信息。当编译一个包时，编译器必须从每一个导入中读取一个目标文件，但是不会超过这些文件。\n\n对于准备共享或公开的包，导入路径需要全局唯一。为了避免冲突，除了标准库中的包外，其他包的导入路径应该以互联网域名（组织机构拥有的域名或用于存放包的域名）作为路径的开始，这样也方便查找包。\n\n```go\nimport (\n\t\"fmt\"\n\t\"encoding/json\"\n\t\"golang.org/x/net/html\"\n\t\"github.com/go-sql-driver/mysql\"\n)\n```\n\n\n\n* 重命名导入\n\n```go\nimport(\n\t\"crypto/rand\"\n\tmrand \"math/rand\" //通过指定一个不同的名称mrand就避免了冲突\n)\n```\n\n\n\n* 空白导入\n\n如果导入的包的名字没有在文件中引用，就会产生一个编译错误。\n\n```go\nimport _ \"image/png\"\t//注册PNG解码器\t\n```\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"golang/bases/note","published":1,"date":"2020-07-17T12:52:26.629Z","updated":"2020-07-17T12:52:26.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjcobbbk001ahelzdp844fnn","content":"\n        <h1 id=\"GOLANG\"   >\n          <a href=\"#GOLANG\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>GOLANG</h1>\n      \n        <h4 id=\"GO语言的特性\"   >\n          <a href=\"#GO语言的特性\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>GO语言的特性</h4>\n      <ol>\n<li><p>GO语言是按值调用语言。</p>\n</li>\n<li><p>GO是面向函数的语言，仅管它允许面向对象风格的编程。</p>\n<p>它的面向对象风格是由结构体（复合数据类型）、方法、接口来实现的。</p>\n<p>具体表现为：结构体嵌套，为类型定义方法，接口等</p>\n</li>\n<li><p>就像Python的所有数据类型都是类的思想一样，Go也拥有自己的独特的类型系统，每一个类型都由底层接口定义而来。</p>\n</li>\n</ol>\n\n        <h4 id=\"GO语言的实用功能包\"   >\n          <a href=\"#GO语言的实用功能包\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>GO语言的实用功能包</h4>\n      <ol>\n<li>golang.org/x/net/html:</li>\n</ol>\n<p>它提供了解析HTML的功能。</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n\n        <h4 id=\"变量\"   >\n          <a href=\"#变量\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>变量</h4>\n      <ul>\n<li>短变量声明</li>\n</ul>\n<p>一个容易被忽略但重要的地方是：</p>\n<p>短变量声明不需要声明所有在左边的变量。如果一些变量在同一个词法块中声明，那么对于那些变量，短变量行为等同于赋值。</p>\n<p>在下面的代码中，第一条语句声明了in和err。第二条语句仅仅声明了out,但向已有的err变量赋了值。</p>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">in,err := os.Open(infile)</span><br><span class=\"line\"><span class=\"comment\">//下面的语句和第二条语句联系一起看</span></span><br><span class=\"line\">out,err := os.Create(outfile)</span><br></pre></td></tr></table></div></figure>\n\n<p>短变量声明最少声明一个新变量，否则编译不通过。</p>\n\n        <h4 id=\"slice\"   >\n          <a href=\"#slice\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>slice</h4>\n      <figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//slice操作符s[i:j]</span></span><br><span class=\"line\"><span class=\"comment\">//数据结构如下</span></span><br><span class=\"line\"><span class=\"comment\">// src/runtime/slice.go(go.19.1)</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> slice <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    array unsafe.Pointer <span class=\"comment\">//指向底层数组的指针</span></span><br><span class=\"line\">    <span class=\"built_in\">len</span> <span class=\"keyword\">int</span> <span class=\"comment\">//slice元素数量</span></span><br><span class=\"line\">    <span class=\"built_in\">cap</span> <span class=\"keyword\">int</span> <span class=\"comment\">//底层数组的容量</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<ol>\n<li><p>如果slice的引用超过了被引用对象的容量，即cap(s),那么会导致程序宕机；但是如果slice的引用超出了被引用对象的长度，即len(s),那么最终slice会比原slice长。</p>\n</li>\n<li><p>和数组不同的是，slice无法作比较，因此不能用 == 来检测两个slice是否含有相同的元素。</p>\n</li>\n<li><p>slice需要做深度比较，因此不能用slice作为map的键。</p>\n</li>\n<li><p>slice唯一允许的比较操作是和nil做比较。slice类型的零值是nil。值为nil的slice没有对应的底层数组。值得注意的是：值为nil的slice长度和容量都是零，但是也有非nil的slice长度和容量也是零，例如[]int{}或者make([]int,3)[3:0]。</p>\n</li>\n</ol>\n\n        <h4 id=\"map\"   >\n          <a href=\"#map\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>map</h4>\n      <figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个map</span></span><br><span class=\"line\">ages = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>) <span class=\"comment\">//创建了一个键为string值为int的map</span></span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\">ages := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"alice\"</span>:<span class=\"number\">31</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"charlie\"</span>:<span class=\"number\">34</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//or </span></span><br><span class=\"line\">ages[<span class=\"string\">\"alice\"</span>] = <span class=\"number\">31</span></span><br></pre></td></tr></table></div></figure>\n\n<ol>\n<li>map元素不是一个变量，不可以获取它的地址</li>\n<li>map使用给定的键来查找元素，如果对应的元素不存在，就返回值类型的零值</li>\n</ol>\n\n        <h4 id=\"函数\"   >\n          <a href=\"#函数\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>函数</h4>\n      <ul>\n<li>函数定义</li>\n</ul>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcName</span><span class=\"params\">(param-list)</span><span class=\"params\">(result-list)</span></span>&#123;</span><br><span class=\"line\">\tfunction-body</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>函数签名</li>\n</ul>\n<p>函数类型又叫函数签名，一个函数的类型就是函数定义首行去掉函数名、参数名和{，可以使用fmt.Printf的“%T”格式化参数打印函数类型。</p>\n<p>两个函数类型相同的条件是：拥有相同形参列表和返回值列表（列表元素的次序、个数和类型都相同），形参名可以不同。</p>\n<p>可以用type定义函数类型，函数类型变量可以作为函数的参数或者返回值。</p>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%T\\n\"</span>, add) <span class=\"comment\">// func(int,int) int</span></span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">(a,b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sub</span><span class=\"params\">(a,b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a-b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Op <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span> //定义一个函数类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">do</span><span class=\"params\">(f Op, a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123; <span class=\"comment\">//定义一个函数，第一个参数是函数类型Op</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> f(a, b) <span class=\"comment\">//函数类型变量可以直接用来进行函数调用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    a := do(add,<span class=\"number\">1</span>,<span class=\"number\">2</span>) <span class=\"comment\">//函数名add可以当作相同函数类型形参，不需要强制类型转换</span></span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\">    s := do(sub,<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">    fmt.Println(s)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>：不知道为什么，很有一种Python中装饰器的味道，暂时来说不知道在go语言的开发中会有怎样的用途，适用于怎样的场景，但感觉用途挺有意思的。</p>\n<p><strong>注意：</strong></p>\n<ol>\n<li>GO函数使用 caller-save 模式，即由调用者负责保存寄存器，由主调函数保存和恢复现场。</li>\n<li>GO内嵌汇编和反汇编产生的代码并不是一一对应的，汇编编译器对内嵌汇编程序自动做了调整，主要差别就是增加了保护现场，以及函数调用前的保持PC、SP偏移地址重定位等逻辑。</li>\n<li>GO函数调用前已经为返回值和参数分配了栈空间，分配顺序是从右向左的，先是返回值，然后是参数。</li>\n<li>函数的多值返回是主调函数预先分配好存放空间，然后被调函数执行时将返回值复制到该返回位置实现。</li>\n<li>GO语言是按值调用的语言，调用函数接收到的是实参的一个副本，并不是实参的引用。</li>\n<li>GO语言没有默认参数值的概念也不能指定实参名。</li>\n</ol>\n\n        <h4 id=\"结构体\"   >\n          <a href=\"#结构体\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>结构体</h4>\n      <ul>\n<li>示例</li>\n</ul>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Employee <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tID\t\t\t\t<span class=\"keyword\">int</span></span><br><span class=\"line\">    Name,Address\t<span class=\"keyword\">string</span></span><br><span class=\"line\">    DoB\t\t\t\ttime.Time</span><br><span class=\"line\">    Position\t\t<span class=\"keyword\">string</span></span><br><span class=\"line\">    Salary\t\t\t<span class=\"keyword\">int</span></span><br><span class=\"line\">    ManagerID\t\t<span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//结构体的成员变量通常一行写一个，变量的名称在类型的前面，但是相同类型的连续成员变 //量可以写在一行上</span></span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>初始化</li>\n</ul>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">\tage <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//比较推荐指定字段名初始化</span></span><br><span class=\"line\">a := Person&#123;name:<span class=\"string\">\"andes\"</span>,age:<span class=\"string\">\"18\"</span>&#125;</span><br><span class=\"line\">a := Person&#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"andes\"</span>,</span><br><span class=\"line\">    age:<span class=\"number\">18</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a := Person&#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"andes\"</span>,</span><br><span class=\"line\">    age:<span class=\"number\">18</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">//初始化语句的末尾的‘&#125;’独占一行时，最后一个字段的后面一定要带上逗号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Apple <span class=\"keyword\">struct</span>&#123;<span class=\"keyword\">int</span>&#125;</span><br><span class=\"line\">f := Apple&#123;<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">fmt.Println(f)<span class=\"comment\">//#输出&#123;3&#125;</span></span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>匿名字段</li>\n</ul>\n<p>在定义struct的过程中，如果字段只给出字段类型，没有给出字段名，则称这样的字段为匿名字段。</p>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> File <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\t*file</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<ol>\n<li><p>被匿名嵌入的字段必须是命名类型或命名类型的指针，类型字面量不能作为匿名字段使用。</p>\n</li>\n<li><p>匿名字段的字段名默认就是类型名。</p>\n</li>\n<li><p>如果匿名字段是指针类型，则默认的字段名就是指针指向的类型名。</p>\n</li>\n<li><p>一个结构体里面不能同时存在某一类型及其指针类型的匿名字段，因为二者的字段名相等。</p>\n</li>\n<li><p>如果嵌入的字段来自其他包，则需要加上包名，并且必须是其他包可以导出的类型。</p>\n</li>\n<li><p>在GO语言里，成员变量的顺序对于结构体同一性很重要。不同的顺序代表不同的结构体类型。</p>\n</li>\n<li><p>如果一个结构体的成员变量是首字母大写的，那么这个变量是可导出的，这个是GO最主要的访问控制机制。</p>\n</li>\n<li><p>一个结构体可以同时包含可导出和不可导出的成员变量。</p>\n</li>\n<li><p>如果结构体的所有成员都可以比较，那么这个结构体就是可比较的。和其他可比较的类型一样，可比较的结构体类型都可以作为map的键类型。</p>\n</li>\n</ol>\n\n        <h4 id=\"方法\"   >\n          <a href=\"#方法\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>方法</h4>\n      <figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方法的声明和普通函数的声明类似，只是在函数名字前面多了一个参数。这个参数把这个方法绑定到这个参数对应的类型上。</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> geometry</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"math\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Point <span class=\"keyword\">struct</span>&#123;X,Y <span class=\"keyword\">float64</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//普通的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Distance</span><span class=\"params\">(p,q Point)</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> math.Hypot(q.X-p.X,q.Y-p.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Point类型的方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p Point)</span> <span class=\"title\">Distance</span><span class=\"params\">(q Point)</span> <span class=\"title\">float64</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> math.Hypot(q.X-p.X,q.Y-p.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//附加的参数p,称为方法的接收者，用来描述主调方法就像向对象发送消息。</span></span><br><span class=\"line\"><span class=\"comment\">//调用方法的时候，接收者在方法名的前面。这样就和声明保持一致。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//上面两个Distance函数声明没有冲突。</span></span><br><span class=\"line\"><span class=\"comment\">//第一个声明一个包级别的函数，称为 geometry.Distance </span></span><br><span class=\"line\"><span class=\"comment\">//第二个声明一个类型Point的方法，因此它的名字是Point.Distance</span></span><br></pre></td></tr></table></div></figure>\n\n<ol>\n<li>由于方法和字段来自于同一个命名空间，因此在Point结构类型中声明一个叫做X的方法会与字段X冲突，编译器会报错。</li>\n<li>GO和许多其他面向对象的语言不同，它可以将方法绑定到任何类型上。同一个包下的任何类型都可以声明方法，只要它的类型既不是指针类型也不是接口类型。</li>\n<li>不允许本身是指针的类型进行方法声明。</li>\n<li>在任何方法的接收者是指针的情况下，应该避免复制T的实例，因为这么做可能会破坏内部原本的数据。</li>\n</ol>\n\n        <h4 id=\"接口\"   >\n          <a href=\"#接口\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>接口</h4>\n      <figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一个接口类型定义了一套方法，如果一个具体类型要实现该接口，那么必须实现接口类型定义中的所有方法</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Reader <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    Read(p []<span class=\"keyword\">byte</span>)(n <span class=\"keyword\">int</span>,err error)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>接口值</li>\n</ul>\n<p>​        一个接口类型的值（简称接口值）其实有两部分：一个具体类型和该类型的一个值。二者称为接口的动态类型和动态值。</p>\n<p>​        对于像GO这样的静态类型语言，类型仅仅是一个编译时的概念，所以类型不是一个值。在我们的概念模型中，用类型描述符来提供每个类型的具体信息，比如它的名字和方法。对于一个接口值，类型部分就用对应的类型描述符来表述。</p>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> w io.Writer</span><br><span class=\"line\">w = os.Stdout</span><br><span class=\"line\"><span class=\"comment\">//这次复制把一个具体类型隐式转换为一个接口类型，它与对应的显式转换io.Writer(os.Stdout)等价</span></span><br><span class=\"line\"><span class=\"comment\">//转换会转换操作数的类型和值，接口值的动态类型会设置为指针类型 *os.File的类型描述符，它的动态值会设置为 os.Stdout 的副本，即一个指向代表进程的标准输出的os.File类型的指针。</span></span><br></pre></td></tr></table></div></figure>\n\n<p>注意：接口类型是非平凡的。应该仅在能确认接口值包含的动态值可以比较时，才比较接口值。否则会导致崩溃。</p>\n\n        <h4 id=\"反射\"   >\n          <a href=\"#反射\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>反射</h4>\n      <p>####　包和ｇo工具</p>\n<p>众所周知，ＧＯ程序的编译速度比其他语言快，即便从零开始也是如此。这里有三个主要原因。</p>\n<p>第一，所有的导入都必须在每一个源文件的开头显式列出，这样编译器在确定依赖性的时候就不需要读取和处理整个文件；</p>\n<p>第二，包的依赖性形成有向无环图，因为没有环，所以包可以独立甚至并行编译。</p>\n<p>第三，ＧＯ包编译输出的目标文件不仅记录它自己的导出信息，还记录它所依赖包的导出信息。当编译一个包时，编译器必须从每一个导入中读取一个目标文件，但是不会超过这些文件。</p>\n<p>对于准备共享或公开的包，导入路径需要全局唯一。为了避免冲突，除了标准库中的包外，其他包的导入路径应该以互联网域名（组织机构拥有的域名或用于存放包的域名）作为路径的开始，这样也方便查找包。</p>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"encoding/json\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"golang.org/x/net/html\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/go-sql-driver/mysql\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>重命名导入</li>\n</ul>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(</span><br><span class=\"line\">\t<span class=\"string\">\"crypto/rand\"</span></span><br><span class=\"line\">\tmrand <span class=\"string\">\"math/rand\"</span> <span class=\"comment\">//通过指定一个不同的名称mrand就避免了冲突</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>空白导入</li>\n</ul>\n<p>如果导入的包的名字没有在文件中引用，就会产生一个编译错误。</p>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"string\">\"image/png\"</span>\t<span class=\"comment\">//注册PNG解码器</span></span><br></pre></td></tr></table></div></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{"stun":{"shake_file":true,"index_subtitle":false,"canonical":true,"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu360_site_verification":null,"sougou_site_verification":null,"menu":{"home":"/ || fas fa-home","archives":"/archives/ || fas fa-folder-open","categories":"/categories/ || fas fa-layer-group","tags":"/tags/ || fas fa-tags"},"submenu":null,"menu_settings":{"icon_only":false,"text_only":false},"favicon":{"small":"/images/icons/favicon-16x16.png","medium":"/images/icons/favicon-32x32.png"},"pwa":{"enable":false,"manifest":"/manifest.json","theme_color":"#54bcff"},"night_mode":{"enable":true,"button":{"color":"#fafafa","bg_color":"#8c8a8a"},"icon":{"dark":"🌜","light":"🌞"}},"layout":{"content":"768px","sidebar":"300px","content_sidebar_gap":"30px","main_padding":{"default":"20px","tablet":"15px","mobile":"10px"}},"header":{"enable":true,"show_on":{"post":true},"height":"80%","bg_image":{"enable":true,"url":"/images/header.jpg"},"mask":{"enable":true,"opacity":0.5},"nav":{"height":"50px","bg_color":"#333"},"scroll_down_icon":{"enable":false,"name":"fas fa-angle-down","animation":true}},"body":{"bg_image":{"enable":true,"url":"/images/blogbk.jpg","fixed":true,"repeat":false},"mask":{"enable":false,"opacity":{"default":0.1,"night_mode":0.6}}},"footer":{"bg_image":{"enable":false,"url":null},"mask":{"enable":false,"opacity":0.5},"copyright":{"enable":true,"text":null,"since":null,"end":null},"icon":{"enable":true,"name":"fas fa-heart","animation":false,"color":"#ff0000"},"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":false,"icp":null},"custom":{"enable":false,"text":null}},"creative_commons":{"enable":true,"license":"BY-NC-SA","sidebar":true,"post":true,"language":null},"back2top":{"enable":true,"icon":{"name":"fas fa-rocket","rotate":"-45deg","color":"#49b1f5","hover_color":"#fc6423"}},"sidebar":{"enable":true,"position":"right","offsetTop":"20px","horizon_line":false},"author":{"enable":true,"avatar":{"url":"/images/icons/stun-logo.svg","rounded":false,"opacity":1,"animation":"turn"},"motto":"hello world"},"social":{"github":"https://github.com/ || fab fa-github","google":"https://plus.google.com/ || fab fa-google","twitter":"https://twitter.com/ || fab fa-twitter","youtube":"https://youtube.com/ || fab fa-youtube"},"social_setting":{"enable":false,"icon_only":true},"toc":{"enable":true,"list_number":true,"wrap":true,"expand_all":false,"min_depth":1,"max_depth":6},"feed":{"enable":false,"email":null,"rss":null},"reading_progress":{"enable":true,"color":"#fc6423","height":"1px"},"codeblock":{"style":"default","highlight":"light","word_wrap":false},"heading_line":true,"reward":{"enable":false,"alipay":null,"wechat":null},"post_meta":{"icon_only":false,"created":{"enable":true,"icon":"far fa-calendar-plus"},"updated":{"enable":true,"icon":"far fa-calendar-check"},"reading_time":{"enable":false,"icon":"far fa-clock","speed":{"zh":200,"en":80}},"word_count":{"enable":false,"icon":"far fa-file-word"}},"post_list":{"paginate":{"home":true,"archives":false},"cover_image":{"home":false}},"post_widget":{"tags":true,"end_text":{"enable":true,"horizon_line":true},"share":{"enable":false,"label":"Share to: ","target":"qzone, qq, weibo, wechat, douban, linkedin, facebook, twitter, google"}},"stick_top":{"position":"right","icon":"fas fa-thumbtack","rotate":"45deg","color":"#999"},"gitalk":{"enable":false,"owner":null,"repo":null,"client_id":null,"client_secret":null,"admin":null,"distraction_free_mode":false,"language":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"Just go go","avatar":"mp","meta":"nick,mail,link","pageSize":10,"visitor":false,"recordIP":false,"language":null},"minivaline":{"enable":false,"appId":null,"appKey":null,"placeholder":"Write a Comment","adminEmailMd5":null,"math":true,"md":true,"lang":null},"livere":{"enable":false,"uid":null},"disqus":{"enable":false,"shortname":null,"count":true},"utterances":{"enable":false,"owner":null,"repo":null,"mapping":"title","label":"utterances","theme":"github-light","script_url":"https://utteranc.es/client.js"},"busuanzi":{"enable":false,"icon_only":false,"site_uv":{"enable":true,"icon":"fas fa-user"},"site_pv":{"enable":true,"icon":"fas fa-eye"},"post_pv":{"enable":true,"icon":"fas fa-eye"}},"google_analytics":null,"baidu_analytics":null,"tencent_analytics":null,"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"show_stats":true}},"local_search":{"enable":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"canvas_nest":{"enable":true,"color":"0,0,0","opacity":0.6,"count":200,"zIndex":-1},"math":{"enable":false,"per_page":false,"engine":"katex","mathjax":{"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","mhchem":{"enable":false,"mhchem_js":"https://cdn.jsdelivr.net/npm/mathjax-mhchem@3.3.2/mhchem.min.js"}},"katex":{"cdn":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css","copy_tex":{"enable":true,"copy_tex_js":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.min.js","copy_tex_css":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.css"}}},"fancybox":false,"zoom_image":{"enable":true,"mask_color":"rgba(0,0,0,0.6)","gap_aside":"20px"},"gallery_waterfall":{"enable":false,"col_width":"220px","gap_x":"10px","gap_y":"10px"},"lazyload":{"enable":false,"placeholder":"gif"},"quicklink":{"enable":false,"home":true,"archive":true,"delay":true,"timeout":10000,"priority":true,"ignores":["/\\/api\\/?/","uri => uri.includes('.xml')","uri => uri.includes('.zip')","(uri, el) => el.hasAttribute('nofollow')","(uri, el) => el.hasAttribute('noprefetch')"]},"pjax":{"enable":false,"avoid_banner":false,"elements":null,"selectors":null,"switches":null,"switchesOptions":null,"history":true,"scrollTo":false,"scrollRestoration":false,"cacheBust":false,"debug":false,"currentUrlFullReload":false,"timeout":0},"google_adsense":{"enable":false,"client":null,"js_src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"},"external_link":{"icon":{"enable":true,"name":"fas fa-external-link-alt","color":"#aaa"}},"shortcuts":{"switch_post":{"enable":false}},"tag_cloud":{"start_color":"#a4d8fa","end_color":"#49b1f5","min_size":16,"max_size":26,"max_amount":200},"kill_old_ie":{"enable":false,"warning_url":"https://support.dmeng.net/upgrade-your-browser.html"},"css":"css","js":"js","images":"images","icon":{"search":"fas fa-search","localsearch_empty":"far fa-meh","menu_btn":"fas fa-bars","feed_email":"fas fa-envelope","feed_rss":"fas fa-rss","paginator_prev":"fas fa-angle-left","paginator_next":"fas fa-angle-right","read_more_btn":"fas fa-long-arrow-alt-right","post_tags":"fas fa-tag","copy_btn":"fas fa-copy","prompt_success":"fas fa-check-circle","prompt_info":"fas fa-arrow-circle-right","prompt_warning":"fas fa-exclamation-circle","prompt_error":"fas fa-times-circle","valine_visitor":"fas fa-eye","post_heading":"fas fa-link","notetag_default":"fas fa-arrow-circle-right","notetag_success":"fas fa-check-circle","notetag_info":"fas fa-info-circle","notetag_warning":"fas fa-exclamation-circle","notetag_danger":"fas fa-minus-circle"},"cdn":{"fontawesome":null,"jquery":null,"velocity":null,"velocity_ui":null,"gitalk_js":null,"gitalk_css":null,"gitalk_md5":null,"valine":null,"leancloud_storage":null,"minivaline":null,"busuanzi":null,"instantsearch_js":null,"instantsearch_css":null,"canvas_ribbon":null,"canvas_nest":null,"fancybox_js":null,"fancybox_css":null,"masonry":null,"lazyload":null,"quicklink":null,"pjax":null,"share_js":null,"share_css":null},"rootConfig":{"title":"在下的小书架","subtitle":"对一件事理解的越深，就能做的越好！","description":"","author":"zxr","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"stun","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/qingfengzxr/qingfengzxr.github.io","branch":"master","message":"(Site update {{ now('YYYY-MM-DD HH:mm:ss') }})"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"","more":"\n        <h1 id=\"GOLANG\"   >\n          <a href=\"#GOLANG\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>GOLANG</h1>\n      \n        <h4 id=\"GO语言的特性\"   >\n          <a href=\"#GO语言的特性\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>GO语言的特性</h4>\n      <ol>\n<li><p>GO语言是按值调用语言。</p>\n</li>\n<li><p>GO是面向函数的语言，仅管它允许面向对象风格的编程。</p>\n<p>它的面向对象风格是由结构体（复合数据类型）、方法、接口来实现的。</p>\n<p>具体表现为：结构体嵌套，为类型定义方法，接口等</p>\n</li>\n<li><p>就像Python的所有数据类型都是类的思想一样，Go也拥有自己的独特的类型系统，每一个类型都由底层接口定义而来。</p>\n</li>\n</ol>\n\n        <h4 id=\"GO语言的实用功能包\"   >\n          <a href=\"#GO语言的实用功能包\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>GO语言的实用功能包</h4>\n      <ol>\n<li>golang.org/x/net/html:</li>\n</ol>\n<p>它提供了解析HTML的功能。</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n\n        <h4 id=\"变量\"   >\n          <a href=\"#变量\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>变量</h4>\n      <ul>\n<li>短变量声明</li>\n</ul>\n<p>一个容易被忽略但重要的地方是：</p>\n<p>短变量声明不需要声明所有在左边的变量。如果一些变量在同一个词法块中声明，那么对于那些变量，短变量行为等同于赋值。</p>\n<p>在下面的代码中，第一条语句声明了in和err。第二条语句仅仅声明了out,但向已有的err变量赋了值。</p>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">in,err := os.Open(infile)</span><br><span class=\"line\"><span class=\"comment\">//下面的语句和第二条语句联系一起看</span></span><br><span class=\"line\">out,err := os.Create(outfile)</span><br></pre></td></tr></table></div></figure>\n\n<p>短变量声明最少声明一个新变量，否则编译不通过。</p>\n\n        <h4 id=\"slice\"   >\n          <a href=\"#slice\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>slice</h4>\n      <figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//slice操作符s[i:j]</span></span><br><span class=\"line\"><span class=\"comment\">//数据结构如下</span></span><br><span class=\"line\"><span class=\"comment\">// src/runtime/slice.go(go.19.1)</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> slice <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    array unsafe.Pointer <span class=\"comment\">//指向底层数组的指针</span></span><br><span class=\"line\">    <span class=\"built_in\">len</span> <span class=\"keyword\">int</span> <span class=\"comment\">//slice元素数量</span></span><br><span class=\"line\">    <span class=\"built_in\">cap</span> <span class=\"keyword\">int</span> <span class=\"comment\">//底层数组的容量</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<ol>\n<li><p>如果slice的引用超过了被引用对象的容量，即cap(s),那么会导致程序宕机；但是如果slice的引用超出了被引用对象的长度，即len(s),那么最终slice会比原slice长。</p>\n</li>\n<li><p>和数组不同的是，slice无法作比较，因此不能用 == 来检测两个slice是否含有相同的元素。</p>\n</li>\n<li><p>slice需要做深度比较，因此不能用slice作为map的键。</p>\n</li>\n<li><p>slice唯一允许的比较操作是和nil做比较。slice类型的零值是nil。值为nil的slice没有对应的底层数组。值得注意的是：值为nil的slice长度和容量都是零，但是也有非nil的slice长度和容量也是零，例如[]int{}或者make([]int,3)[3:0]。</p>\n</li>\n</ol>\n\n        <h4 id=\"map\"   >\n          <a href=\"#map\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>map</h4>\n      <figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个map</span></span><br><span class=\"line\">ages = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>) <span class=\"comment\">//创建了一个键为string值为int的map</span></span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\">ages := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"alice\"</span>:<span class=\"number\">31</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"charlie\"</span>:<span class=\"number\">34</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//or </span></span><br><span class=\"line\">ages[<span class=\"string\">\"alice\"</span>] = <span class=\"number\">31</span></span><br></pre></td></tr></table></div></figure>\n\n<ol>\n<li>map元素不是一个变量，不可以获取它的地址</li>\n<li>map使用给定的键来查找元素，如果对应的元素不存在，就返回值类型的零值</li>\n</ol>\n\n        <h4 id=\"函数\"   >\n          <a href=\"#函数\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>函数</h4>\n      <ul>\n<li>函数定义</li>\n</ul>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">funcName</span><span class=\"params\">(param-list)</span><span class=\"params\">(result-list)</span></span>&#123;</span><br><span class=\"line\">\tfunction-body</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>函数签名</li>\n</ul>\n<p>函数类型又叫函数签名，一个函数的类型就是函数定义首行去掉函数名、参数名和{，可以使用fmt.Printf的“%T”格式化参数打印函数类型。</p>\n<p>两个函数类型相同的条件是：拥有相同形参列表和返回值列表（列表元素的次序、个数和类型都相同），形参名可以不同。</p>\n<p>可以用type定义函数类型，函数类型变量可以作为函数的参数或者返回值。</p>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"%T\\n\"</span>, add) <span class=\"comment\">// func(int,int) int</span></span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">(a,b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sub</span><span class=\"params\">(a,b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a-b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Op <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span> //定义一个函数类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">do</span><span class=\"params\">(f Op, a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123; <span class=\"comment\">//定义一个函数，第一个参数是函数类型Op</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> f(a, b) <span class=\"comment\">//函数类型变量可以直接用来进行函数调用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    a := do(add,<span class=\"number\">1</span>,<span class=\"number\">2</span>) <span class=\"comment\">//函数名add可以当作相同函数类型形参，不需要强制类型转换</span></span><br><span class=\"line\">    fmt.Println(a)</span><br><span class=\"line\">    s := do(sub,<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">    fmt.Println(s)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>：不知道为什么，很有一种Python中装饰器的味道，暂时来说不知道在go语言的开发中会有怎样的用途，适用于怎样的场景，但感觉用途挺有意思的。</p>\n<p><strong>注意：</strong></p>\n<ol>\n<li>GO函数使用 caller-save 模式，即由调用者负责保存寄存器，由主调函数保存和恢复现场。</li>\n<li>GO内嵌汇编和反汇编产生的代码并不是一一对应的，汇编编译器对内嵌汇编程序自动做了调整，主要差别就是增加了保护现场，以及函数调用前的保持PC、SP偏移地址重定位等逻辑。</li>\n<li>GO函数调用前已经为返回值和参数分配了栈空间，分配顺序是从右向左的，先是返回值，然后是参数。</li>\n<li>函数的多值返回是主调函数预先分配好存放空间，然后被调函数执行时将返回值复制到该返回位置实现。</li>\n<li>GO语言是按值调用的语言，调用函数接收到的是实参的一个副本，并不是实参的引用。</li>\n<li>GO语言没有默认参数值的概念也不能指定实参名。</li>\n</ol>\n\n        <h4 id=\"结构体\"   >\n          <a href=\"#结构体\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>结构体</h4>\n      <ul>\n<li>示例</li>\n</ul>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Employee <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\tID\t\t\t\t<span class=\"keyword\">int</span></span><br><span class=\"line\">    Name,Address\t<span class=\"keyword\">string</span></span><br><span class=\"line\">    DoB\t\t\t\ttime.Time</span><br><span class=\"line\">    Position\t\t<span class=\"keyword\">string</span></span><br><span class=\"line\">    Salary\t\t\t<span class=\"keyword\">int</span></span><br><span class=\"line\">    ManagerID\t\t<span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//结构体的成员变量通常一行写一个，变量的名称在类型的前面，但是相同类型的连续成员变 //量可以写在一行上</span></span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>初始化</li>\n</ul>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">string</span></span><br><span class=\"line\">\tage <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//比较推荐指定字段名初始化</span></span><br><span class=\"line\">a := Person&#123;name:<span class=\"string\">\"andes\"</span>,age:<span class=\"string\">\"18\"</span>&#125;</span><br><span class=\"line\">a := Person&#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"andes\"</span>,</span><br><span class=\"line\">    age:<span class=\"number\">18</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a := Person&#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"andes\"</span>,</span><br><span class=\"line\">    age:<span class=\"number\">18</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">//初始化语句的末尾的‘&#125;’独占一行时，最后一个字段的后面一定要带上逗号</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Apple <span class=\"keyword\">struct</span>&#123;<span class=\"keyword\">int</span>&#125;</span><br><span class=\"line\">f := Apple&#123;<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">fmt.Println(f)<span class=\"comment\">//#输出&#123;3&#125;</span></span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>匿名字段</li>\n</ul>\n<p>在定义struct的过程中，如果字段只给出字段类型，没有给出字段名，则称这样的字段为匿名字段。</p>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> File <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">\t*file</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<ol>\n<li><p>被匿名嵌入的字段必须是命名类型或命名类型的指针，类型字面量不能作为匿名字段使用。</p>\n</li>\n<li><p>匿名字段的字段名默认就是类型名。</p>\n</li>\n<li><p>如果匿名字段是指针类型，则默认的字段名就是指针指向的类型名。</p>\n</li>\n<li><p>一个结构体里面不能同时存在某一类型及其指针类型的匿名字段，因为二者的字段名相等。</p>\n</li>\n<li><p>如果嵌入的字段来自其他包，则需要加上包名，并且必须是其他包可以导出的类型。</p>\n</li>\n<li><p>在GO语言里，成员变量的顺序对于结构体同一性很重要。不同的顺序代表不同的结构体类型。</p>\n</li>\n<li><p>如果一个结构体的成员变量是首字母大写的，那么这个变量是可导出的，这个是GO最主要的访问控制机制。</p>\n</li>\n<li><p>一个结构体可以同时包含可导出和不可导出的成员变量。</p>\n</li>\n<li><p>如果结构体的所有成员都可以比较，那么这个结构体就是可比较的。和其他可比较的类型一样，可比较的结构体类型都可以作为map的键类型。</p>\n</li>\n</ol>\n\n        <h4 id=\"方法\"   >\n          <a href=\"#方法\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>方法</h4>\n      <figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方法的声明和普通函数的声明类似，只是在函数名字前面多了一个参数。这个参数把这个方法绑定到这个参数对应的类型上。</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> geometry</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"math\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Point <span class=\"keyword\">struct</span>&#123;X,Y <span class=\"keyword\">float64</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//普通的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Distance</span><span class=\"params\">(p,q Point)</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> math.Hypot(q.X-p.X,q.Y-p.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Point类型的方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p Point)</span> <span class=\"title\">Distance</span><span class=\"params\">(q Point)</span> <span class=\"title\">float64</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> math.Hypot(q.X-p.X,q.Y-p.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//附加的参数p,称为方法的接收者，用来描述主调方法就像向对象发送消息。</span></span><br><span class=\"line\"><span class=\"comment\">//调用方法的时候，接收者在方法名的前面。这样就和声明保持一致。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//上面两个Distance函数声明没有冲突。</span></span><br><span class=\"line\"><span class=\"comment\">//第一个声明一个包级别的函数，称为 geometry.Distance </span></span><br><span class=\"line\"><span class=\"comment\">//第二个声明一个类型Point的方法，因此它的名字是Point.Distance</span></span><br></pre></td></tr></table></div></figure>\n\n<ol>\n<li>由于方法和字段来自于同一个命名空间，因此在Point结构类型中声明一个叫做X的方法会与字段X冲突，编译器会报错。</li>\n<li>GO和许多其他面向对象的语言不同，它可以将方法绑定到任何类型上。同一个包下的任何类型都可以声明方法，只要它的类型既不是指针类型也不是接口类型。</li>\n<li>不允许本身是指针的类型进行方法声明。</li>\n<li>在任何方法的接收者是指针的情况下，应该避免复制T的实例，因为这么做可能会破坏内部原本的数据。</li>\n</ol>\n\n        <h4 id=\"接口\"   >\n          <a href=\"#接口\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>接口</h4>\n      <figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一个接口类型定义了一套方法，如果一个具体类型要实现该接口，那么必须实现接口类型定义中的所有方法</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Reader <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">    Read(p []<span class=\"keyword\">byte</span>)(n <span class=\"keyword\">int</span>,err error)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>接口值</li>\n</ul>\n<p>​        一个接口类型的值（简称接口值）其实有两部分：一个具体类型和该类型的一个值。二者称为接口的动态类型和动态值。</p>\n<p>​        对于像GO这样的静态类型语言，类型仅仅是一个编译时的概念，所以类型不是一个值。在我们的概念模型中，用类型描述符来提供每个类型的具体信息，比如它的名字和方法。对于一个接口值，类型部分就用对应的类型描述符来表述。</p>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> w io.Writer</span><br><span class=\"line\">w = os.Stdout</span><br><span class=\"line\"><span class=\"comment\">//这次复制把一个具体类型隐式转换为一个接口类型，它与对应的显式转换io.Writer(os.Stdout)等价</span></span><br><span class=\"line\"><span class=\"comment\">//转换会转换操作数的类型和值，接口值的动态类型会设置为指针类型 *os.File的类型描述符，它的动态值会设置为 os.Stdout 的副本，即一个指向代表进程的标准输出的os.File类型的指针。</span></span><br></pre></td></tr></table></div></figure>\n\n<p>注意：接口类型是非平凡的。应该仅在能确认接口值包含的动态值可以比较时，才比较接口值。否则会导致崩溃。</p>\n\n        <h4 id=\"反射\"   >\n          <a href=\"#反射\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>反射</h4>\n      <p>####　包和ｇo工具</p>\n<p>众所周知，ＧＯ程序的编译速度比其他语言快，即便从零开始也是如此。这里有三个主要原因。</p>\n<p>第一，所有的导入都必须在每一个源文件的开头显式列出，这样编译器在确定依赖性的时候就不需要读取和处理整个文件；</p>\n<p>第二，包的依赖性形成有向无环图，因为没有环，所以包可以独立甚至并行编译。</p>\n<p>第三，ＧＯ包编译输出的目标文件不仅记录它自己的导出信息，还记录它所依赖包的导出信息。当编译一个包时，编译器必须从每一个导入中读取一个目标文件，但是不会超过这些文件。</p>\n<p>对于准备共享或公开的包，导入路径需要全局唯一。为了避免冲突，除了标准库中的包外，其他包的导入路径应该以互联网域名（组织机构拥有的域名或用于存放包的域名）作为路径的开始，这样也方便查找包。</p>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"encoding/json\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"golang.org/x/net/html\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/go-sql-driver/mysql\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>重命名导入</li>\n</ul>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(</span><br><span class=\"line\">\t<span class=\"string\">\"crypto/rand\"</span></span><br><span class=\"line\">\tmrand <span class=\"string\">\"math/rand\"</span> <span class=\"comment\">//通过指定一个不同的名称mrand就避免了冲突</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>空白导入</li>\n</ul>\n<p>如果导入的包的名字没有在文件中引用，就会产生一个编译错误。</p>\n<figure class=\"highlight go\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"string\">\"image/png\"</span>\t<span class=\"comment\">//注册PNG解码器</span></span><br></pre></td></tr></table></div></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"Golang - 语言特性","date":"2020-07-17T03:56:11.000Z","_content":"# GOLANG 语言特性\n","source":"_posts/golang/characteristic/note.md","raw":"---\ntitle: Golang - 语言特性\ndate: 2020-07-17 11:56:11\ncategories:\n- [golang,characteristic]\ntags:\n- golang\n- programming_language\n---\n# GOLANG 语言特性\n","slug":"golang/characteristic/note","published":1,"updated":"2020-07-17T12:52:26.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjcobbbl001chelz51legtdt","content":"\n        <h1 id=\"GOLANG-语言特性\"   >\n          <a href=\"#GOLANG-语言特性\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>GOLANG 语言特性</h1>\n      ","site":{"data":{"stun":{"shake_file":true,"index_subtitle":false,"canonical":true,"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu360_site_verification":null,"sougou_site_verification":null,"menu":{"home":"/ || fas fa-home","archives":"/archives/ || fas fa-folder-open","categories":"/categories/ || fas fa-layer-group","tags":"/tags/ || fas fa-tags"},"submenu":null,"menu_settings":{"icon_only":false,"text_only":false},"favicon":{"small":"/images/icons/favicon-16x16.png","medium":"/images/icons/favicon-32x32.png"},"pwa":{"enable":false,"manifest":"/manifest.json","theme_color":"#54bcff"},"night_mode":{"enable":true,"button":{"color":"#fafafa","bg_color":"#8c8a8a"},"icon":{"dark":"🌜","light":"🌞"}},"layout":{"content":"768px","sidebar":"300px","content_sidebar_gap":"30px","main_padding":{"default":"20px","tablet":"15px","mobile":"10px"}},"header":{"enable":true,"show_on":{"post":true},"height":"80%","bg_image":{"enable":true,"url":"/images/header.jpg"},"mask":{"enable":true,"opacity":0.5},"nav":{"height":"50px","bg_color":"#333"},"scroll_down_icon":{"enable":false,"name":"fas fa-angle-down","animation":true}},"body":{"bg_image":{"enable":true,"url":"/images/blogbk.jpg","fixed":true,"repeat":false},"mask":{"enable":false,"opacity":{"default":0.1,"night_mode":0.6}}},"footer":{"bg_image":{"enable":false,"url":null},"mask":{"enable":false,"opacity":0.5},"copyright":{"enable":true,"text":null,"since":null,"end":null},"icon":{"enable":true,"name":"fas fa-heart","animation":false,"color":"#ff0000"},"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":false,"icp":null},"custom":{"enable":false,"text":null}},"creative_commons":{"enable":true,"license":"BY-NC-SA","sidebar":true,"post":true,"language":null},"back2top":{"enable":true,"icon":{"name":"fas fa-rocket","rotate":"-45deg","color":"#49b1f5","hover_color":"#fc6423"}},"sidebar":{"enable":true,"position":"right","offsetTop":"20px","horizon_line":false},"author":{"enable":true,"avatar":{"url":"/images/icons/stun-logo.svg","rounded":false,"opacity":1,"animation":"turn"},"motto":"hello world"},"social":{"github":"https://github.com/ || fab fa-github","google":"https://plus.google.com/ || fab fa-google","twitter":"https://twitter.com/ || fab fa-twitter","youtube":"https://youtube.com/ || fab fa-youtube"},"social_setting":{"enable":false,"icon_only":true},"toc":{"enable":true,"list_number":true,"wrap":true,"expand_all":false,"min_depth":1,"max_depth":6},"feed":{"enable":false,"email":null,"rss":null},"reading_progress":{"enable":true,"color":"#fc6423","height":"1px"},"codeblock":{"style":"default","highlight":"light","word_wrap":false},"heading_line":true,"reward":{"enable":false,"alipay":null,"wechat":null},"post_meta":{"icon_only":false,"created":{"enable":true,"icon":"far fa-calendar-plus"},"updated":{"enable":true,"icon":"far fa-calendar-check"},"reading_time":{"enable":false,"icon":"far fa-clock","speed":{"zh":200,"en":80}},"word_count":{"enable":false,"icon":"far fa-file-word"}},"post_list":{"paginate":{"home":true,"archives":false},"cover_image":{"home":false}},"post_widget":{"tags":true,"end_text":{"enable":true,"horizon_line":true},"share":{"enable":false,"label":"Share to: ","target":"qzone, qq, weibo, wechat, douban, linkedin, facebook, twitter, google"}},"stick_top":{"position":"right","icon":"fas fa-thumbtack","rotate":"45deg","color":"#999"},"gitalk":{"enable":false,"owner":null,"repo":null,"client_id":null,"client_secret":null,"admin":null,"distraction_free_mode":false,"language":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"Just go go","avatar":"mp","meta":"nick,mail,link","pageSize":10,"visitor":false,"recordIP":false,"language":null},"minivaline":{"enable":false,"appId":null,"appKey":null,"placeholder":"Write a Comment","adminEmailMd5":null,"math":true,"md":true,"lang":null},"livere":{"enable":false,"uid":null},"disqus":{"enable":false,"shortname":null,"count":true},"utterances":{"enable":false,"owner":null,"repo":null,"mapping":"title","label":"utterances","theme":"github-light","script_url":"https://utteranc.es/client.js"},"busuanzi":{"enable":false,"icon_only":false,"site_uv":{"enable":true,"icon":"fas fa-user"},"site_pv":{"enable":true,"icon":"fas fa-eye"},"post_pv":{"enable":true,"icon":"fas fa-eye"}},"google_analytics":null,"baidu_analytics":null,"tencent_analytics":null,"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"show_stats":true}},"local_search":{"enable":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"canvas_nest":{"enable":true,"color":"0,0,0","opacity":0.6,"count":200,"zIndex":-1},"math":{"enable":false,"per_page":false,"engine":"katex","mathjax":{"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","mhchem":{"enable":false,"mhchem_js":"https://cdn.jsdelivr.net/npm/mathjax-mhchem@3.3.2/mhchem.min.js"}},"katex":{"cdn":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css","copy_tex":{"enable":true,"copy_tex_js":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.min.js","copy_tex_css":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.css"}}},"fancybox":false,"zoom_image":{"enable":true,"mask_color":"rgba(0,0,0,0.6)","gap_aside":"20px"},"gallery_waterfall":{"enable":false,"col_width":"220px","gap_x":"10px","gap_y":"10px"},"lazyload":{"enable":false,"placeholder":"gif"},"quicklink":{"enable":false,"home":true,"archive":true,"delay":true,"timeout":10000,"priority":true,"ignores":["/\\/api\\/?/","uri => uri.includes('.xml')","uri => uri.includes('.zip')","(uri, el) => el.hasAttribute('nofollow')","(uri, el) => el.hasAttribute('noprefetch')"]},"pjax":{"enable":false,"avoid_banner":false,"elements":null,"selectors":null,"switches":null,"switchesOptions":null,"history":true,"scrollTo":false,"scrollRestoration":false,"cacheBust":false,"debug":false,"currentUrlFullReload":false,"timeout":0},"google_adsense":{"enable":false,"client":null,"js_src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"},"external_link":{"icon":{"enable":true,"name":"fas fa-external-link-alt","color":"#aaa"}},"shortcuts":{"switch_post":{"enable":false}},"tag_cloud":{"start_color":"#a4d8fa","end_color":"#49b1f5","min_size":16,"max_size":26,"max_amount":200},"kill_old_ie":{"enable":false,"warning_url":"https://support.dmeng.net/upgrade-your-browser.html"},"css":"css","js":"js","images":"images","icon":{"search":"fas fa-search","localsearch_empty":"far fa-meh","menu_btn":"fas fa-bars","feed_email":"fas fa-envelope","feed_rss":"fas fa-rss","paginator_prev":"fas fa-angle-left","paginator_next":"fas fa-angle-right","read_more_btn":"fas fa-long-arrow-alt-right","post_tags":"fas fa-tag","copy_btn":"fas fa-copy","prompt_success":"fas fa-check-circle","prompt_info":"fas fa-arrow-circle-right","prompt_warning":"fas fa-exclamation-circle","prompt_error":"fas fa-times-circle","valine_visitor":"fas fa-eye","post_heading":"fas fa-link","notetag_default":"fas fa-arrow-circle-right","notetag_success":"fas fa-check-circle","notetag_info":"fas fa-info-circle","notetag_warning":"fas fa-exclamation-circle","notetag_danger":"fas fa-minus-circle"},"cdn":{"fontawesome":null,"jquery":null,"velocity":null,"velocity_ui":null,"gitalk_js":null,"gitalk_css":null,"gitalk_md5":null,"valine":null,"leancloud_storage":null,"minivaline":null,"busuanzi":null,"instantsearch_js":null,"instantsearch_css":null,"canvas_ribbon":null,"canvas_nest":null,"fancybox_js":null,"fancybox_css":null,"masonry":null,"lazyload":null,"quicklink":null,"pjax":null,"share_js":null,"share_css":null},"rootConfig":{"title":"在下的小书架","subtitle":"对一件事理解的越深，就能做的越好！","description":"","author":"zxr","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"stun","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/qingfengzxr/qingfengzxr.github.io","branch":"master","message":"(Site update {{ now('YYYY-MM-DD HH:mm:ss') }})"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"","more":"\n        <h1 id=\"GOLANG-语言特性\"   >\n          <a href=\"#GOLANG-语言特性\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>GOLANG 语言特性</h1>\n      "},{"title":"mysql基础知识","date":"2020-07-17T03:56:11.000Z","_content":"\n[TOC]\n\n### 声明\n\n以下所有相关命令行内容均基于ubuntu18.04。具体学习过程源自书籍《MySQL必知必会》。\n\n\n\n### 关系数据库的基础知识\n\n* 关系表\n\n理解关系表的最好办法是看一个现实的例子。\n\n```c\n/*\n假如有一个包含产品目录的数据库表，其中每种类别的物品占一行。对于每种物品要存储的信息包括产品描述和价格，以及生产该产品的供应商信息。\n现在，假如有由同一供应商生产的多种物品，那么在何处存储供应商信息（如，供应商名、地址、联系方法等）呢？将这些数据与产品信息分开存储有如下几个重要的理由。\n\n1. 因为同一个供应商生产的每个产品的供应商信息都是相同的，对每个产品重复此信息既浪费时间又浪费空间。\n2. 如果供应商信息改变，只需改变一次即可。\n3. 如果有重复数据（即每种产品都存储供应商信息），很难保证每次输入该数据的方式都相同。不一致的数据在报表中很\t  难利用。\n\n*/\n```\n\n1. **相同的数据出现多次决不是一件好事，此因素时关系数据库设计的基础。**\n\n2. **关系表的设计就是要保证把信息分解成多个表，一类数据一个表。各表通过某些常用的值（即关系设计中的关系）互相关联。**\n\n3. 关系数据库的可伸缩性远比非关系数据库要好。\n\n**主键**：唯一标识表中每行的这个列（或这组列）称为主键。\n\n**外键**：外键为某个表中的一列，它包含另一个表的主键值，定义了两个表之间的关系。\n\n\n\n\n\n\n\n### MySQL的登录\n\n```\nmysql -h 127.0.0.1 -u root -p \n```\n\n参数说明：\n\n- **-h** : 指定客户端所要登录的 MySQL 主机名, 登录本机(localhost 或 127.0.0.1)该参数可以省略;\n- **-u** : 登录的用户名;\n- **-p** : 告诉服务器将会使用一个密码来登录, 如果所要登录的用户名密码为空, 可以忽略此选项。\n\n\n\n### 建立一个新的数据库\n\n```mysql\nCREATE DATABASE learning;\n```\n\n这样就创建了一个名为 _learning_ 的数据库（数据源）\n\n### 使用一个指定的数据库\n\n```mysql\nUSE learning;\n```\n\n### 执行SQL脚本文件\n\n```mysql\nsource XX.sql\n```\n\n注意：XX.sql 需要路径支持\n\n### 显示内容\n\n```mysql\nSHOW DATABASES; //显示存在的数据库\nSHOW TABLES;\t//显示当前数据库存在的表\nSHOW COLUMNS FROM TABLES;\t//显示表列\n```\n\n\n\n### 检索数据\n\n1. **数据的格式化是一个表示问题，而不是一个检索问题**\n\n\n\n* 检索单个列\n\n```mysql\nSELECT 待检索列名 FROM 预检索表名;\n```\n\n* 检索多个列\n\n```mysql\nSELECT 待检索列名1,待检索列名2,待检索列名3,...,最后一个待检索列名 FROM 预检索表名;\n```\n\n* 检索所有列\n\n```mysql\nSELECT * FROM 预检索表名;\t\t\n```\n\n* 检索时只返回不同的值\n\n```mysql\nSELECT DISTINCT 待检索列名 FROM 预检索表名;\n```\n\n注： DISTINCT 关键字应用于所有列而不是它的前置列。意味着当检索了多个列时，只有每个列的所有行都不同，才被检索出来。\n\n* 限制检索结果数量\n\n```mysql\nSELECT 待检索列名 FROM 预检索表名 LIMIT 检索开始位置，要检索的行数;\n```\n\n注： 检索开始位置可省略，默认为0；如：\n\n```Mysql\nSELECT prod_name FROM products LIMIT 5;\n```\n\n返回不多于5行，从第  行0  开始（位置参数为0）。\n\n\n\n### 排序检索数据\n\n1. **关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有意义**\n\n* **子句**\n\nSQL语句由子句组成，有些是必需的，有些是可选的。一个子句通常由一个关键字和所提供的数据组成。当前最明显的例子便是 `SELECT `语句的 ```FROM``` 子句。\n\n* 字句的顺序\n\n在给出 `ORDER BY` 字句时，应该保证它位于 `FROM` 字句之后。如果使用 `LIMIT` ,它必须位于 `ORDER BY` 之后。使用子句的次序不对将产生错误消息。\n\n* 单列排序\n\n```mysql\nSELECT 待检索列名 FROM 预检索表名 ORDER BY 带检索列名;\n```\n\n注： 可以通过非选择检索列进行排序。\n\n* 多列排序\n\n```mysql\nSELECT 待检索列名1,待检索列名2,待检索列名3 FROM 预检索表名 ORDER BY 待检索列名2,待检索列名3;\n```\n\n在上述排序中，将优先按照  _待检索列名2_  进行排序，仅在多个行具有相同的  _待检索列名2_  时才按 _待检索列名3_\n\n进行再排序。\n\n* 指定排序顺序\n\n```mysql\nSELECT 待检索列名1,待检索列名2,待检索列名3 FROM 预检索表名 ORDER BY 待检索列名1 DESC,待检索列名2;\n```\n\n数据排序默认以升序排序进行。当要进行 **降序排序** 时，必须指定 ```DESC``` 关键字。 **升序排序** 的关键字为 ```ASC```。\n\n注意： 与 ```DISTINCT``` 关键字不同，```DESC``` 关键字只应用到直接位于其前面的列名。在上述排序命令中，降序只对待检索列名1进行指定，而待检索列名2仍然以默认的升序进行排序。\n\n\n\n### 过滤数据\n\n只检索所需数据需要指定 _搜索条件(search criteria)_ ，搜索条件也成为 _过滤条件_。\n\n1. **MySQL在执行匹配时默认不区分大小写**\n\n* 子句顺序\n\n`WHERE`子句在表名`FROM`子句之后给出。\n\n在同时使用了 `ORDER BY` 子句和 `WHERE` 子句时，应该让 `ORDER BY` 位于 `WHERE` 之后，否则会产生错误。\n\n* WHERE子句条件操作符\n\n[][]\n\n| 操作符  | 说明             |\n| ------- | ---------------- |\n| =       | 等于             |\n| <>      | 不等于           |\n| !=      | 不等于           |\n| <       | 小于             |\n| <=      | 小于等于         |\n| >       | 大于             |\n| >=      | 大于等于         |\n| BETWEEN | 在指定两个值之间 |\n\n* 检查单个值\n\n```mysql\nSELECT 待检索列名1，待检索列名2 FROM 预检索表名 WHERE 待匹配列名 操作符 范围值;\n```\n\n注：待匹配列名 可以是 选择检索列也可以是非选择检索列。\n\n比较字符串时需要用单引号来进行限定。数值比较则不需要引号。如：\n\n```mysql\nSELECT prod_name,prod_price FROM products WHERE prod_name = 'fuses';\nSELECT vend_id,prod_name FROM products WHERE vend_id <> 1003;\n```\n\n* 检测范围值\n\n```mysql\nSELECT 待检索列名1，待检索列名2 FROM 预检索表名 WHERE 待匹配列名 BETWEEN 开始值 AND 结束值;\n```\n\n注： `BETWEEN` 匹配范围中所有的值，包括指定的开始值和结束值。\n\n* 空值检查\n\n在创建表时，可以指定其中的列是否可以不包含值。在一个列不包含值时，称其为包含空值 **NULL**。\n\n**NULL** 无值，它与字段包含0、空字符串或仅仅包含空格不同。\n\n```MYSQL\nSELECT 待检索列名1 FROM 预检索表名 WHERE 待匹配列名 IS NULL;\t \n```\n\nNULL与不匹配：\n\n在通过过滤选择出不具有特定值的行时，你可能希望返回具有NULL值的行。但是，不行。\n\n因为未知具有特殊含义，数据库不知道他们是否匹配，所以在匹配过滤或者不匹配过滤时不返回它们。\n\n因此，在过滤数据时，一定要验证返回数据中确实给出了被过滤列具有NULL的行。\n\n* 组合条件检查\n\n1. **MySQL支持使用NOT对IN、BETWEEN和EXISTS子句取反**\n\n| 逻辑操作符 | 含义         |\n| ---------- | ------------ |\n| AND        | 与           |\n| OR         | 或           |\n| NOT        | 非           |\n| IN         | 指定条件范围 |\n\n计算次序：SQL像大多数语言一样，优先处理`AND`操作符。因此要使用圆括号明确地分组相应的操作符。示例：\n\n```mysql\nSELECT prod_name,prod_price FROM products \nWHERE (vend_id = 1002 OR vend_id = 1003) AND prod_price >= 10;\n\nSELECT prod_name,prod_price FROM products WHERE vend_id IN (1002,1003) ORDER BY prod_name;\n\nSELECT prod_name,prod_price FROM products WHERE vend_id NOT IN (1002,1003);\n```\n\n* 通配符过滤\n\n**通配符**: 用来匹配值的一部分的特殊字符。\n\n**搜索模式**:由字面值、通配符或者两者组合而成的搜索条件。\n\n为在搜索子句中使用通配符，必须使用`LIKE`操作符。`LIKE`指示MySQL，后跟的搜索模式利用通配符匹配而不是直接使用相等匹配进行比较。\n\n**使用通配符的技巧**:\n\n1. 不要过度使用通配符。在能达到目的的情况下优先使用其他操作符。\n2. 除非绝对必要，不要把通配符放在搜索模式的开始处。把通配符置于搜索模式的开始处，搜索起来最慢。\n\n| 通配符 | 作用                            |\n| ------ | ------------------------------- |\n| %      | 任何字符出现任意次数            |\n| _      | 和%作用一样，但是只匹配单个字符 |\n\n注： 通配符不可以匹配 NULL。\n\n```MYSQL\nSELECT 待检索列名1，待检索列名2 FROM 预检索表名 WHERE 待匹配列名 LIKE '%sample';\n```\n\n\n\n### 正则表达式搜索\n\nMySQL使用`WHERE`对正则表达式提供了初步的支持，允许你指定正则表达式，过滤`SELECT`检索出来的数据。\n\n1. **MySQL仅支持多数正则表达式实现的一个很小的子集**。\n\n2. **`LIKE`与`REGEXP`之间存在着一个终于差别，`LIKE`匹配整个列，而`REGEXP`在列值中进行匹配**。\n\n3. **MySQL中的正则表达式匹配不区分大小写。为区分大小写需要使用`BINARY`关键字。如：\n\n    `WHERE prod_name REGEXP BINARY 'JetPack .000'`\n\n* 基本字符匹配\n\n```mysql\nSELECT prod_name FROM products WHERE prod_name REGEXP '.000' ORDER BY prod_name;\n```\n\n示例输出:\n\n```shell\n+--------------+\n| prod_name    |\n+--------------+\n| JetPack 1000 |\n| JetPack 2000 |\n+--------------+\n```\n\n* 匹配几个字符之一\n\n```mysql\nSELECT prod_name FROM products WHERE prod_name REGEXP '[123] Ton' ORDER BY prod_name;\n```\n\n示例输出：\n\n```shell\n+-------------+\n| prod_name   |\n+-------------+\n| 1 ton anvil |\n| 2 ton anvil |\n+-------------+\n```\n\n* 匹配特殊字符\n\nMySQL的转义使用`\\\\`两个反斜杠。MySQL自己解析一个，正则表达式解析另一个。\n\n| 空白元字符 | 说明     |\n| ---------- | -------- |\n| \\\\\\f       | 换页     |\n| \\\\\\n       | 换行     |\n| \\\\\\r       | 回车     |\n| \\\\\\t       | 制表符   |\n| \\\\\\v       | 纵向制表 |\n\n说明：每个元字符前面**只有两个反斜杠**，此处为了抵消掉markdown的语法，写了三个。\n\n| 重复元字符 | 说明                          |\n| ---------- | ----------------------------- |\n| *          | 0个或多个匹配                 |\n| +          | 1个或多个匹配（ 等于{1,} ）   |\n| ?          | 0个或1个匹配 （ 等于{0,,1} ） |\n| {n}        | 指定数目的匹配                |\n| {n,}       | 不少于指定数目的匹配          |\n| {n,m}      | 匹配数目的范围（m不超过255）  |\n\n* 预定义字符集，字符类\n\n| 字符类     | 说明                                                 |\n| ---------- | ---------------------------------------------------- |\n| [:alnum:]  | 任意字母和数字(同[a-ZA-Z0-9])                        |\n| [:alpha:]  | 任意字符([a-zA-Z])                                   |\n| [:blank:]  | 空格和制表(同[\\\\\\t])                                 |\n| [:cntrl:]  | ASCII控制字符(ASCII0到31和127)                       |\n| [:digit:]  | 任意数字(同[0-9])                                    |\n| [:graph:]  | 与[:print:]相同，但不包括空格                        |\n| [:lower:]  | 任意小写字母(同[a-z])                                |\n| [:print:]  | 任意可打印字符                                       |\n| [:punct:]  | 既不在[:alnum:]又不在[:cntrl:]中的任意字符           |\n| [:space:]  | 包括空格在内的任意空白字符(同[\\\\\\f\\\\\\n\\\\\\r\\\\\\t\\\\\\v]) |\n| [:upper:]  | 任意大写字母(同[A-Z])                                |\n| [:xdigit:] | 任意十六进制数字(同[a-fA-F0-9])                      |\n\n说明：每个双反斜杠**只有两个反斜杠**，此处为了抵消掉markdown的语法，写了三个。\n\n* 定位元字符\n\n| 定位元字符 | 说明       |\n| ---------- | ---------- |\n| ^          | 文本的开始 |\n| $          | 文本的结尾 |\n| [[:<:]]    | 词的开始   |\n| [[:>:]]    | 词的结尾   |\n\n* 简单的正则表达式测试\n\n可以在不使用数据库表的情况下使用`SELECT`来测试正则表达式。`REGEXP`检查总是返回0(没有匹配)或者1(匹配)。可以用带文字串的REFEXP来测试表达式，并试验它们。如：\n\n```mysql\nSELECT 'hello' REGEXP '[0-9]';\n```\n\n示例输出：\n\n```shell\n+------------------------+\n| 'hello' REGEXP '[0-9]' |\n+------------------------+\n|                      0 |\n+------------------------+\n```\n\n\n\n### 创建计算字段\n\n* 拼接\n\n拼接是指将值联结到一起构成单个值。在MySQL的`SELECT`语句中，可使用`Concat()`函数来拼接两个列。\n\n```mysql\nSELECT Concat(vend_name,' (',vend_country,')') FROM vendors ORDER BY vend_name;\n```\n\n示例输出:\n\n```shell\n+-----------------------------------------+\n| Concat(vend_name,' (',vend_country,')') |\n+-----------------------------------------+\n| ACME (USA)                              |\n| Anvils R Us (USA)                       |\n| Furball Inc. (USA)                      |\n| Jet Set (England)                       |\n| Jouets Et Ours (France)                 |\n| LT Supplies (USA)                       |\n+-----------------------------------------+\n```\n\n* 格式调整\n\n可以使用`Trim()`函数去掉串左右两边的空格。`LTrim()`去掉串左边的空格。`RTtim()`去掉串右边的空格。\n\n```mysql\nSELECT Concat(RTrim(vend_name),' (',RTrim(vend_country),')') FROM vendors ORDER BY vend_name;\n```\n\n* 使用别名(alias)\n\n别名：一个字段或值的替换名。别名使用`AS`关键字赋予。\n\n别名的常见用途：在实际的表列名包含不符合规定的字符（如空格）时重新命名它，在原来的名字含混或容易误解 \t\t\t\t\t\t\t   时扩充它等等。\n\n```mysql\nSELECT Concat(RTrim(vend_name),' (',RTrim(vend_country),')') AS vend_title FROM vendors\nORDER BY vend_name;\t\n```\n\n示例输出：\n\n```shell\n+-------------------------+\n| vend_title              |\n+-------------------------+\n| ACME (USA)              |\n| Anvils R Us (USA)       |\n| Furball Inc. (USA)      |\n| Jet Set (England)       |\n| Jouets Et Ours (France) |\n| LT Supplies (USA)       |\n+-------------------------+\n```\n\n注: 仔细观察拼接段落的示例，很容易就可以看出两者的区别。\n\n* 执行算术计算\n\n计算字段的另一常见用途是对检索出的数据进行算术计算。\n\n测试计算：`SELECT`可以省略`FROM`子句以便简单地访问和处理表达式。如`SELECT 3*2;` `SELECT Now();`。\n\n```mysql\nSELECT prod_id,quantity,item_price FROM orderitems WHERE order_num = 20005;\nSELECT prod_id,quantity,item_price,\n\t   quantity*item_price AS expanded_price\nFROM orderitems WHERE order_num = 20005;\n```\n\n示例输出:\n\n```shell\n+---------+----------+------------+\n| prod_id | quantity | item_price |\n+---------+----------+------------+\n| ANV01   |       10 |       5.99 |\n| ANV02   |        3 |       9.99 |\n| TNT2    |        5 |      10.00 |\n| FB      |        1 |      10.00 |\n+---------+----------+------------+\n==============================================================\n+---------+----------+------------+----------------+\n| prod_id | quantity | item_price | expanded_price |\n+---------+----------+------------+----------------+\n| ANV01   |       10 |       5.99 |          59.90 |\n| ANV02   |        3 |       9.99 |          29.97 |\n| TNT2    |        5 |      10.00 |          50.00 |\n| FB      |        1 |      10.00 |          10.00 |\n+---------+----------+------------+----------------+\n```\n\n\n\n### 使用数据处理函数\n\nSQL支持利用函数来处理数据。函数一般是在数据上执行的，它给数据的转换和处理提供了方便。\n\n**函数没有SQL的可移植性强，如果决定使用函数，应该保证做好代码注释**\n\n**大多数SQL实现支持以下类型的函数：**\n\n1. 用于处理文本串的文本函数\n2. 用于在数值数据上进行算术操作的数值函数\n3. 用于处理日期和时间值并从这些值中提取特定成分的日期和时间函数\n4. 返回DBMS正使用的特殊信息（如返回用户登录信息，检查版本细节）的系统函数。\n\n\n\n* 文本处理函数\n\n常用的文本处理函数如下：\n\n| 函数        | 说明              |\n| ----------- | ----------------- |\n| Left()      | 返回串左边的字符  |\n| Length()    | 返回串的长度      |\n| Locate()    | 找出串的一个子串  |\n| Lower()     | 将串转换为小写    |\n| LTrim()     | 去掉串左边的空格  |\n| Right()     | 返回串右边的字符  |\n| RTrim()     | 去掉串右边的空格  |\n| Soundex()   | 返回串的SOUNDEX值 |\n| SubString() | 返回子串的字符    |\n| Upper()     | 将串转换为大写    |\n\n\n\n* 日期和时间处理函数\n\n**用日期进行过滤需要注意一些别的问题和使用特殊的MySQL函数**\n\n1. 无论什么时候指定一个日期，不管是插入或更新表值还是用WHERE字句进行过滤，日期格式必须为yyyy-mm=dd。这是首选的日期格式，因为它排除了多义性。\n\n常用日期和时间处理函数如下：\n\n| 函数          | 说明                             |\n| ------------- | -------------------------------- |\n| AddDate()     | 增加一个日期（天、周等）         |\n| AddTime()     | 增加一个时间（时、分等）         |\n| CurDate()     | 返回当前日期                     |\n| CurTime()     | 返回当前时间                     |\n| Date()        | 返回日期时间的日期部分           |\n| DateDiff()    | 计算两个日期之差                 |\n| Date_Add()    | 高度灵活的日期运算函数           |\n| Date_Format() | 返回一个格式化的日期或时间串     |\n| Day()         | 返回一个日期的天数部分           |\n| DayOfWeek()   | 对于一个日期，返回对应的是星期几 |\n| Hour()        | 返回一个时间的小时部分           |\n| Minute()      | 返回一个时间的分钟部分           |\n| Month()       | 返回一个时期的月份部分           |\n| Now()         | 返回当前日期和时间               |\n| Second()      | 返回一个时间的秒部分             |\n| Time()        | 返回一个日期时间的时间部分       |\n| Year()        | 返回一个日期的年份部分           |\n\n\n\n* 数值处理函数\n\n常用数值处理函数如下：\n\n| 函数   | 说明               |\n| ------ | ------------------ |\n| Abs()  | 返回一个数的绝对值 |\n| Cos()  | 返回一个角度的余弦 |\n| Exp()  | 返回一个数的指数值 |\n| Mod()  | 返回除操作的余数   |\n| Pi()   | 返回圆周率         |\n| Rand() | 返回一个随机数     |\n| Sin()  | 返回一个角度的正弦 |\n| Sqrt() | 返回一个数的平方根 |\n\n\n\n### 汇总数据\n\n* 聚集 函数\n\n我们经常需要汇总数据而不用把它们实际检索出来，为此MySQL提供了专门的函数。这些函数就是**聚集函数**。\n\n**聚集函数：**运行在行组上，计算和返回单个值的函数。\n\n**标准偏差聚集函数**\n\n\n\nSQL聚集函数表：\n\n| 函数    | 说明             |\n| ------- | ---------------- |\n| AVG()   | 返回某列的平均值 |\n| COUNT() | 返回某列的行数   |\n| MAX()   | 返回某列的最大值 |\n| MIN()   | 返回某列的最小值 |\n| SUM()   | 返回某列值之和   |\n\n补充说明：\n\nAVG()：只能用来确定特定数值列的平均值，而且列名必须作为函数参数给出。为了获得多个列的平均值，必须使\t\t\t 用多个AVG()函数。\n\n​\t\t\t AVG()函数忽略列值为`NULL`的行。\n\nCOUNT(): 如果指定列名，则指定列值为`NULL`的行被COUNT()函数忽略，但如果COUNT()函数中用的是星号(*),则\t\t\t\t 不忽略。\n\nMAX()：忽略列值为`NULL`的行。\n\nMIN()：忽略列值为`NULL`的行。\t\n\nSUM()：忽略列值为`NULL`的行。\n\n\n\n* 聚集不同值\n\n1. **不允许使用COUNT( DISTINCT )**\n\n以上5个聚集函数都可以如下使用：\n\n1. 对所有的行执行计算，指定`ALL`参数或不给参数(默认为`ALL`)。\n\n2. 只包含不同的值，指定`DISTINCT`参数。\n\n ```mysql\nSELECT AVG(prod_price) AS avg_price FROM products WHERE vend_id = 1003;\nSELECT AVG(DISTINCT prod_price) AS avg_price FROM products WHERE vend_id = 1003;\n ```\n\n示例输出：\n\n```shell\n+-----------+\n| avg_price |\n+-----------+\n| 13.212857 |\n+-----------+\n================================================\n+-----------+\n| avg_price |\n+-----------+\n| 15.998000 |\n+-----------+\n```\n\n* 组合聚集函数\n\n`SELECT`语句可根据需要包含多个聚集函数。\n\n```mysql\nSELECT COUNT(*) AS num_items,\n\t   MIN(prod_price) AS price_min,\n\t   MAX(prod_price) AS price_max,\n\t   AVG(prod_price) AS price_avg\nFROM products;\n```\n\n示例输出：\n\n```shell\n+-----------+-----------+-----------+-----------+\n| num_items | price_min | price_max | price_avg |\n+-----------+-----------+-----------+-----------+\n|        14 |      2.50 |     55.00 | 16.133571 |\n+-----------+-----------+-----------+-----------+\n```\n\n  \n\n### 分组数据\n\n* 数据分组\n\n**分组**允许把数据分为多个逻辑组，以便能对每个组进行聚集计算。分组是在`SELECT`语句的`GROUP BY`子句中建立的。\n\n**子句顺序**：`GROUP BY`子句必须出现在`WHERE`子句之后，`ORDER BY`子句之前。\n\n```mysql\nSELECT vend_id,COUNT(*) AS num_prods \nFROM products \nGROUP BY vend_id;\n```\n\n示例输出：\n\n```shell\n+---------+-----------+\n| vend_id | num_prods |\n+---------+-----------+\n|    1001 |         3 |\n|    1002 |         2 |\n|    1003 |         7 |\n|    1005 |         2 |\n+---------+-----------+\n```\n\n说明：上述的`SELECT`语句指定了两个列，vend_id包含产品供应商的ID,num_prods为计算字段(用COUNT(*)函数建立)。`GROUP BY`子句指示MySQL按照vend_id排序并分组数据。这导致对每个vend_id而不是整个表计算num_prods一次。从输出中可以看到，供应商1001有3个产品，供应商1002有2个产品，供应商1003有7个产品，而供应商1005有2个产品。\n\n`GROUP BY`子句后还可以跟`WITH ROLLUP`关键字，表示在分组统计的基础上再次进行汇总统计（在每个分组下都会有汇总统计）。\n\n[更多内容参考][https://blog.csdn.net/qq_42254088/article/details/81904819]\n\n```mysql\nSELECT vend_id,COUNT(*) AS num_prods\nFROM products\nGROUP BY vend_id WITH ROLLUP;\n```\n\n示例输出：\n\n```shell\n+---------+-----------+\n| vend_id | num_prods |\n+---------+-----------+\n|    1001 |         3 |\n|    1002 |         2 |\n|    1003 |         7 |\n|    1005 |         2 |\n|    NULL |        14 |\n+---------+-----------+\n```\n\n**`GROUP BY`字句的重要规定**:\n\n1. `GROUP BY`子句可以包含任意数目的列。这使得能对分组进行嵌套，为数据分组提供更细致的控制。\n2. 如果在`GROUP BY`子句中嵌套了分组，数据将在最后规定的分组上进行汇总。换句话说，在建立分组时，指定的所有列都一起计算，不能再从个别的列中取回数据。\n3. `GROUP BY`子句中列出的每个列都必须是**检索列**或**有效的表达式**（但不能是聚集函数）。如果`SELECT`中使用表达式，则必须在`GROUP BY`子句中指定相同的表达式。**不能使用别名**。\n\n4. 除聚集计算语句外，`SELECT`语句中的每个列都必须在`GROUP BY`子句中给出。\n5. 如果分组列中具有`NULL`值，则`NULL`将作为一个分组返回。如果列中有多行`NULL`值，它们将分为一组。\n6. `GROUP BY`子句必须出现在`WHERE`子句之后，`ORDER BY`子句之前。\n\n\n\n* 过滤分组\n\n除了能用`GROUP BY`分组数据外，MySQL还允许过滤分组。\n\n`WHERE`的过滤指定的是行而不是分组。`WHERE`没有分组的概念。为了实现分组过滤，需要使用`HAVING`子句，`HAVING`非常类似于`WHERE`，它能替代绝大部分的`WHERE`功能。两者唯一的差别是`WHERE`过滤行，而`HAVING`过滤分组。\n\n**`HAVING`支持所有`WHERE`操作符**。\n\n```mysql\nSELECT cust_id,COUNT(*) AS orders \nFROM orders\nGROUP BY cust_id\nHAVING COUNT(*) >= 2;\n```\n\n示例输出：\n\n```shell\n+---------+--------+\n| cust_id | orders |\n+---------+--------+\n|   10001 |      2 |\n+---------+--------+\n```\n\n**同时使用`WHERE`和`HAVING`：**\n\n```mysql\nSELECT vend_id,COUNT(*) AS num_prods\nFROM products\nWHERE prod_price >= 10\nGROUP BY vend_id\nHAVING COUNT(*) >= 2;\n```\n\n示例输出：\n\n```shell\n+---------+-----------+\n| vend_id | num_prods |\n+---------+-----------+\n|    1003 |         4 |\n|    1005 |         2 |\n+---------+-----------+\n```\n\n对于`WHERE`和`HAVING`的差别，也可以结合上述示例换另一种理解方法：\n\n`WHERE`在数据分组前进行过滤，`HAVING`在数据分组后进行过滤。这是一种重要的区别，`WHERE`排除的行不包括在分组中，这可能会改变计算值，从而影响`HAVING`子句中基于这些值过滤掉的分组。\n\n* 分组和排序\n\n仅管我们经常发现用`GROUP BY`分组的数据确实以分组顺序输出，但情况并不总是这样，它不是SQL规范所要求的。因此一般在使用`GROUP BY`时也应该给出`ORDER BY`,以保证数据正确排序。\n\n\n\n### SELECT字句顺序表\n\n| 字句     | 说明               | 是否必须使用             |\n| -------- | ------------------ | ------------------------ |\n| SELECT   | 要返回的列或表达式 | 是                       |\n| FROM     | 从中检索数据的表   | 仅在从表中选择数据时使用 |\n| WHERE    | 行级过滤           | 否                       |\n| GROUP BY | 分组说明           | 仅在按组计算聚集时使用   |\n| HAVING   | 组级过滤           | 否                       |\n| ORDER BY | 输出排序顺序       | 否                       |\n| LIMIT    | 要检索的行数       | 否                       |\n\n\n\n### 子查询\n\n**查询(query)**:任何SQL语句都是查询。但此术语一般值`SELECT`语句。\n\nSQL在版本4.1开始引入子查询的支持。**子查询(subquery)**即嵌套在其他查询中的查询。\n\n1. 对于能嵌套的子查询数目没有限制，不过在实际使用中由于性能的限制，不能嵌套太多的子查询。\n\n```mysql\nSELECT cust_id\nFROM orders \nWHERE order_num IN(SELECT order_num\n                   FROM orderitems\n                   WHERE prod_id = 'TNT2');\n```\n\n示例输出：\n\n```shell\n+---------+\n| cust_id |\n+---------+\n|   10001 |\n|   10004 |\n+---------+\n```\n\n* 作为计算字段使用子查询\n\n```mysql\nSELECT cust_name,\n\t   cust_state,\n\t   (SELECT COUNT(*)\n       \tFROM orders\n        WHERE orders.cust_id = customers.cust_id) AS orders\nFROM customers\nORDER BY cust_name;\n```\n\n示例输出：\n\n```shell\n+----------------+------------+--------+\n| cust_name      | cust_state | orders |\n+----------------+------------+--------+\n| Coyote Inc.    | MI         |      2 |\n| E Fudd         | IL         |      1 |\n| Mouse House    | OH         |      0 |\n| Wascals        | IN         |      1 |\n| Yosemite Place | AZ         |      1 |\n+----------------+------------+--------+\n```\n\n说明：在这个示例中，使用了**完全限定列名**。这里还涉及到了一个新的概念，**相关子查询(correlated  subquery)**，涉及外部查询的子查询。任何时候只要列名可能有多义性，就必须使用这种语法（表名和列名由一个句点分隔）。\n\n \n\n### 联结表\n\nSQL最强大的功能之一就是能在数据检索查询的执行中**联结(join)**表。\n\n**联结**：简单的说联结是一种机制，它不是物理实体，它用来在一条`SELECT`语句中关联表。联结在运行时关联表中\t\t    正确的行。\n\n1. **在一条`SELECT`语句中联结几个表时，相应的关系是在运行中构造的。**\n2. **在联结两个表时，你实际上做的是将第一个表中的每一行与第二个表中的每一行配对。`WHERE`子句作为过滤条件，它只包含那些匹配给定条件（这里是联结条件）的行。**\n3. 由没有联结条件的表关系返回的结果为笛卡尔积。检索出的行的数目将是第一个表中的行数乘以第二个表中的行数。笛卡尔积的联结类型又称为叉联结。\n\n\n\n* 创建联结\n\n```mysql\nSELECT vend_name,prod_name,prod_price\nFROM vendors,products\nWHERE vendors.vend_id = products.vend_id\nORDER BY vend_name,prod_name;\n```\n\n示例输出：\n\n```shell\n+-------------+----------------+------------+\n| vend_name   | prod_name      | prod_price |\n+-------------+----------------+------------+\n| ACME        | Bird seed      |      10.00 |\n| ACME        | Carrots        |       2.50 |\n| ACME        | Detonator      |      13.00 |\n| ACME        | Safe           |      50.00 |\n| ACME        | Sling          |       4.49 |\n| ACME        | TNT (1 stick)  |       2.50 |\n| ACME        | TNT (5 sticks) |      10.00 |\n| Anvils R Us | .5 ton anvil   |       5.99 |\n| Anvils R Us | 1 ton anvil    |       9.99 |\n| Anvils R Us | 2 ton anvil    |      14.99 |\n| Jet Set     | JetPack 1000   |      35.00 |\n| Jet Set     | JetPack 2000   |      55.00 |\n| LT Supplies | Fuses          |       3.42 |\n| LT Supplies | Oil can        |       8.99 |\n+-------------+----------------+------------+\n```\n\n说明：这里使用了`WHERE`子句来正确联结。\n\n* 联结多个表\n\nSQL对于一条`SELECT`语句中可以联结的表的数目没有限制。创建联结的基本规则也相同。\n\n1. 出于性能的考虑，不应该联结太多的表，联结的表越多，性能下降的越厉害。\n\n```mysql\nSELECT prod_name,vend_name,prod_price,quantity\nFROM orderitems,products,vendors\nWHERE products.vend_id = vendors.vend_id\n\t  AND orderitems.prod_id = products.prod_id\n\t  AND order_num = 20005;\n```\n\n示例输出：\n\n```shell\n+----------------+-------------+------------+----------+\n| prod_name      | vend_name   | prod_price | quantity |\n+----------------+-------------+------------+----------+\n| .5 ton anvil   | Anvils R Us |       5.99 |       10 |\n| 1 ton anvil    | Anvils R Us |       9.99 |        3 |\n| TNT (5 sticks) | ACME        |      10.00 |        5 |\n| Bird seed      | ACME        |      10.00 |        1 |\n+----------------+-------------+------------+----------+\n```\n\n* 表别名\n\n表别名只在查询执行中使用。与列别名不一样，表别名不返回到客户机。\n\n```mysql\nSELECT cust_name,cust_contact\nFROM customers AS c,orders AS o,orderitems AS oi\nWHERE c.cust_id = o.cust_id\n  AND oi.order_num = o.order_num\n  AND prod_id = 'TNT2';\n```\n\n示例输出：\n\n```shell\n+----------------+--------------+\n| cust_name      | cust_contact |\n+----------------+--------------+\n| Coyote Inc.    | Y Lee        |\n| Yosemite Place | Y Sam        |\n+----------------+--------------+\n```\n\n\n\n* 内部联结\n\n内部联结又称为等值联结(equijion),它基于两个表之间的相等测试。\n\n对于这种联结可以使用稍微不同的语法来明确指定联结的类型。\n\n1. 尽管使用`WHERE`字句定义的联结的确比较简单，但是使用明确的联结语法能够确保不会忘记联结条件，有时候这样做也能影响性能。\n\n```mysql\nSELECT vend_name,prod_name,prod_price\nFROM vendors INNER JOIN products\nON vendors.vend_id = products.vend_id;\n```\n\n示例输出：\n\n```shell\n+-------------+----------------+------------+\n| vend_name   | prod_name      | prod_price |\n+-------------+----------------+------------+\n| Anvils R Us | .5 ton anvil   |       5.99 |\n| Anvils R Us | 1 ton anvil    |       9.99 |\n| Anvils R Us | 2 ton anvil    |      14.99 |\n| LT Supplies | Fuses          |       3.42 |\n| LT Supplies | Oil can        |       8.99 |\n| ACME        | Detonator      |      13.00 |\n| ACME        | Bird seed      |      10.00 |\n| ACME        | Carrots        |       2.50 |\n| ACME        | Safe           |      50.00 |\n| ACME        | Sling          |       4.49 |\n| ACME        | TNT (1 stick)  |       2.50 |\n| ACME        | TNT (5 sticks) |      10.00 |\n| Jet Set     | JetPack 1000   |      35.00 |\n| Jet Set     | JetPack 2000   |      55.00 |\n+-------------+----------------+------------+\n```\n\n\n\n* 自联结\n\n表自己联结自己的联结类型称为自联结。\n\n**自联结通常作为外部语句用来替代从相同表中检索数据时使用的子查询语句。虽然最终结果是一样的，但是有时候处理联结远比处理子查询快得多**。\n\n```mysql\nSELECT p1.prod_id, p1.prod_name\nFROM products AS p1, products AS p2\nWHERE p1.vend_id = p2.vend_id\n  AND p2.prod_id = 'DTNTR';\n```\n\n示例输出：\n\n```shell\n+---------+----------------+\n| prod_id | prod_name      |\n+---------+----------------+\n| DTNTR   | Detonator      |\n| FB      | Bird seed      |\n| FC      | Carrots        |\n| SAFE    | Safe           |\n| SLING   | Sling          |\n| TNT1    | TNT (1 stick)  |\n| TNT2    | TNT (5 sticks) |\n+---------+----------------+\n```\n\n\n\n* 自然联结\n\n标准联结（内部联结）返回所有数据，甚至相同的列多次出现。自然联结排除多次出现，使每个列只返回一次。\n\n**自然联结是这样一种联结，其中你只能选择那些唯一的列。这一般是通过对表使用通配符`SELECT *`，对所有其他表的列使用明确的子集来完成的。**\n\n```mysql\nSELECT c.*, o.order_num,o.order_date,\n\t   oi.prod_id,oi.quantity,oi.item_price\nFROM customers AS c, orders AS o, orderitems AS oi\nWHERE c.cust_id = o.cust_id\n  AND oi.order_num = o.order_num\n  AND prod_id = 'FB';\n```\n\n示例输出：\n\n```shell\n+---------+-------------+----------------+-----------+------------+----------+--------------+--------------+-----------------+-----------+---------------------+---------+----------+------------+\n| cust_id | cust_name   | cust_address   | cust_city | cust_state | cust_zip | cust_country | cust_contact | cust_email      | order_num | order_date          | prod_id | quantity | item_price |\n+---------+-------------+----------------+-----------+------------+----------+--------------+--------------+-----------------+-----------+---------------------+---------+----------+------------+\n|   10001 | Coyote Inc. | 200 Maple Lane | Detroit   | MI         | 44444    | USA          | Y Lee        | ylee@coyote.com |     20005 | 2005-09-01 00:00:00 | FB      |        1 |      10.00 |\n|   10001 | Coyote Inc. | 200 Maple Lane | Detroit   | MI         | 44444    | USA          | Y Lee        | ylee@coyote.com |     20009 | 2005-10-08 00:00:00 | FB      |        1 |      10.00 |\n+---------+-------------+----------------+-----------+------------+----------+--------------+--------------+-----------------+-----------+---------------------+---------+----------+--\n```\n\n说明：在这个例子中，通配符只对第一个表使用。所有其他列明确列出，所以没有重复的列被检索出来。\n\n\n\n* 外部联结\n\n联结包含了那些在相关表中没有关联的行。这种类型的联结称为**外部联结**。\n\n在使用`OUTER JOIN`语法时，必须使用`RIGHT`或`LEFT`关键字指定包括其所有行的表(`RIGHT`指出的是`OUTER JOIN`右边的表，而`LEFT`指出的是`OUTER JOIN`左边的表)。这也引出了两种外部联结形式：`左外部联结`和`右外部联结`。\n\n```mysql\nSELECT customers.cust_id,orders.order_num\nFROM customers LEFT OUTER JOIN orders\nON customers.cust_id = orders.cust_id;\n```\n\n示例输出：\n\n```shell\n+---------+-----------+\n| cust_id | order_num |\n+---------+-----------+\n|   10001 |     20005 |\n|   10001 |     20009 |\n|   10002 |      NULL |\n|   10003 |     20006 |\n|   10004 |     20007 |\n|   10005 |     20008 |\n+---------+-----------+\n```\n\n\n\n* 使用带聚集函数的联结\n\n```mysql\nSELECT customers.cust_name,customers.cust_id,COUNT(orders.order_num) AS num_ord\nFROM customers INNER JOIN orders\nON customers.cust_id = orders.cust_id\nGROUP BY customers.cust_id;\n```\n\n示例输出：\n\n```shell\n+----------------+---------+---------+\n| cust_name      | cust_id | num_ord |\n+----------------+---------+---------+\n| Coyote Inc.    |   10001 |       2 |\n| Wascals        |   10003 |       1 |\n| Yosemite Place |   10004 |       1 |\n| E Fudd         |   10005 |       1 |\n+----------------+---------+---------+\n```\n\n\n\n* 使用联结和联结条件\n\n以下总结一下关于联结及其使用的某些要点。\n\n1. 注意所使用的联结类型。一般我们使用内部联结，但使用外部联结也是有效的。\n2. 保证使用正确的联结条件，否则将返回不正确的数据。\n3. 应该总是提供联结条件，否则将得到笛卡尔积。\n4. 在一个联结中可以包含多个表，甚至对于每个联结可以采用不同的联结类型。虽然这也做是合法的，一般也很有用，但应该在一起测试它们前，分别测试每个联结。这将使故障的排除更为简便。\n\n\n\n### 组合查询\n\n多数SQL查询都只包含从一个或多个表中返回数据的单条`SELECT`语句。MySQL也允许执行多个查询（多条`SELECT`语句），并将结果作为单个查询结果集返回。这些组合查询通常称为**并**或**复合查询**。\n\n有两种基本情况，其中需要使用组合查询：\n\n1. 在单个查询中从不同的表返回类似结构的数据；\n2. 对单个表执行多个查询，按单个查询返回数据。\n\n\n\n* 创建组合查询\n\n利用`UNION`，可给出多条`SELECT`语句，将它们的结果组合成单个结果集。\n\n`UNION`从结果集中自动去除了重复的行。如果想返回所有匹配的行，可使用`UNION ALL`而不是`UNION`。这里值得注意的是多个`WHERE`子句一定会自动去除重复的行，因此如果确实需要每个条件的匹配行全部出现（包括重复行），则必须使用`UNION ALL`而不是`WHERE`。\n\n\n\n**`UNION`规则**：\n\n1. UNION必须由两条或两条以上的`SELECT`语句组成，语句之间用关键字`UNION`分隔(因此，如果组合4条`SELECT`语句，将要使用`UNION`关键字)。\n2. **`UNION`中的每个查询必须包含相同的列、表达式或聚集函数（不过每个列不需要以相同的次序给出）**。\n3. 列数据类型必须兼容：类型不必完全相同，但必须时DBMS可以隐含地转换的类型。\n\n\n\n```mysql\nSELECT vend_id,prod_id,prod_price\nFROM products \nWHERE prod_price <= 5\nUNION\nSELECT vend_id,prod_id,prod_price\nFROM products\nWHERE vend_id IN (1001,1002);\n```\n\n示例输出：\n\n```shell\n+---------+---------+------------+\n| vend_id | prod_id | prod_price |\n+---------+---------+------------+\n|    1003 | FC      |       2.50 |\n|    1002 | FU1     |       3.42 |\n|    1003 | SLING   |       4.49 |\n|    1003 | TNT1    |       2.50 |\n|    1001 | ANV01   |       5.99 |\n|    1001 | ANV02   |       9.99 |\n|    1001 | ANV03   |      14.99 |\n|    1002 | OL1     |       8.99 |\n+---------+---------+------------+\n```\n\n* 对组合查询结果进行排序\n\n在使用`UNION`组合查询时，只能使用一条`ORDER BY`子句，它必须出现在最后一条`SELECT`语句之后。对于结果集，不存在用一种方式排序一部分，而使用另一种方式排序另一部分的情况，因此不允许使用多条`ORDER BY`子句。\n\n```mysql\nSELECT vend_id,prod_id,prod_price\nFROM products\nWHERE prod_price <= 5\nUNION \nSELECT vend_id,prod_id,prod_price\nFROM products\nWHERE vend_id IN (1001,1002)\nORDER BY vend_id,prod_price;\n```\n\n示例输出：\n\n```shell\n+---------+---------+------------+\n| vend_id | prod_id | prod_price |\n+---------+---------+------------+\n|    1001 | ANV01   |       5.99 |\n|    1001 | ANV02   |       9.99 |\n|    1001 | ANV03   |      14.99 |\n|    1002 | FU1     |       3.42 |\n|    1002 | OL1     |       8.99 |\n|    1003 | FC      |       2.50 |\n|    1003 | TNT1    |       2.50 |\n|    1003 | SLING   |       4.49 |\n+---------+---------+------------+\n```\n\n\n\n### 全文本搜索\n\n虽然**通配符**及**正则表达式**它们作为搜索机制非常有用，但仍存在几个重要的限制：\n\n1. 性能----通配符和正则表达式匹配通常要求MySQL尝试匹配表中所有行（而且这些搜索极少使用表索引）。因此，由于被搜索行数不断增加，这些搜索可能非常耗时。\n2. 明确控制----使用通配符和正则表达式匹配，很难（而且并不总能）明确地控制匹配什么和不匹配什么。例如，指定一个词必须匹配，一个词必须不匹配，而一个词仅在第一个词确实匹配的情况下才可以匹配或者才可以不匹配。\n3. 智能化的结果----虽然基于通配符和正则表达式的搜索提供了非常灵活的搜索，但它们都不能提供一种智能化的选择结果的方法。\n\n所有上述这些限制以及更多的限制都可以用**全文本搜索**来解决。在使用全文本搜索时，MySQL不需要分别查看每个行，不需要分别分析和处理每个词。MySQL创建指定列中各词的一个索引，搜索可以针对这些词进行。这样，MySQL可以快速有效地绝对哪些词匹配（哪些行包含它们），哪些词不匹配，它们匹配的频率，等等。\n\n1. **为了进行全文本搜索，必须索引被搜索的列，而且要随着数据的更改不断重新索引**。在对表列进行适当设计后，MySQL会自动进行所有的索引和重新索引。但值得注意的是，在导入数据时应该先不启用`FULLTEXT`索引，应该首先导入所有数据，然后再修改表，定义`FULLTEXT`建立索引。这样有助于更快的导入数据及更快的更新索引（索引总数据的时间小于每行分时分别索引）。\n\n2. 除非使用`BINARY`方式，否则全文本搜索不区分大小写。\n\n3. **全文本搜索会返回以文本匹配的良好程度排序的数据**。\n\n\n\n* 启用全文本搜索支持\n\n一般在创建表时启用全文本搜索。`CREATE TABLE`语句接受`FULLTEXT`子句，它给出别索引列的一个逗号分隔的列表。\n\n在定义后，MySQL自动维护该索引，在增加、更新或删除行时，索引随之自动更新。\n\n**`FULLTEXT`子句可以指定多个列**。\n\n**可以在创建表时指定`FULLTEXT`，也可以在稍后指定**。\n\n```mysql\nCREATE TABLE productnotes\n(\n    note_id    int        NOT NULL    AUTO_INCREMENT\n    prod_id    char(10)   NOT NULL,\n    note_date  datetime   NOT NULL,\n    note_text  text       NULL,\n    PRIMARY KEY(note_id),\n    FULLTEXT(note_text)\n)ENGINE=MyISAM;\n```\n\n\n\n* 进行全文本搜索\n\n在索引之后，使用两个函数`Match()`和`Against()`执行全文本搜索，其中`Match()`指定被搜索的列，`Against()`指定要使用的搜索表达式。\n\n**传递给`Match()`的值必须与`FULLTEXT()`定义中的相同。如果指定多个列，则必须列出它们（而且次序正确）。**\n\n\n\n```mysql\nSELECT note_text\nFROM productnotes\nWHERE Match(note_text) Against('rabbit');\n```\n\n示例输出：\n\n```shell\n+----------------------------------------------------------------------------------------------------------------------+\n| note_text                                                                                                            |\n+----------------------------------------------------------------------------------------------------------------------+\n| Customer complaint: rabbit has been able to detect trap, food apparently less effective now.                         |\n| Quantity varies, sold by the sack load.\nAll guaranteed to be bright and orange, and suitable for use as rabbit bait. |\n+----------------------------------------------------------------------------------------------------------------------+\n\n```\n\n\n\n```mysql\nSELECT note_text,\n\t   Match(note_text) Against('rabbit') AS rank\nFROM productnotes;\n```\n\n说明：下面的例子和其上的例子最明显的区别时，前者将返回所有行，因为没有`WHERE`字句进行过滤，同时将全文本匹配结果作为新行`rank`进行展示。\n\n\n\n* 使用查询扩展\n\n查询扩展使用`WITH QUERY EXPANSION`子句完成。\n\n查询扩展用来设法放宽所返回的全文本搜索结果的范围。使用查询扩展时，MySQL对数据和索引进行两遍扫描来完成搜索：\n\n1. 首先，进行一个基本的全文本搜索，找出与搜索条件匹配的所有行；\n2. 其次，MySQL检查这些匹配行并选择所有有用的词(根据某种规则)；\n3. 再其次，MySQL再次进行全文本搜索，这次不仅使用原来的条件，而且还使用所有有用的词。\n\n```mysql\nSELECT note_text\nFROM productnotes\nWHERE Match(note_text) Against('anvils' WITH QUERY EXPANSION);\n```\n\n\n\n* 布尔文本搜索\n\nMySQL支持全文本搜索的另外一种形式，称为**布尔方式（boolean mode）**。其可提供关于如下内容的细节：\n\n1. 要匹配的词；\n2. 要排斥的词（如果某行包含这个词，则不返回该行，即使它包含其他指定的词也是如此）；\n3. 排列提示（指定某些词比其他词更加重要，更重要的词等级变高）；\n4. 表达式分组；\n5. 另外一些内容。\n\n**布尔方式不同于上述使用的全文本搜索语法，它即使在没有定义`FULLTEXT`索引的情况下，也可以使用。但这是一种非常缓慢的操作**。\n\n在布尔方式中，不按等级值降序排序返回的行。\n\n```mysql\nSELECT note_text FROM productnotes \nWHERE Match(note_text) Against('heavy' IN BOOLEAN MODE);\n\nSELECT note_text FORM productnotes\nWHERE Match(note_text) Against('heavy -rope*' IN BOOLEAN MODE);\n```\n\n全文本布尔操作符表：\n\n| 布尔操作符 | 说明                                                         |\n| ---------- | ------------------------------------------------------------ |\n| +          | 包含，词必须存在                                             |\n| -          | 排除，词必须不存在                                           |\n| >          | 包含，而且增加等级值                                         |\n| <          | 包含，而且减少等级值                                         |\n| ()         | 把词组成子表达式(允许这些子表达式作为一个组被包含、排除、排列等) |\n| ~          | 取消一个词的排序值                                           |\n| *          | 词尾的通配符                                                 |\n| \" \"        | 定义一个短语(与单个词的列表不一样，它匹配整个短语以便包含或排除这个短语) |\n\n示例：\n\n```mysql\nSELECT note_text\nFROM productnotes\nWHERE Match(note_text) Against('+rabbit +bait' IN BOOLEAN MODE);\n```\n\n说明：搜索匹配包含词rabbit和bait的行。\n\n```mysql\nSELECT note_text\nFROM productnotes\nWHERE Match(note_text) Against('rabbit bait' IN BOOLEAN MODE);\n```\n\n说明：搜索匹配包含rabbit和bait中的至少一个词的行。\n\n```mysql\nSELECT note_text\nFROM productnotes\nWHERE Match(note_text) Against('\"rabbit bait\"' IN BOOLEAN MODE);\n```\n\n说明：搜索匹配短语rabbit bait而不是匹配两个词rabbit和bait。\n\n\n\n* 全文本搜索的重要说明\n\n1. 在索引全文本数据时，短词被忽略且从索引中排除。短词定义为哪些具有3个或3个以下字符的词（可以根据需要更改）。\n2. MySQL带有一个内建的非用词(stopword)列表，这些词在索引全文本数据时将被忽略。如果需要，可以覆盖这个列表。\n3. 许多词出现的频率很高，搜索它们没有用处(返回太多的结果)。因此，MySQL规定了一条50%规则，如果一个词出现在50%以上的行中，则将它作为一个非用词忽略。**50%规则不用于`IN BOOLEAN MODE`。\n4. 如果表中的行数少于3行，则全文本搜索不返回结果(因此每个词或者不出现，或者出现在50%的行中)。\n5. 忽略词中的的单引号。例如：don't 索引为 dont。\n6. 不具有词分隔符(包括日语和汉语)的语言不能恰当地返回全文本搜索结果。\n7. 仅在MyISAM数据库引擎中支持全文本搜索。\n\n\n\n ### 插入数据\n\n使用`INSERT`语句来插入或添加行到数据库表，插入可以用几种方式使用：\n\n1. 插入完整的行\n2. 插入行的一部分\n3. 插入多行\n4. 插入某些查询结果\n\n**重要注意事项**：\n\n1. 如果某个列没有值，应该使用`NULL`值(假定表允许对该列指定空值)。\n2. 对于自动增量，可以省略其值。\n\n3. 如果表的定义允许，则可以在`INSERT`操作中省略某些列。被省略的列应该满足以下某个条件。\n   - 该列的定义为允许`NULL`值（无值或空值）。\n   - 在表定义中给出默认值。这表示如果不给出值，将使用默认值。\n\n\n\n* 插入完整的行\n\n```mysql\nINSERT INTO customers\nVALUES (NULL,\n        'Ppe E.LaPew',\n        '100 Main Street',\n        'Los Angeles',\n        'CA',\n        '90046',\n        'USA',\n        NULL,\n        NULL,\n        NULL);\n```\n\n说明：这种语法没有指定列名，各个列必须以它们在表定义中出现的次序填充。这是一种不安全的语法，因为它极  \t\t\t度依赖于表中列的定义次序。\n\n```mysql\nINSERT INTO customers(cust_name,\n                      cust_address,\n                      cust_city,\n                      cust_state,\n                      cust_zip,\n                      cust_country,\n                      cust_contact,\n                      cust_email)\n        VALUES('Ppe E.LaPew',\n        \t   '100 Main Street',\n        \t   'Los Angeles',\n        \t   'CA',\n        \t   '90046',\n        \t   'USA',\n        \t   NULL,\n               NULL);\n```\n\n说明：这种语法与上述的语法显著的区别是明确的指出的列名。在插入行时，MySQL将用VALUES列表中对应的值填入列表中的对应项。因为提供了列名，VALUES必须按其指定的次序匹配指定列名，但不一定需要按各个列在实际表中的次序。这种方式的明显优点是，即使表的结构改变，此语句仍然可以正确工作。\n\n\n\n* 插入多个行\n\n可以使用多条`INSERT`语句。或者，只要每条`INSERT`语句中的列名和次序相同，也可以使用一条`INSERT`语句，组合提交多个行。\n\n**MySQL用条`INSERT`语句处理多个插入比使用多条`INSERT`语句快**。\n\n```mysql\nINSERT INTO customers(cust_name,\n                      cust_address,\n                      cust_city,\n                      cust_state,\n                      cust_zip,\n                      cust_country)\nVALUES(\n    \t'Ppe E.LaPew',\n        '100 Main Street',\n        'Los Angeles',\n    \t'CA',\n        '90046',\n        'USA'\n\t\t),\n\t (\n        'M .Martian',\n        '42 Galaxy Way',\n        'New York',\n        'NY',\n        '11213',\n        'USA'\n     );\n```\n\n\n\n* 插入检索出的数据\n\n可以利用`INSERT`将一条`SELECT`语句的结果插入表中。\n\n```mysql\nINSERT INTO customers(cust_id,\n                     cust_contact,\n                     cust_email,\n                     cust_name,\n                     cust_address,\n                     cust_city,\n                     cust_state,\n                     cust_zip,\n                     cust_country)\n        SELECT cust_id,\n        \t   cust_contact,\n               cust_email,\n               cust_name,\n               cust_address,\n               cust_city,\n               cust_state,\n               cust_zip,\n               cust_country\n         FROM custnew;\n```\n\n说明：上述例子使用`INSERT SELECT`从custnew表中将所有数据导入customers。\n\n* 优先级指定\n\n如果数据检索是最重要的，可以通过在`INSERT`和`INTO`之间添加关键字`LOW_PRIORITY`，指示MySQL降低`INSERT`语句的优先级。如：`INSERT LOW_PRIORITY INTO`。\n\n\n\n### 更新和删除数据\n\n为了更新(修改)表中的数据，可以使用`UPDATE`语句。可采用两种方式使用`UPDATE`：\n\n1. 更新表中的特定行\n\n2. 更新表中所有行\n\n\n\n* 更新数据\n\n`UPDATE`语句非常容易使用，基本的`UPDATE`语句由3部分组成，分别是：\n\n1. 要更新的表；\n2. 列名和它们的新值；\n3. 确定要更新行的过滤条件。\n\n**为了删除某个列的值，可设置它为`NULL`（假如表定义允许`NULL`值）。\n\n```mysql\nUPDATE customers \nSET cust_email = 'elmer@fudd.com'\nWHERE cust_id = 10005;\n\nUPDATE customers\nSET cust_name = 'The Fudds',\n\tcust_email = 'elmer@fudd.com'\nWHERE cust_id = 10005;\n```\n\n说明：`UPDATE`语句总是以要更新的表的名字开始。`SET`命令用来将新值赋给被更新的列。\n\n\n\n* 删除数据\n\n为了从一个表中删除(去掉)数据，使用`DELETE`语句。有两种方式使用`DELETE`:\n\n1. 从表中删除特定的行；\n2. 从表中删除所有行。\n\n**在使用`DELETE`语句时一定要小心，MySQL没有撤销操作。一定要注意使用`WHERE`子句**。\n\n**`DELETE`不需要列名或者通配符。它删除整行而不是删除列。为了删除指定的列，应该使用`UPDATE`语句**。\n\n\n\n* 删除所有行\n\n如果想从表中删除所有行，不要使用`DELETE`。可使用 `TRUNCATE TABLE`语句，它完成相同的工作，但速度更快。因为它时通过删除原来的表并重新创建一个新表来实现的，而`DELETE`是逐行删除表中的数据。\n\n\n\n* 更新和删除的指导原则\n\n1. 除非确实打算更新和删除每一行，否则绝对不要使用不带`WHERE`子句的`UPDATE`或`DELETE`语句。\n2. 保证每个表都有主键，尽可能像`WHERE`子句那样使用它。\n3. 在对`UPDATE`或`DELETE`语句使用`WHERE`子句前，应该先用`SELECT`语句进行测试，以保证它的过滤时正确的。\n4. 使用强制实施引用完整性的数据库，这样MySQL将不允许删除具有与其他表相关联的数据的行。\n\n\n\n### 创建和操纵表\n\n\n\n* 创建表\n\n表的创建使用`CREATE TABLE`语句完成。为成功创建表，必须给出下列信息：\n\n1. 新表的名字，在关键字`CREATE TABLE`之后给出；\n2. 表列的名字和定义，用逗号分隔。\n\n注意事项：\n\n1. 在创建新表时，指定的表名必须不存在。为了防止意外覆盖已有的表，SQL要求首先手工删除该表，然后再重建。**如果仅想在一个表不存在时创建它，应该在表名后面给出`IF NOT EXISTS`**。这样做不检查已有表的模式是否与你打算创建的表模式相匹配，它只检查表名是否存在。\n\n   \n\n```mysql\nCREATE TABLE customers \n(\n\tcust_id\t\t\tint  \t\tNOT NULL  AUTO_INCREMENT,\n    cust_name\t\tchar(50)\tNOT NULL,\n    cust_address\tchar(50)\tNULL,\n    cust_city\t\tchar(50)\tNULL,\n    cust_state\t\tchar(5)\t\tNULL,\n    cust_zip\t\tchar(10)\tNULL,\n    cust_country\tchar(50)\tNULL,\n    cust_contact\tchar(50)\tNULL,\n    cust_email\t\tchar(255)\tNULL,\n    PRIMARY KEY (cust_id)\n)ENGINE=InnoDB;\n```\n\n**说明：**\n\n1. 实际的表定义(所有列)括在圆括号中，个各列之间用逗号分隔。\n\n2. 这个表由9列组成，每列的定义以列名(它在表中必须是唯一的)开始，后跟列的数据类型。\n\n3. 表的主键可以在创建表时用关键字`PRIMARY KEY`指定。\n\n4. `NULL`值就是没有值或者缺值。允许`NULL`值的列也允许在插入行时不给出该列的值，反之不允许`NULL`值的行在插入或更新时，该列必须有值。\n\n5. `AUTO_INCREMENT`告诉MySQL，本列为**自动增量**，每增加一行时自动增加。每个表只允许一个`AUTO_INCREMENT`列，而且它必须被索引(如，通过使它成为主键)。\n\n   自动增量也可以通过在`INSERT`语句中使用其他值覆盖，这样后续的增量将使用该手工插入的值。\n\n   **获取**最后一个增量值可以使用`last_insert_id()`来获取，如：`SELECT last_insert_id();`。\n\n\n\n* 多个列组成主键\n\n为创建多个列组成的主键，应该以逗号分隔的列表给出各列名。\n\n**主键可以在创建表时定义，也可以在创建表后定义**。\n\n**主键只能使用不允许`NULL`值的列**。\n\n```mysql\nCREATE TABLE orderitems\n(\norder_num\tint \t\tNOT NULL,\norder_item\tint\t\t\tNOT NULL,\nprod_id\t\tchar(10)\tNOT NULL,\nquantity\tint\t\t\tNOT NULL,\nitem_price  decimal(8,2)NOT NULL,\nPRIMARY KEY (order_num,order_item)\n)ENGINE=InnoDB;\n```\n\n\n\n* 指定默认值\n\n如果插入行时没有给出值，MySQL允许指定此时使用的默认值。在创建表时用`DEFAULT`关键字指定。\n\n```mysql\nCREATE TABLE orderitems\n(\norder_num\tint \t\tNOT NULL,\norder_item\tint\t\t\tNOT NULL,\nprod_id\t\tchar(10)\tNOT NULL,\nquantity\tint\t\t\tNOT NULL\tDEFAULT 1,\nitem_price  decimal(8,2)NOT NULL,\nPRIMARY KEY (order_num,order_item)\n)ENGINE=InnoDB;\n```\n\n\n\n* 引擎类型\n\nMySQL与其他DBMS不一样，它具有多种引擎。可以使用`ENGINE=`语句进行指定。\n\n1. **引擎类型可以混用**。每个表都可以有自己的引擎类型。\n\n2. **外键不能跨引擎**。外键用于强制实施引用完整性，因此不能跨引擎。即使用一个引擎的表不能引用具有使用不同引擎的表的外键。\n3. \n\n```C\n/*\n几个重要的引擎：\n1. InnoDB 是一个可靠的事务处理引擎，它不支持全文本搜索。\n2. MEMORY 的功能等同于MyISAM，但它的数据存储在内存(不是磁盘)中，因此速度很快，特别适合临时表。\n3. MyISAM 时一个性能极高的引擎，它支持全文本搜索，但不支持事务处理。\n*/\n```\n\n\n\n* 更新表定义\n\n为更新表定义，可使用`ALTER TABLE`语句。但在理想状态下，当表中存储数据以后，该表就不应该再被更新，因此表的设计过程需要花费大量的时间来考虑，十分重要。\n\n**在进行改动前，最好做一个完整的备份。因为数据库表的更改不可撤销**。\n\n为使用`ALTER TABLE`更新表结构，必须给出下面信息：\n\n1. 在`ALTER TABLE`之后给出要更改的表名(该表必须存在，否则将出错)；\n2. 所做更改的列表。\n\n```mysql\n#给表添加一个列\nALTER TABLE 表名\nADD 列定义;\n```\n\n```mysql\nALTER TABLE vendors\nADD vend_phone CHAR(20);\n```\n\n说明：必须明确给出列的数据类型。\n\n```mysql\n#删除刚刚添加的列\nALTER TABLE vendors\nDROP COLUMN vend_phone;\n```\n\n**`ALTER TABLE`的一个常见用途是定义外键**。\n\n```mysql\nALTER TABLE orderitems\nADD CONSTRAINT fk_orderitems_orders\nFOREIGN KEY (order_Num) REFERENCES orders(order_num);\n```\n\n\n\n* 复杂的表结构更改\n\n复杂的表结构更改一般需要手动删除过程，它涉及以下步骤：\n\n1. 用新的列布局创建一个新表；\n2. 使用`INSERT SELECT`语句，从旧表复制数据到新表。如果有必要，可使用转换函数和计算字段；\n3. 检验包含所需数据的新表；\n4. 重命名旧表(如果确定可以删除它)；\n5. 用旧表原来的名字重命名新表；\n6. 根据需要，重新创建触发器、存储过程、索引和外键。\n\n\n\n* 删除表\n\n删除表没有确认，也不能撤销。\n\n```mysql\nDROP TABLE customers2;\n```\n\n\n\n* 重命名表\n\n```mysql\nRENAME TABLE customers TO customers;\n\nRENAME TABLE backup_customers TO customers,\n\t\t\t backup_vendors TO vendors,\n\t\t\t backup_products TO products;\n```\n\n\n\n### 视图\n\n视图是虚拟的表。与包含数据的表不一样，视图只包含使用时动态检索数据的查询。\n\n**作为视图，它不包含表中应该有的数据，它包含的是一个SQL查询。**\n\n**视图仅仅是用来查看存储在别处的数据的一种设施。视图本身不包含数据，因此它们返回的数据是从其他表中检索出来的。在添加或更改这些表中的数据时，视图将返回改变后的数据。**\n\n**视图提供了一种MySQL的`SELECT`语句层次的封装，可用来简化数据处理及重新格式化基础数据或保护基础数据。**\n\n* 为什么使用视图\n\n1. 重用SQL语句。\n2. 简化复杂的SQL操作。在编写查询后，可以方便地重用它而不必知道它的基本查询细节。\n3. 使用表的组成部分而不是整个表。\n4. 保护数据。可以给用户授予表的特定部分的访问权限而不是整个表的访问权限。\n5. 更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。\n\n\n\n* 视图的规则和限制\n\n1. 与表一样，视图必须唯一命名。\n2. 对于可以创建的视图数目没有限制。\n3. 为了创建视图，必须具有足够的访问权限。这些限制通常由数据库管理人员授予。\n4. 视图可以嵌套，即可以利用从其他视图中检索数据的查询来构造一个视图。\n5. `ORDER BY`可以用在视图中，但如果从该视图检索数据的`SELECT`语句中也含有`ORDER BY`，那么该视图中的`ORDER BY`将被覆盖。\n6. 视图不能索引，也不能有关联的触发器或默认值。\n7. 视图可以和表一起使用。例如，编写一条联结表和视图的`SELECT`语句。\n\n\n\n* 使用视图\n\n1. 视图使用`CREATE VIEW`创建。\n2. 使用`SHOW CREATE VIEW viewname;`来查看创建视图的语句。\n3. 用`DROP`删除视图，其语法为`DROP VIEW viewname;`。\n4. 更新视图时，可以先用`DROP`再用`CREATE`,也可以直接用`CREATE OR REPLACE VIEW`，如果更新的视图不存在，则创建一个视图，如果存在，则替换视图。\n\n**如果从视图中检索数据时使用了一条`WHERE`子句，则两组子句(一组在视图中，另一组是传递给视图的)将自动结合**。\n\n**视图主要用于检索数据，而不用于更新数据**。\n\n```mysql\nCREATE VIEW productcustomers AS\nSELECT cust_name,cust_contact,prod_id\nFROM customers,orders,orderitems\nWHERE customers.cust_id = orders.cust_id\n  AND orderitems.order_num = orders.order_num;\n```\n\n说明：这条语句创建了一个名为`productcustomers`的视图，它联结三个表，以返回已订购了任意产品的所有客户的列表。为检索订购了产品TNT2的客户，可使用如下语句：\n\n```mysql\nSELECT cust_name,cust_contact\nFROM productcustomers\nWHERE prod_id = 'TNT2';\n```\n\n示例输出：\n\n```shell\n+----------------+--------------+\n| cust_name      | cust_contact |\n+----------------+--------------+\n| Coyote Inc.    | Y Lee        |\n| Yosemite Place | Y Sam        |\n+----------------+--------------+\n```\n\n \n\n* 更新视图\n\n可以使用`INSERT`、`UPDATE`、`DELETE`对视图进行更新。不过更新一个视图将更新其基表，如果对视图增加或删除行，实际上是对其基表增加或删除行。\n\n但并不是所有视图都可以更新，如果视图定义中有以下操作，则不能进行更新：\n\n1. 分组(使用`GROUP BY`和`HAVING`)；\n2. 联结；\n3. 子查询；\n4. 并；\n5. 聚集函数；\n6. DISTINCT；\n7. 导出 (计算) 列。\n\n\n\n### 存储过程\n\n存储过程简单来说，就是为以后的使用而保存的一条或多条MySQL语句的集合。\n\n\n\n* 为什么使用存储过程\n\n1. 通过把处理封装在容易使用的单元中，简化复杂的操作(正如前面例子所述)。\n2. 由于不要求反复建立一系列处理步骤，这保证了处理的统一性，也就保证了数据的完整性。\n3. 简化对变动的管理。如果表名、列名或业务逻辑有变化，只需要更改存储过程的代码即可。\n\n(2 和 3 在一定的程度上来说都可以延伸为安全性。通过存储过程限制对基础数据的访问减少数据讹误的机会)\n\n4. 提高性能。使用存储过程比使用单独的SQL语句要快。\n5. 存在一些只能用在单个请求中的MySQL元素和特性，存储过程可以使用它们来编写功能更强更灵活的代码。\n\n\n\n* 执行存储过程\n\nMySQL称存储过程的执行为调用，MySQL执行存储过程的语句为`CALL`。`CALL`接受存储过程的名字以及需要传递给它的任意参数。\n\n```mysql\nCALL 存储过程名(@param_1,\n              @param_2,\n              @param_3);\n```\n\n\n\n* 创建存储过程\n\n```mysql\nCREATE PROCEDURE 存储过程名()\nBEGIN\n\t待执行的SQL语句\nEND;\n```\n\n示例:\n\n```mysql\nCREATE PROCEDURE productpricing()\nBEGIN\n\tSELECT Avg(prod_price) AS priceaverage\n\tFROM products;\nEND;\n```\n\n\n\n* 删除存储过程\n\n```mysql\nDROP PROCEDURE productpricing;\n```\n\n\n\n\n\n* 注意事项--mysql命令行客户机的分隔符\n\n默认的MySQL语句分隔符为`；`。因为存储过程中的语句中也以`;`作为结束，因此在命令行客户机中使用`END；`时，应临时更改命令行实用程序的语句分隔符，稍作修改，如示：\n\n```mysql\nDELIMITER\t//\nCREATE PROCEDURE productpricing()\nBEGIN\n\tSELECT Avg(prod_price) AS priceaverage\n\tFROM products;\nEND\t//\n\nDELIMITER ;\n```\n\n说明：`DELIMITER` 可以告诉命令行使用程序使用其所带符号作为新的语句结束分隔符。\n\n\n\n* 使用参数\n\n**变量**：内存中一个特定的位置，用来临时存储数据。\n\n**变量名**：所有MySQL变量都必须以@开始。\n\n```mysql\nCREATE PROCEDURE productpricing(\n\tOUT pl DECIMAL(8,2),\n    OUT ph DECIMAL(8,2),\n    OUT pa DECIMAL(8,2)\n)\n\nBEGIN \n\tSELECT Min(prod_price)\n\tINTO pl\n\tFROM products;\n\tSELECT Max(prod_price)\n\tINTO ph\n\tFROM products;\n\tSELECT Avg(prod_price)\n\tINTO pa\n\tFROM products;\nEND;\n```\n\n说明：\n\n此存储过程接受三个参数。在创建带参数的存储过程时，每个参数必须具有指定的类型。关键字`OUT`指出相应的参数用来从存储过程传出一个值(返回给调用者)。MySQL支持`IN`（传递给存储过程）、`OUT` (从存储过程传出一个值，返回给调用者)和`INOUT`(对存储过程传入和传出)类型的参数。存储过程位于`BEGIN`和`END`语句内。\n\n```mysql\nCALL productpricing(@pricelow,\n                    @pricehigh,\n                   \t@priceaverage);\n```\n\n说明：在调用时，这条语句并不显示任何数据。它返回以后可以显示(或在其他处理中使用)的变量。\n\n\n\n* 建立智能存储过程\n\n存储过程可以包含业务规则和处理逻辑。这将使得存储过程更加的智能。\n\n\n\n* 检查存储过程\n\n可以使用`SHOW CREATE PROCEDURE`来显示一个创建存储过程的语句。\n\n```mysql\nSHOW CREATE PROCEDURE productpricing;\n```\n\n如果要获得包括何时、由谁创建等详细信息的存储过程列表，可以使用`SHOW PROCEDURE STATUS`。\n\n```mysql\nSHOW PROCEDURE STATUS LIKE 'productpricing';\n```\n\n\n\n### 游标\n\n游标(cursor)是一个存储在MySQL服务器上的数据库查询，它不是一条`SELECT`语句，而是被该语句检索出来的结果集。在存储了游标之后，应用程序可以根据需要滚动或浏览其中的数据。游标主要用户交互式应用。\n\n\n\n* 使用游标\n\n使用游标涉及几个明确的步骤。\n\n1. 在能够使用游标前，必须声明(定义)它。这个过程实际上没有检索数据，它只是定义要使用的`SELECT`语句。\n2. 一旦声明后，必须打开游标以供使用。这个过程用前面定义的`SELECT`语句把数据实际检索出来。\n3. 对于填有数据的游标，根据需要取出(检索各行)。\n4. 在结束游标使用时，必须关闭游标。\n\n\n\n* 创建游标\n\n游标用`DECLARE`语句创建。`DECLARE`命名游标，并定义相应的`SELECT`语句，根据需要带`WHERE`和其他子句。例如，下面的语句定义了名为`ordernumbers`的游标，使用了可以检索所有订单的`SELECT`语句。\n\n**DECLARE语句的次序**：`DECLARE`语句的发布存在特定的次序。用`DECLARE`语句定义的局部变量必须在定义任意游标或句柄之前定义，而句柄必须在游标之后定义。\n\n```mysql\nCREATE PROCEDURE processorders()\nBEGIN \t\n\tDECLARE ordernumbers CURSOR\n\tFOR\n\tSELECT order_num FROM orders;\nEND;\n```\n\n说明：这个游标在存储过程处理完成后消失，它局限于存储过程。\n\n\n\n* 打开和关闭游标\n\n```mysql\nOPEN 游标名;#打开游标\nCLOSE 游标名;#关闭游标\n```\n\n**如果不明确关闭游标，MySQL将会在到达`END`语句时自动关闭它**。\n\n\n\n* 使用游标数据\n\n在一个游标被打开后，可以使用`FETCH`语句分别访问它的每一行。`FETCH`指定检索什么数据(所需的列)，检索出来的数据存储在什么地方。它还向前移动游标中的内部行指针，使下一条`FETCH`语句检索下一行(不重复读取同一行)。\n\n```mysql\nCREATE PROCEDURE local processorders()\nBEGIN\n\t--Declare local variables\n\tDECLARE done BOOLEAN DEFAULT 0;\n\tDECLARE o INT;\n\t\n\t--Declare the cursor\n\tDECLARE ordernumbers CURSOR\n\tFOR\n\tSELECT order_num FROM orders;\n\t--Declare continue handler\n\tDECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done=1;\n\t\n\t--Open the cursor\n\tOPEN ordernumbers;\n\t\n\t--Loop through all rows\n\tREPEAT\n\t\t--Get order number\n\t\tFETCH ordernumbers INTO o;\n\t\t\n\t--End of Loop\n\tUNTIL done END REPEAT;\n\t\n\t--Close the cursor\n\tCLOSE ordernumbers;\nEND;\n```\n\n说明：这里需要着重说明下语句：\n\n```mysql\nDECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done=1;\n```\n\n这条语句定义了一个`CONTINUE HANDLER`,它是在条件出现时被执行的代码。它指出当`SQLSTATE '02000'`出现时，`SET done=1`。`SQLSTATE '02000'`是一个未找到条件，当`REPEAT`由于没有更多的行供循环而不能继续时，出现这个条件。\n\n\n\n### 触发器\n\n触发器是MySQL响应以下任意语句而自动执行的一条MySQL语句(或位于`BEGIN`和`END`语句之间的一组语句):\n\n1. `DELETE`\n2. `INSERT`\n3. `UPDATE`\n\n**只有表才支持触发器，视图不支持(临时表也不支持)**。\n\n**触发器按每个表每个事件每次地定义，每个表每个事件每次只允许一个触发器，因此每个表最多支持6个触发器**。\n\n**MySQL触发器不支持`CALL`语句，这表示不能从触发器内调用存储过程。所需的存储过程代码需要复制到触发器中**。\n\n\n\n* 创建触发器\n\n在创建触发器时，需要给出4条信息：\n\n1. 唯一的触发器名;\n2. 触发器关联的表；\n3. 触发器应该响应的活动(`DELETE`、`INSERT`或`UPDATE`)；\n4. 触发器何时执行(处理之前或之后)。`AFTER` or`BEFORE`。\n\n```mysql\nCREATE TRIGGER 触发器名 AFTER INSERT ON 关联表名\nFOR EACH ROW SELECT '显示文本';\n# 这里的显示文本非必须，只是一个示例。类似语句将在每次成功插入数据后，显示\"显示文本\"。\n```\n\n\n\n* 删除触发器\n\n```mysql\nDROP TRIGGER 触发器名;\n```\n\n\n\n* INSERT触发器\n\nINSERT触发器在`INSERT`语句之前或之后执行。需要知道以下几点:\n\n1. 在INSERT触发器代码内，可引用一个名为NEW的虚拟表，访问被插入的行；\n2. 在BEFORE INSERT触发器中，NEW中的值也可以被更新(允许更改被插入的值)；\n3. 对于`AUTO_INCREMENT`列，NEW在`INSERT`执行之前包含0，在`INSERT`执行之后包含新的自动生成值。\n\n\n\n* DELETE触发器\n\nDELETE触发器在`DELETE`语句执行之前或之后执行。需要知道以下两点:\n\n1. 在`DELETE`触发器代码内，你可以引用一个名为OLD的虚拟表，访问被删除的行；\n2. `OLD`中的值全都是只读的，不能更新。\n\n```mysql\nCREATE TRIGGER deleteorder BEFORE DELETE ON orders\nFOR EACH ROW\nBEGIN \n\tINSERT INTO archive_orders(order_num,order_date,cust_id)\n\tVALUES(OLD.order_num,OLD.order_date,OLD.cust_id)\nEND;\n```\n\n说明：上述例子演示使用OLD虚拟表保存将要被删除的行到一个存档表中。同时，上述例子还是用了多语句触发器的技巧，使得触发器能够容纳多条语句。\n\n\n\n* UPDATE触发器\n\nUPDATE触发器在`UPDATE`语句执行之前或之后执行。需要知道以下几点：\n\n1. 在UPDATE触发器代码中，你可以引用一个名为OLD的虚拟表访问以前(UPDATE语句之前)的值，引用一个名为NEW的虚拟表访问新的更新的值；\n2. 在BEFORE UPDATE触发器中，NEW中的值可能也被更新(允许更改将用于`UPDATE`语句中的值)；\n3. OLD中的值全都是只读的，不能更新。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/SQL/mysql/note.md","raw":"---\ntitle: mysql基础知识\ndate: 2020-07-17 11:56:11\ncategories:\n  - [SQL, MYSQL]\ntags:\n  - MYSQL\n---\n\n[TOC]\n\n### 声明\n\n以下所有相关命令行内容均基于ubuntu18.04。具体学习过程源自书籍《MySQL必知必会》。\n\n\n\n### 关系数据库的基础知识\n\n* 关系表\n\n理解关系表的最好办法是看一个现实的例子。\n\n```c\n/*\n假如有一个包含产品目录的数据库表，其中每种类别的物品占一行。对于每种物品要存储的信息包括产品描述和价格，以及生产该产品的供应商信息。\n现在，假如有由同一供应商生产的多种物品，那么在何处存储供应商信息（如，供应商名、地址、联系方法等）呢？将这些数据与产品信息分开存储有如下几个重要的理由。\n\n1. 因为同一个供应商生产的每个产品的供应商信息都是相同的，对每个产品重复此信息既浪费时间又浪费空间。\n2. 如果供应商信息改变，只需改变一次即可。\n3. 如果有重复数据（即每种产品都存储供应商信息），很难保证每次输入该数据的方式都相同。不一致的数据在报表中很\t  难利用。\n\n*/\n```\n\n1. **相同的数据出现多次决不是一件好事，此因素时关系数据库设计的基础。**\n\n2. **关系表的设计就是要保证把信息分解成多个表，一类数据一个表。各表通过某些常用的值（即关系设计中的关系）互相关联。**\n\n3. 关系数据库的可伸缩性远比非关系数据库要好。\n\n**主键**：唯一标识表中每行的这个列（或这组列）称为主键。\n\n**外键**：外键为某个表中的一列，它包含另一个表的主键值，定义了两个表之间的关系。\n\n\n\n\n\n\n\n### MySQL的登录\n\n```\nmysql -h 127.0.0.1 -u root -p \n```\n\n参数说明：\n\n- **-h** : 指定客户端所要登录的 MySQL 主机名, 登录本机(localhost 或 127.0.0.1)该参数可以省略;\n- **-u** : 登录的用户名;\n- **-p** : 告诉服务器将会使用一个密码来登录, 如果所要登录的用户名密码为空, 可以忽略此选项。\n\n\n\n### 建立一个新的数据库\n\n```mysql\nCREATE DATABASE learning;\n```\n\n这样就创建了一个名为 _learning_ 的数据库（数据源）\n\n### 使用一个指定的数据库\n\n```mysql\nUSE learning;\n```\n\n### 执行SQL脚本文件\n\n```mysql\nsource XX.sql\n```\n\n注意：XX.sql 需要路径支持\n\n### 显示内容\n\n```mysql\nSHOW DATABASES; //显示存在的数据库\nSHOW TABLES;\t//显示当前数据库存在的表\nSHOW COLUMNS FROM TABLES;\t//显示表列\n```\n\n\n\n### 检索数据\n\n1. **数据的格式化是一个表示问题，而不是一个检索问题**\n\n\n\n* 检索单个列\n\n```mysql\nSELECT 待检索列名 FROM 预检索表名;\n```\n\n* 检索多个列\n\n```mysql\nSELECT 待检索列名1,待检索列名2,待检索列名3,...,最后一个待检索列名 FROM 预检索表名;\n```\n\n* 检索所有列\n\n```mysql\nSELECT * FROM 预检索表名;\t\t\n```\n\n* 检索时只返回不同的值\n\n```mysql\nSELECT DISTINCT 待检索列名 FROM 预检索表名;\n```\n\n注： DISTINCT 关键字应用于所有列而不是它的前置列。意味着当检索了多个列时，只有每个列的所有行都不同，才被检索出来。\n\n* 限制检索结果数量\n\n```mysql\nSELECT 待检索列名 FROM 预检索表名 LIMIT 检索开始位置，要检索的行数;\n```\n\n注： 检索开始位置可省略，默认为0；如：\n\n```Mysql\nSELECT prod_name FROM products LIMIT 5;\n```\n\n返回不多于5行，从第  行0  开始（位置参数为0）。\n\n\n\n### 排序检索数据\n\n1. **关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有意义**\n\n* **子句**\n\nSQL语句由子句组成，有些是必需的，有些是可选的。一个子句通常由一个关键字和所提供的数据组成。当前最明显的例子便是 `SELECT `语句的 ```FROM``` 子句。\n\n* 字句的顺序\n\n在给出 `ORDER BY` 字句时，应该保证它位于 `FROM` 字句之后。如果使用 `LIMIT` ,它必须位于 `ORDER BY` 之后。使用子句的次序不对将产生错误消息。\n\n* 单列排序\n\n```mysql\nSELECT 待检索列名 FROM 预检索表名 ORDER BY 带检索列名;\n```\n\n注： 可以通过非选择检索列进行排序。\n\n* 多列排序\n\n```mysql\nSELECT 待检索列名1,待检索列名2,待检索列名3 FROM 预检索表名 ORDER BY 待检索列名2,待检索列名3;\n```\n\n在上述排序中，将优先按照  _待检索列名2_  进行排序，仅在多个行具有相同的  _待检索列名2_  时才按 _待检索列名3_\n\n进行再排序。\n\n* 指定排序顺序\n\n```mysql\nSELECT 待检索列名1,待检索列名2,待检索列名3 FROM 预检索表名 ORDER BY 待检索列名1 DESC,待检索列名2;\n```\n\n数据排序默认以升序排序进行。当要进行 **降序排序** 时，必须指定 ```DESC``` 关键字。 **升序排序** 的关键字为 ```ASC```。\n\n注意： 与 ```DISTINCT``` 关键字不同，```DESC``` 关键字只应用到直接位于其前面的列名。在上述排序命令中，降序只对待检索列名1进行指定，而待检索列名2仍然以默认的升序进行排序。\n\n\n\n### 过滤数据\n\n只检索所需数据需要指定 _搜索条件(search criteria)_ ，搜索条件也成为 _过滤条件_。\n\n1. **MySQL在执行匹配时默认不区分大小写**\n\n* 子句顺序\n\n`WHERE`子句在表名`FROM`子句之后给出。\n\n在同时使用了 `ORDER BY` 子句和 `WHERE` 子句时，应该让 `ORDER BY` 位于 `WHERE` 之后，否则会产生错误。\n\n* WHERE子句条件操作符\n\n[][]\n\n| 操作符  | 说明             |\n| ------- | ---------------- |\n| =       | 等于             |\n| <>      | 不等于           |\n| !=      | 不等于           |\n| <       | 小于             |\n| <=      | 小于等于         |\n| >       | 大于             |\n| >=      | 大于等于         |\n| BETWEEN | 在指定两个值之间 |\n\n* 检查单个值\n\n```mysql\nSELECT 待检索列名1，待检索列名2 FROM 预检索表名 WHERE 待匹配列名 操作符 范围值;\n```\n\n注：待匹配列名 可以是 选择检索列也可以是非选择检索列。\n\n比较字符串时需要用单引号来进行限定。数值比较则不需要引号。如：\n\n```mysql\nSELECT prod_name,prod_price FROM products WHERE prod_name = 'fuses';\nSELECT vend_id,prod_name FROM products WHERE vend_id <> 1003;\n```\n\n* 检测范围值\n\n```mysql\nSELECT 待检索列名1，待检索列名2 FROM 预检索表名 WHERE 待匹配列名 BETWEEN 开始值 AND 结束值;\n```\n\n注： `BETWEEN` 匹配范围中所有的值，包括指定的开始值和结束值。\n\n* 空值检查\n\n在创建表时，可以指定其中的列是否可以不包含值。在一个列不包含值时，称其为包含空值 **NULL**。\n\n**NULL** 无值，它与字段包含0、空字符串或仅仅包含空格不同。\n\n```MYSQL\nSELECT 待检索列名1 FROM 预检索表名 WHERE 待匹配列名 IS NULL;\t \n```\n\nNULL与不匹配：\n\n在通过过滤选择出不具有特定值的行时，你可能希望返回具有NULL值的行。但是，不行。\n\n因为未知具有特殊含义，数据库不知道他们是否匹配，所以在匹配过滤或者不匹配过滤时不返回它们。\n\n因此，在过滤数据时，一定要验证返回数据中确实给出了被过滤列具有NULL的行。\n\n* 组合条件检查\n\n1. **MySQL支持使用NOT对IN、BETWEEN和EXISTS子句取反**\n\n| 逻辑操作符 | 含义         |\n| ---------- | ------------ |\n| AND        | 与           |\n| OR         | 或           |\n| NOT        | 非           |\n| IN         | 指定条件范围 |\n\n计算次序：SQL像大多数语言一样，优先处理`AND`操作符。因此要使用圆括号明确地分组相应的操作符。示例：\n\n```mysql\nSELECT prod_name,prod_price FROM products \nWHERE (vend_id = 1002 OR vend_id = 1003) AND prod_price >= 10;\n\nSELECT prod_name,prod_price FROM products WHERE vend_id IN (1002,1003) ORDER BY prod_name;\n\nSELECT prod_name,prod_price FROM products WHERE vend_id NOT IN (1002,1003);\n```\n\n* 通配符过滤\n\n**通配符**: 用来匹配值的一部分的特殊字符。\n\n**搜索模式**:由字面值、通配符或者两者组合而成的搜索条件。\n\n为在搜索子句中使用通配符，必须使用`LIKE`操作符。`LIKE`指示MySQL，后跟的搜索模式利用通配符匹配而不是直接使用相等匹配进行比较。\n\n**使用通配符的技巧**:\n\n1. 不要过度使用通配符。在能达到目的的情况下优先使用其他操作符。\n2. 除非绝对必要，不要把通配符放在搜索模式的开始处。把通配符置于搜索模式的开始处，搜索起来最慢。\n\n| 通配符 | 作用                            |\n| ------ | ------------------------------- |\n| %      | 任何字符出现任意次数            |\n| _      | 和%作用一样，但是只匹配单个字符 |\n\n注： 通配符不可以匹配 NULL。\n\n```MYSQL\nSELECT 待检索列名1，待检索列名2 FROM 预检索表名 WHERE 待匹配列名 LIKE '%sample';\n```\n\n\n\n### 正则表达式搜索\n\nMySQL使用`WHERE`对正则表达式提供了初步的支持，允许你指定正则表达式，过滤`SELECT`检索出来的数据。\n\n1. **MySQL仅支持多数正则表达式实现的一个很小的子集**。\n\n2. **`LIKE`与`REGEXP`之间存在着一个终于差别，`LIKE`匹配整个列，而`REGEXP`在列值中进行匹配**。\n\n3. **MySQL中的正则表达式匹配不区分大小写。为区分大小写需要使用`BINARY`关键字。如：\n\n    `WHERE prod_name REGEXP BINARY 'JetPack .000'`\n\n* 基本字符匹配\n\n```mysql\nSELECT prod_name FROM products WHERE prod_name REGEXP '.000' ORDER BY prod_name;\n```\n\n示例输出:\n\n```shell\n+--------------+\n| prod_name    |\n+--------------+\n| JetPack 1000 |\n| JetPack 2000 |\n+--------------+\n```\n\n* 匹配几个字符之一\n\n```mysql\nSELECT prod_name FROM products WHERE prod_name REGEXP '[123] Ton' ORDER BY prod_name;\n```\n\n示例输出：\n\n```shell\n+-------------+\n| prod_name   |\n+-------------+\n| 1 ton anvil |\n| 2 ton anvil |\n+-------------+\n```\n\n* 匹配特殊字符\n\nMySQL的转义使用`\\\\`两个反斜杠。MySQL自己解析一个，正则表达式解析另一个。\n\n| 空白元字符 | 说明     |\n| ---------- | -------- |\n| \\\\\\f       | 换页     |\n| \\\\\\n       | 换行     |\n| \\\\\\r       | 回车     |\n| \\\\\\t       | 制表符   |\n| \\\\\\v       | 纵向制表 |\n\n说明：每个元字符前面**只有两个反斜杠**，此处为了抵消掉markdown的语法，写了三个。\n\n| 重复元字符 | 说明                          |\n| ---------- | ----------------------------- |\n| *          | 0个或多个匹配                 |\n| +          | 1个或多个匹配（ 等于{1,} ）   |\n| ?          | 0个或1个匹配 （ 等于{0,,1} ） |\n| {n}        | 指定数目的匹配                |\n| {n,}       | 不少于指定数目的匹配          |\n| {n,m}      | 匹配数目的范围（m不超过255）  |\n\n* 预定义字符集，字符类\n\n| 字符类     | 说明                                                 |\n| ---------- | ---------------------------------------------------- |\n| [:alnum:]  | 任意字母和数字(同[a-ZA-Z0-9])                        |\n| [:alpha:]  | 任意字符([a-zA-Z])                                   |\n| [:blank:]  | 空格和制表(同[\\\\\\t])                                 |\n| [:cntrl:]  | ASCII控制字符(ASCII0到31和127)                       |\n| [:digit:]  | 任意数字(同[0-9])                                    |\n| [:graph:]  | 与[:print:]相同，但不包括空格                        |\n| [:lower:]  | 任意小写字母(同[a-z])                                |\n| [:print:]  | 任意可打印字符                                       |\n| [:punct:]  | 既不在[:alnum:]又不在[:cntrl:]中的任意字符           |\n| [:space:]  | 包括空格在内的任意空白字符(同[\\\\\\f\\\\\\n\\\\\\r\\\\\\t\\\\\\v]) |\n| [:upper:]  | 任意大写字母(同[A-Z])                                |\n| [:xdigit:] | 任意十六进制数字(同[a-fA-F0-9])                      |\n\n说明：每个双反斜杠**只有两个反斜杠**，此处为了抵消掉markdown的语法，写了三个。\n\n* 定位元字符\n\n| 定位元字符 | 说明       |\n| ---------- | ---------- |\n| ^          | 文本的开始 |\n| $          | 文本的结尾 |\n| [[:<:]]    | 词的开始   |\n| [[:>:]]    | 词的结尾   |\n\n* 简单的正则表达式测试\n\n可以在不使用数据库表的情况下使用`SELECT`来测试正则表达式。`REGEXP`检查总是返回0(没有匹配)或者1(匹配)。可以用带文字串的REFEXP来测试表达式，并试验它们。如：\n\n```mysql\nSELECT 'hello' REGEXP '[0-9]';\n```\n\n示例输出：\n\n```shell\n+------------------------+\n| 'hello' REGEXP '[0-9]' |\n+------------------------+\n|                      0 |\n+------------------------+\n```\n\n\n\n### 创建计算字段\n\n* 拼接\n\n拼接是指将值联结到一起构成单个值。在MySQL的`SELECT`语句中，可使用`Concat()`函数来拼接两个列。\n\n```mysql\nSELECT Concat(vend_name,' (',vend_country,')') FROM vendors ORDER BY vend_name;\n```\n\n示例输出:\n\n```shell\n+-----------------------------------------+\n| Concat(vend_name,' (',vend_country,')') |\n+-----------------------------------------+\n| ACME (USA)                              |\n| Anvils R Us (USA)                       |\n| Furball Inc. (USA)                      |\n| Jet Set (England)                       |\n| Jouets Et Ours (France)                 |\n| LT Supplies (USA)                       |\n+-----------------------------------------+\n```\n\n* 格式调整\n\n可以使用`Trim()`函数去掉串左右两边的空格。`LTrim()`去掉串左边的空格。`RTtim()`去掉串右边的空格。\n\n```mysql\nSELECT Concat(RTrim(vend_name),' (',RTrim(vend_country),')') FROM vendors ORDER BY vend_name;\n```\n\n* 使用别名(alias)\n\n别名：一个字段或值的替换名。别名使用`AS`关键字赋予。\n\n别名的常见用途：在实际的表列名包含不符合规定的字符（如空格）时重新命名它，在原来的名字含混或容易误解 \t\t\t\t\t\t\t   时扩充它等等。\n\n```mysql\nSELECT Concat(RTrim(vend_name),' (',RTrim(vend_country),')') AS vend_title FROM vendors\nORDER BY vend_name;\t\n```\n\n示例输出：\n\n```shell\n+-------------------------+\n| vend_title              |\n+-------------------------+\n| ACME (USA)              |\n| Anvils R Us (USA)       |\n| Furball Inc. (USA)      |\n| Jet Set (England)       |\n| Jouets Et Ours (France) |\n| LT Supplies (USA)       |\n+-------------------------+\n```\n\n注: 仔细观察拼接段落的示例，很容易就可以看出两者的区别。\n\n* 执行算术计算\n\n计算字段的另一常见用途是对检索出的数据进行算术计算。\n\n测试计算：`SELECT`可以省略`FROM`子句以便简单地访问和处理表达式。如`SELECT 3*2;` `SELECT Now();`。\n\n```mysql\nSELECT prod_id,quantity,item_price FROM orderitems WHERE order_num = 20005;\nSELECT prod_id,quantity,item_price,\n\t   quantity*item_price AS expanded_price\nFROM orderitems WHERE order_num = 20005;\n```\n\n示例输出:\n\n```shell\n+---------+----------+------------+\n| prod_id | quantity | item_price |\n+---------+----------+------------+\n| ANV01   |       10 |       5.99 |\n| ANV02   |        3 |       9.99 |\n| TNT2    |        5 |      10.00 |\n| FB      |        1 |      10.00 |\n+---------+----------+------------+\n==============================================================\n+---------+----------+------------+----------------+\n| prod_id | quantity | item_price | expanded_price |\n+---------+----------+------------+----------------+\n| ANV01   |       10 |       5.99 |          59.90 |\n| ANV02   |        3 |       9.99 |          29.97 |\n| TNT2    |        5 |      10.00 |          50.00 |\n| FB      |        1 |      10.00 |          10.00 |\n+---------+----------+------------+----------------+\n```\n\n\n\n### 使用数据处理函数\n\nSQL支持利用函数来处理数据。函数一般是在数据上执行的，它给数据的转换和处理提供了方便。\n\n**函数没有SQL的可移植性强，如果决定使用函数，应该保证做好代码注释**\n\n**大多数SQL实现支持以下类型的函数：**\n\n1. 用于处理文本串的文本函数\n2. 用于在数值数据上进行算术操作的数值函数\n3. 用于处理日期和时间值并从这些值中提取特定成分的日期和时间函数\n4. 返回DBMS正使用的特殊信息（如返回用户登录信息，检查版本细节）的系统函数。\n\n\n\n* 文本处理函数\n\n常用的文本处理函数如下：\n\n| 函数        | 说明              |\n| ----------- | ----------------- |\n| Left()      | 返回串左边的字符  |\n| Length()    | 返回串的长度      |\n| Locate()    | 找出串的一个子串  |\n| Lower()     | 将串转换为小写    |\n| LTrim()     | 去掉串左边的空格  |\n| Right()     | 返回串右边的字符  |\n| RTrim()     | 去掉串右边的空格  |\n| Soundex()   | 返回串的SOUNDEX值 |\n| SubString() | 返回子串的字符    |\n| Upper()     | 将串转换为大写    |\n\n\n\n* 日期和时间处理函数\n\n**用日期进行过滤需要注意一些别的问题和使用特殊的MySQL函数**\n\n1. 无论什么时候指定一个日期，不管是插入或更新表值还是用WHERE字句进行过滤，日期格式必须为yyyy-mm=dd。这是首选的日期格式，因为它排除了多义性。\n\n常用日期和时间处理函数如下：\n\n| 函数          | 说明                             |\n| ------------- | -------------------------------- |\n| AddDate()     | 增加一个日期（天、周等）         |\n| AddTime()     | 增加一个时间（时、分等）         |\n| CurDate()     | 返回当前日期                     |\n| CurTime()     | 返回当前时间                     |\n| Date()        | 返回日期时间的日期部分           |\n| DateDiff()    | 计算两个日期之差                 |\n| Date_Add()    | 高度灵活的日期运算函数           |\n| Date_Format() | 返回一个格式化的日期或时间串     |\n| Day()         | 返回一个日期的天数部分           |\n| DayOfWeek()   | 对于一个日期，返回对应的是星期几 |\n| Hour()        | 返回一个时间的小时部分           |\n| Minute()      | 返回一个时间的分钟部分           |\n| Month()       | 返回一个时期的月份部分           |\n| Now()         | 返回当前日期和时间               |\n| Second()      | 返回一个时间的秒部分             |\n| Time()        | 返回一个日期时间的时间部分       |\n| Year()        | 返回一个日期的年份部分           |\n\n\n\n* 数值处理函数\n\n常用数值处理函数如下：\n\n| 函数   | 说明               |\n| ------ | ------------------ |\n| Abs()  | 返回一个数的绝对值 |\n| Cos()  | 返回一个角度的余弦 |\n| Exp()  | 返回一个数的指数值 |\n| Mod()  | 返回除操作的余数   |\n| Pi()   | 返回圆周率         |\n| Rand() | 返回一个随机数     |\n| Sin()  | 返回一个角度的正弦 |\n| Sqrt() | 返回一个数的平方根 |\n\n\n\n### 汇总数据\n\n* 聚集 函数\n\n我们经常需要汇总数据而不用把它们实际检索出来，为此MySQL提供了专门的函数。这些函数就是**聚集函数**。\n\n**聚集函数：**运行在行组上，计算和返回单个值的函数。\n\n**标准偏差聚集函数**\n\n\n\nSQL聚集函数表：\n\n| 函数    | 说明             |\n| ------- | ---------------- |\n| AVG()   | 返回某列的平均值 |\n| COUNT() | 返回某列的行数   |\n| MAX()   | 返回某列的最大值 |\n| MIN()   | 返回某列的最小值 |\n| SUM()   | 返回某列值之和   |\n\n补充说明：\n\nAVG()：只能用来确定特定数值列的平均值，而且列名必须作为函数参数给出。为了获得多个列的平均值，必须使\t\t\t 用多个AVG()函数。\n\n​\t\t\t AVG()函数忽略列值为`NULL`的行。\n\nCOUNT(): 如果指定列名，则指定列值为`NULL`的行被COUNT()函数忽略，但如果COUNT()函数中用的是星号(*),则\t\t\t\t 不忽略。\n\nMAX()：忽略列值为`NULL`的行。\n\nMIN()：忽略列值为`NULL`的行。\t\n\nSUM()：忽略列值为`NULL`的行。\n\n\n\n* 聚集不同值\n\n1. **不允许使用COUNT( DISTINCT )**\n\n以上5个聚集函数都可以如下使用：\n\n1. 对所有的行执行计算，指定`ALL`参数或不给参数(默认为`ALL`)。\n\n2. 只包含不同的值，指定`DISTINCT`参数。\n\n ```mysql\nSELECT AVG(prod_price) AS avg_price FROM products WHERE vend_id = 1003;\nSELECT AVG(DISTINCT prod_price) AS avg_price FROM products WHERE vend_id = 1003;\n ```\n\n示例输出：\n\n```shell\n+-----------+\n| avg_price |\n+-----------+\n| 13.212857 |\n+-----------+\n================================================\n+-----------+\n| avg_price |\n+-----------+\n| 15.998000 |\n+-----------+\n```\n\n* 组合聚集函数\n\n`SELECT`语句可根据需要包含多个聚集函数。\n\n```mysql\nSELECT COUNT(*) AS num_items,\n\t   MIN(prod_price) AS price_min,\n\t   MAX(prod_price) AS price_max,\n\t   AVG(prod_price) AS price_avg\nFROM products;\n```\n\n示例输出：\n\n```shell\n+-----------+-----------+-----------+-----------+\n| num_items | price_min | price_max | price_avg |\n+-----------+-----------+-----------+-----------+\n|        14 |      2.50 |     55.00 | 16.133571 |\n+-----------+-----------+-----------+-----------+\n```\n\n  \n\n### 分组数据\n\n* 数据分组\n\n**分组**允许把数据分为多个逻辑组，以便能对每个组进行聚集计算。分组是在`SELECT`语句的`GROUP BY`子句中建立的。\n\n**子句顺序**：`GROUP BY`子句必须出现在`WHERE`子句之后，`ORDER BY`子句之前。\n\n```mysql\nSELECT vend_id,COUNT(*) AS num_prods \nFROM products \nGROUP BY vend_id;\n```\n\n示例输出：\n\n```shell\n+---------+-----------+\n| vend_id | num_prods |\n+---------+-----------+\n|    1001 |         3 |\n|    1002 |         2 |\n|    1003 |         7 |\n|    1005 |         2 |\n+---------+-----------+\n```\n\n说明：上述的`SELECT`语句指定了两个列，vend_id包含产品供应商的ID,num_prods为计算字段(用COUNT(*)函数建立)。`GROUP BY`子句指示MySQL按照vend_id排序并分组数据。这导致对每个vend_id而不是整个表计算num_prods一次。从输出中可以看到，供应商1001有3个产品，供应商1002有2个产品，供应商1003有7个产品，而供应商1005有2个产品。\n\n`GROUP BY`子句后还可以跟`WITH ROLLUP`关键字，表示在分组统计的基础上再次进行汇总统计（在每个分组下都会有汇总统计）。\n\n[更多内容参考][https://blog.csdn.net/qq_42254088/article/details/81904819]\n\n```mysql\nSELECT vend_id,COUNT(*) AS num_prods\nFROM products\nGROUP BY vend_id WITH ROLLUP;\n```\n\n示例输出：\n\n```shell\n+---------+-----------+\n| vend_id | num_prods |\n+---------+-----------+\n|    1001 |         3 |\n|    1002 |         2 |\n|    1003 |         7 |\n|    1005 |         2 |\n|    NULL |        14 |\n+---------+-----------+\n```\n\n**`GROUP BY`字句的重要规定**:\n\n1. `GROUP BY`子句可以包含任意数目的列。这使得能对分组进行嵌套，为数据分组提供更细致的控制。\n2. 如果在`GROUP BY`子句中嵌套了分组，数据将在最后规定的分组上进行汇总。换句话说，在建立分组时，指定的所有列都一起计算，不能再从个别的列中取回数据。\n3. `GROUP BY`子句中列出的每个列都必须是**检索列**或**有效的表达式**（但不能是聚集函数）。如果`SELECT`中使用表达式，则必须在`GROUP BY`子句中指定相同的表达式。**不能使用别名**。\n\n4. 除聚集计算语句外，`SELECT`语句中的每个列都必须在`GROUP BY`子句中给出。\n5. 如果分组列中具有`NULL`值，则`NULL`将作为一个分组返回。如果列中有多行`NULL`值，它们将分为一组。\n6. `GROUP BY`子句必须出现在`WHERE`子句之后，`ORDER BY`子句之前。\n\n\n\n* 过滤分组\n\n除了能用`GROUP BY`分组数据外，MySQL还允许过滤分组。\n\n`WHERE`的过滤指定的是行而不是分组。`WHERE`没有分组的概念。为了实现分组过滤，需要使用`HAVING`子句，`HAVING`非常类似于`WHERE`，它能替代绝大部分的`WHERE`功能。两者唯一的差别是`WHERE`过滤行，而`HAVING`过滤分组。\n\n**`HAVING`支持所有`WHERE`操作符**。\n\n```mysql\nSELECT cust_id,COUNT(*) AS orders \nFROM orders\nGROUP BY cust_id\nHAVING COUNT(*) >= 2;\n```\n\n示例输出：\n\n```shell\n+---------+--------+\n| cust_id | orders |\n+---------+--------+\n|   10001 |      2 |\n+---------+--------+\n```\n\n**同时使用`WHERE`和`HAVING`：**\n\n```mysql\nSELECT vend_id,COUNT(*) AS num_prods\nFROM products\nWHERE prod_price >= 10\nGROUP BY vend_id\nHAVING COUNT(*) >= 2;\n```\n\n示例输出：\n\n```shell\n+---------+-----------+\n| vend_id | num_prods |\n+---------+-----------+\n|    1003 |         4 |\n|    1005 |         2 |\n+---------+-----------+\n```\n\n对于`WHERE`和`HAVING`的差别，也可以结合上述示例换另一种理解方法：\n\n`WHERE`在数据分组前进行过滤，`HAVING`在数据分组后进行过滤。这是一种重要的区别，`WHERE`排除的行不包括在分组中，这可能会改变计算值，从而影响`HAVING`子句中基于这些值过滤掉的分组。\n\n* 分组和排序\n\n仅管我们经常发现用`GROUP BY`分组的数据确实以分组顺序输出，但情况并不总是这样，它不是SQL规范所要求的。因此一般在使用`GROUP BY`时也应该给出`ORDER BY`,以保证数据正确排序。\n\n\n\n### SELECT字句顺序表\n\n| 字句     | 说明               | 是否必须使用             |\n| -------- | ------------------ | ------------------------ |\n| SELECT   | 要返回的列或表达式 | 是                       |\n| FROM     | 从中检索数据的表   | 仅在从表中选择数据时使用 |\n| WHERE    | 行级过滤           | 否                       |\n| GROUP BY | 分组说明           | 仅在按组计算聚集时使用   |\n| HAVING   | 组级过滤           | 否                       |\n| ORDER BY | 输出排序顺序       | 否                       |\n| LIMIT    | 要检索的行数       | 否                       |\n\n\n\n### 子查询\n\n**查询(query)**:任何SQL语句都是查询。但此术语一般值`SELECT`语句。\n\nSQL在版本4.1开始引入子查询的支持。**子查询(subquery)**即嵌套在其他查询中的查询。\n\n1. 对于能嵌套的子查询数目没有限制，不过在实际使用中由于性能的限制，不能嵌套太多的子查询。\n\n```mysql\nSELECT cust_id\nFROM orders \nWHERE order_num IN(SELECT order_num\n                   FROM orderitems\n                   WHERE prod_id = 'TNT2');\n```\n\n示例输出：\n\n```shell\n+---------+\n| cust_id |\n+---------+\n|   10001 |\n|   10004 |\n+---------+\n```\n\n* 作为计算字段使用子查询\n\n```mysql\nSELECT cust_name,\n\t   cust_state,\n\t   (SELECT COUNT(*)\n       \tFROM orders\n        WHERE orders.cust_id = customers.cust_id) AS orders\nFROM customers\nORDER BY cust_name;\n```\n\n示例输出：\n\n```shell\n+----------------+------------+--------+\n| cust_name      | cust_state | orders |\n+----------------+------------+--------+\n| Coyote Inc.    | MI         |      2 |\n| E Fudd         | IL         |      1 |\n| Mouse House    | OH         |      0 |\n| Wascals        | IN         |      1 |\n| Yosemite Place | AZ         |      1 |\n+----------------+------------+--------+\n```\n\n说明：在这个示例中，使用了**完全限定列名**。这里还涉及到了一个新的概念，**相关子查询(correlated  subquery)**，涉及外部查询的子查询。任何时候只要列名可能有多义性，就必须使用这种语法（表名和列名由一个句点分隔）。\n\n \n\n### 联结表\n\nSQL最强大的功能之一就是能在数据检索查询的执行中**联结(join)**表。\n\n**联结**：简单的说联结是一种机制，它不是物理实体，它用来在一条`SELECT`语句中关联表。联结在运行时关联表中\t\t    正确的行。\n\n1. **在一条`SELECT`语句中联结几个表时，相应的关系是在运行中构造的。**\n2. **在联结两个表时，你实际上做的是将第一个表中的每一行与第二个表中的每一行配对。`WHERE`子句作为过滤条件，它只包含那些匹配给定条件（这里是联结条件）的行。**\n3. 由没有联结条件的表关系返回的结果为笛卡尔积。检索出的行的数目将是第一个表中的行数乘以第二个表中的行数。笛卡尔积的联结类型又称为叉联结。\n\n\n\n* 创建联结\n\n```mysql\nSELECT vend_name,prod_name,prod_price\nFROM vendors,products\nWHERE vendors.vend_id = products.vend_id\nORDER BY vend_name,prod_name;\n```\n\n示例输出：\n\n```shell\n+-------------+----------------+------------+\n| vend_name   | prod_name      | prod_price |\n+-------------+----------------+------------+\n| ACME        | Bird seed      |      10.00 |\n| ACME        | Carrots        |       2.50 |\n| ACME        | Detonator      |      13.00 |\n| ACME        | Safe           |      50.00 |\n| ACME        | Sling          |       4.49 |\n| ACME        | TNT (1 stick)  |       2.50 |\n| ACME        | TNT (5 sticks) |      10.00 |\n| Anvils R Us | .5 ton anvil   |       5.99 |\n| Anvils R Us | 1 ton anvil    |       9.99 |\n| Anvils R Us | 2 ton anvil    |      14.99 |\n| Jet Set     | JetPack 1000   |      35.00 |\n| Jet Set     | JetPack 2000   |      55.00 |\n| LT Supplies | Fuses          |       3.42 |\n| LT Supplies | Oil can        |       8.99 |\n+-------------+----------------+------------+\n```\n\n说明：这里使用了`WHERE`子句来正确联结。\n\n* 联结多个表\n\nSQL对于一条`SELECT`语句中可以联结的表的数目没有限制。创建联结的基本规则也相同。\n\n1. 出于性能的考虑，不应该联结太多的表，联结的表越多，性能下降的越厉害。\n\n```mysql\nSELECT prod_name,vend_name,prod_price,quantity\nFROM orderitems,products,vendors\nWHERE products.vend_id = vendors.vend_id\n\t  AND orderitems.prod_id = products.prod_id\n\t  AND order_num = 20005;\n```\n\n示例输出：\n\n```shell\n+----------------+-------------+------------+----------+\n| prod_name      | vend_name   | prod_price | quantity |\n+----------------+-------------+------------+----------+\n| .5 ton anvil   | Anvils R Us |       5.99 |       10 |\n| 1 ton anvil    | Anvils R Us |       9.99 |        3 |\n| TNT (5 sticks) | ACME        |      10.00 |        5 |\n| Bird seed      | ACME        |      10.00 |        1 |\n+----------------+-------------+------------+----------+\n```\n\n* 表别名\n\n表别名只在查询执行中使用。与列别名不一样，表别名不返回到客户机。\n\n```mysql\nSELECT cust_name,cust_contact\nFROM customers AS c,orders AS o,orderitems AS oi\nWHERE c.cust_id = o.cust_id\n  AND oi.order_num = o.order_num\n  AND prod_id = 'TNT2';\n```\n\n示例输出：\n\n```shell\n+----------------+--------------+\n| cust_name      | cust_contact |\n+----------------+--------------+\n| Coyote Inc.    | Y Lee        |\n| Yosemite Place | Y Sam        |\n+----------------+--------------+\n```\n\n\n\n* 内部联结\n\n内部联结又称为等值联结(equijion),它基于两个表之间的相等测试。\n\n对于这种联结可以使用稍微不同的语法来明确指定联结的类型。\n\n1. 尽管使用`WHERE`字句定义的联结的确比较简单，但是使用明确的联结语法能够确保不会忘记联结条件，有时候这样做也能影响性能。\n\n```mysql\nSELECT vend_name,prod_name,prod_price\nFROM vendors INNER JOIN products\nON vendors.vend_id = products.vend_id;\n```\n\n示例输出：\n\n```shell\n+-------------+----------------+------------+\n| vend_name   | prod_name      | prod_price |\n+-------------+----------------+------------+\n| Anvils R Us | .5 ton anvil   |       5.99 |\n| Anvils R Us | 1 ton anvil    |       9.99 |\n| Anvils R Us | 2 ton anvil    |      14.99 |\n| LT Supplies | Fuses          |       3.42 |\n| LT Supplies | Oil can        |       8.99 |\n| ACME        | Detonator      |      13.00 |\n| ACME        | Bird seed      |      10.00 |\n| ACME        | Carrots        |       2.50 |\n| ACME        | Safe           |      50.00 |\n| ACME        | Sling          |       4.49 |\n| ACME        | TNT (1 stick)  |       2.50 |\n| ACME        | TNT (5 sticks) |      10.00 |\n| Jet Set     | JetPack 1000   |      35.00 |\n| Jet Set     | JetPack 2000   |      55.00 |\n+-------------+----------------+------------+\n```\n\n\n\n* 自联结\n\n表自己联结自己的联结类型称为自联结。\n\n**自联结通常作为外部语句用来替代从相同表中检索数据时使用的子查询语句。虽然最终结果是一样的，但是有时候处理联结远比处理子查询快得多**。\n\n```mysql\nSELECT p1.prod_id, p1.prod_name\nFROM products AS p1, products AS p2\nWHERE p1.vend_id = p2.vend_id\n  AND p2.prod_id = 'DTNTR';\n```\n\n示例输出：\n\n```shell\n+---------+----------------+\n| prod_id | prod_name      |\n+---------+----------------+\n| DTNTR   | Detonator      |\n| FB      | Bird seed      |\n| FC      | Carrots        |\n| SAFE    | Safe           |\n| SLING   | Sling          |\n| TNT1    | TNT (1 stick)  |\n| TNT2    | TNT (5 sticks) |\n+---------+----------------+\n```\n\n\n\n* 自然联结\n\n标准联结（内部联结）返回所有数据，甚至相同的列多次出现。自然联结排除多次出现，使每个列只返回一次。\n\n**自然联结是这样一种联结，其中你只能选择那些唯一的列。这一般是通过对表使用通配符`SELECT *`，对所有其他表的列使用明确的子集来完成的。**\n\n```mysql\nSELECT c.*, o.order_num,o.order_date,\n\t   oi.prod_id,oi.quantity,oi.item_price\nFROM customers AS c, orders AS o, orderitems AS oi\nWHERE c.cust_id = o.cust_id\n  AND oi.order_num = o.order_num\n  AND prod_id = 'FB';\n```\n\n示例输出：\n\n```shell\n+---------+-------------+----------------+-----------+------------+----------+--------------+--------------+-----------------+-----------+---------------------+---------+----------+------------+\n| cust_id | cust_name   | cust_address   | cust_city | cust_state | cust_zip | cust_country | cust_contact | cust_email      | order_num | order_date          | prod_id | quantity | item_price |\n+---------+-------------+----------------+-----------+------------+----------+--------------+--------------+-----------------+-----------+---------------------+---------+----------+------------+\n|   10001 | Coyote Inc. | 200 Maple Lane | Detroit   | MI         | 44444    | USA          | Y Lee        | ylee@coyote.com |     20005 | 2005-09-01 00:00:00 | FB      |        1 |      10.00 |\n|   10001 | Coyote Inc. | 200 Maple Lane | Detroit   | MI         | 44444    | USA          | Y Lee        | ylee@coyote.com |     20009 | 2005-10-08 00:00:00 | FB      |        1 |      10.00 |\n+---------+-------------+----------------+-----------+------------+----------+--------------+--------------+-----------------+-----------+---------------------+---------+----------+--\n```\n\n说明：在这个例子中，通配符只对第一个表使用。所有其他列明确列出，所以没有重复的列被检索出来。\n\n\n\n* 外部联结\n\n联结包含了那些在相关表中没有关联的行。这种类型的联结称为**外部联结**。\n\n在使用`OUTER JOIN`语法时，必须使用`RIGHT`或`LEFT`关键字指定包括其所有行的表(`RIGHT`指出的是`OUTER JOIN`右边的表，而`LEFT`指出的是`OUTER JOIN`左边的表)。这也引出了两种外部联结形式：`左外部联结`和`右外部联结`。\n\n```mysql\nSELECT customers.cust_id,orders.order_num\nFROM customers LEFT OUTER JOIN orders\nON customers.cust_id = orders.cust_id;\n```\n\n示例输出：\n\n```shell\n+---------+-----------+\n| cust_id | order_num |\n+---------+-----------+\n|   10001 |     20005 |\n|   10001 |     20009 |\n|   10002 |      NULL |\n|   10003 |     20006 |\n|   10004 |     20007 |\n|   10005 |     20008 |\n+---------+-----------+\n```\n\n\n\n* 使用带聚集函数的联结\n\n```mysql\nSELECT customers.cust_name,customers.cust_id,COUNT(orders.order_num) AS num_ord\nFROM customers INNER JOIN orders\nON customers.cust_id = orders.cust_id\nGROUP BY customers.cust_id;\n```\n\n示例输出：\n\n```shell\n+----------------+---------+---------+\n| cust_name      | cust_id | num_ord |\n+----------------+---------+---------+\n| Coyote Inc.    |   10001 |       2 |\n| Wascals        |   10003 |       1 |\n| Yosemite Place |   10004 |       1 |\n| E Fudd         |   10005 |       1 |\n+----------------+---------+---------+\n```\n\n\n\n* 使用联结和联结条件\n\n以下总结一下关于联结及其使用的某些要点。\n\n1. 注意所使用的联结类型。一般我们使用内部联结，但使用外部联结也是有效的。\n2. 保证使用正确的联结条件，否则将返回不正确的数据。\n3. 应该总是提供联结条件，否则将得到笛卡尔积。\n4. 在一个联结中可以包含多个表，甚至对于每个联结可以采用不同的联结类型。虽然这也做是合法的，一般也很有用，但应该在一起测试它们前，分别测试每个联结。这将使故障的排除更为简便。\n\n\n\n### 组合查询\n\n多数SQL查询都只包含从一个或多个表中返回数据的单条`SELECT`语句。MySQL也允许执行多个查询（多条`SELECT`语句），并将结果作为单个查询结果集返回。这些组合查询通常称为**并**或**复合查询**。\n\n有两种基本情况，其中需要使用组合查询：\n\n1. 在单个查询中从不同的表返回类似结构的数据；\n2. 对单个表执行多个查询，按单个查询返回数据。\n\n\n\n* 创建组合查询\n\n利用`UNION`，可给出多条`SELECT`语句，将它们的结果组合成单个结果集。\n\n`UNION`从结果集中自动去除了重复的行。如果想返回所有匹配的行，可使用`UNION ALL`而不是`UNION`。这里值得注意的是多个`WHERE`子句一定会自动去除重复的行，因此如果确实需要每个条件的匹配行全部出现（包括重复行），则必须使用`UNION ALL`而不是`WHERE`。\n\n\n\n**`UNION`规则**：\n\n1. UNION必须由两条或两条以上的`SELECT`语句组成，语句之间用关键字`UNION`分隔(因此，如果组合4条`SELECT`语句，将要使用`UNION`关键字)。\n2. **`UNION`中的每个查询必须包含相同的列、表达式或聚集函数（不过每个列不需要以相同的次序给出）**。\n3. 列数据类型必须兼容：类型不必完全相同，但必须时DBMS可以隐含地转换的类型。\n\n\n\n```mysql\nSELECT vend_id,prod_id,prod_price\nFROM products \nWHERE prod_price <= 5\nUNION\nSELECT vend_id,prod_id,prod_price\nFROM products\nWHERE vend_id IN (1001,1002);\n```\n\n示例输出：\n\n```shell\n+---------+---------+------------+\n| vend_id | prod_id | prod_price |\n+---------+---------+------------+\n|    1003 | FC      |       2.50 |\n|    1002 | FU1     |       3.42 |\n|    1003 | SLING   |       4.49 |\n|    1003 | TNT1    |       2.50 |\n|    1001 | ANV01   |       5.99 |\n|    1001 | ANV02   |       9.99 |\n|    1001 | ANV03   |      14.99 |\n|    1002 | OL1     |       8.99 |\n+---------+---------+------------+\n```\n\n* 对组合查询结果进行排序\n\n在使用`UNION`组合查询时，只能使用一条`ORDER BY`子句，它必须出现在最后一条`SELECT`语句之后。对于结果集，不存在用一种方式排序一部分，而使用另一种方式排序另一部分的情况，因此不允许使用多条`ORDER BY`子句。\n\n```mysql\nSELECT vend_id,prod_id,prod_price\nFROM products\nWHERE prod_price <= 5\nUNION \nSELECT vend_id,prod_id,prod_price\nFROM products\nWHERE vend_id IN (1001,1002)\nORDER BY vend_id,prod_price;\n```\n\n示例输出：\n\n```shell\n+---------+---------+------------+\n| vend_id | prod_id | prod_price |\n+---------+---------+------------+\n|    1001 | ANV01   |       5.99 |\n|    1001 | ANV02   |       9.99 |\n|    1001 | ANV03   |      14.99 |\n|    1002 | FU1     |       3.42 |\n|    1002 | OL1     |       8.99 |\n|    1003 | FC      |       2.50 |\n|    1003 | TNT1    |       2.50 |\n|    1003 | SLING   |       4.49 |\n+---------+---------+------------+\n```\n\n\n\n### 全文本搜索\n\n虽然**通配符**及**正则表达式**它们作为搜索机制非常有用，但仍存在几个重要的限制：\n\n1. 性能----通配符和正则表达式匹配通常要求MySQL尝试匹配表中所有行（而且这些搜索极少使用表索引）。因此，由于被搜索行数不断增加，这些搜索可能非常耗时。\n2. 明确控制----使用通配符和正则表达式匹配，很难（而且并不总能）明确地控制匹配什么和不匹配什么。例如，指定一个词必须匹配，一个词必须不匹配，而一个词仅在第一个词确实匹配的情况下才可以匹配或者才可以不匹配。\n3. 智能化的结果----虽然基于通配符和正则表达式的搜索提供了非常灵活的搜索，但它们都不能提供一种智能化的选择结果的方法。\n\n所有上述这些限制以及更多的限制都可以用**全文本搜索**来解决。在使用全文本搜索时，MySQL不需要分别查看每个行，不需要分别分析和处理每个词。MySQL创建指定列中各词的一个索引，搜索可以针对这些词进行。这样，MySQL可以快速有效地绝对哪些词匹配（哪些行包含它们），哪些词不匹配，它们匹配的频率，等等。\n\n1. **为了进行全文本搜索，必须索引被搜索的列，而且要随着数据的更改不断重新索引**。在对表列进行适当设计后，MySQL会自动进行所有的索引和重新索引。但值得注意的是，在导入数据时应该先不启用`FULLTEXT`索引，应该首先导入所有数据，然后再修改表，定义`FULLTEXT`建立索引。这样有助于更快的导入数据及更快的更新索引（索引总数据的时间小于每行分时分别索引）。\n\n2. 除非使用`BINARY`方式，否则全文本搜索不区分大小写。\n\n3. **全文本搜索会返回以文本匹配的良好程度排序的数据**。\n\n\n\n* 启用全文本搜索支持\n\n一般在创建表时启用全文本搜索。`CREATE TABLE`语句接受`FULLTEXT`子句，它给出别索引列的一个逗号分隔的列表。\n\n在定义后，MySQL自动维护该索引，在增加、更新或删除行时，索引随之自动更新。\n\n**`FULLTEXT`子句可以指定多个列**。\n\n**可以在创建表时指定`FULLTEXT`，也可以在稍后指定**。\n\n```mysql\nCREATE TABLE productnotes\n(\n    note_id    int        NOT NULL    AUTO_INCREMENT\n    prod_id    char(10)   NOT NULL,\n    note_date  datetime   NOT NULL,\n    note_text  text       NULL,\n    PRIMARY KEY(note_id),\n    FULLTEXT(note_text)\n)ENGINE=MyISAM;\n```\n\n\n\n* 进行全文本搜索\n\n在索引之后，使用两个函数`Match()`和`Against()`执行全文本搜索，其中`Match()`指定被搜索的列，`Against()`指定要使用的搜索表达式。\n\n**传递给`Match()`的值必须与`FULLTEXT()`定义中的相同。如果指定多个列，则必须列出它们（而且次序正确）。**\n\n\n\n```mysql\nSELECT note_text\nFROM productnotes\nWHERE Match(note_text) Against('rabbit');\n```\n\n示例输出：\n\n```shell\n+----------------------------------------------------------------------------------------------------------------------+\n| note_text                                                                                                            |\n+----------------------------------------------------------------------------------------------------------------------+\n| Customer complaint: rabbit has been able to detect trap, food apparently less effective now.                         |\n| Quantity varies, sold by the sack load.\nAll guaranteed to be bright and orange, and suitable for use as rabbit bait. |\n+----------------------------------------------------------------------------------------------------------------------+\n\n```\n\n\n\n```mysql\nSELECT note_text,\n\t   Match(note_text) Against('rabbit') AS rank\nFROM productnotes;\n```\n\n说明：下面的例子和其上的例子最明显的区别时，前者将返回所有行，因为没有`WHERE`字句进行过滤，同时将全文本匹配结果作为新行`rank`进行展示。\n\n\n\n* 使用查询扩展\n\n查询扩展使用`WITH QUERY EXPANSION`子句完成。\n\n查询扩展用来设法放宽所返回的全文本搜索结果的范围。使用查询扩展时，MySQL对数据和索引进行两遍扫描来完成搜索：\n\n1. 首先，进行一个基本的全文本搜索，找出与搜索条件匹配的所有行；\n2. 其次，MySQL检查这些匹配行并选择所有有用的词(根据某种规则)；\n3. 再其次，MySQL再次进行全文本搜索，这次不仅使用原来的条件，而且还使用所有有用的词。\n\n```mysql\nSELECT note_text\nFROM productnotes\nWHERE Match(note_text) Against('anvils' WITH QUERY EXPANSION);\n```\n\n\n\n* 布尔文本搜索\n\nMySQL支持全文本搜索的另外一种形式，称为**布尔方式（boolean mode）**。其可提供关于如下内容的细节：\n\n1. 要匹配的词；\n2. 要排斥的词（如果某行包含这个词，则不返回该行，即使它包含其他指定的词也是如此）；\n3. 排列提示（指定某些词比其他词更加重要，更重要的词等级变高）；\n4. 表达式分组；\n5. 另外一些内容。\n\n**布尔方式不同于上述使用的全文本搜索语法，它即使在没有定义`FULLTEXT`索引的情况下，也可以使用。但这是一种非常缓慢的操作**。\n\n在布尔方式中，不按等级值降序排序返回的行。\n\n```mysql\nSELECT note_text FROM productnotes \nWHERE Match(note_text) Against('heavy' IN BOOLEAN MODE);\n\nSELECT note_text FORM productnotes\nWHERE Match(note_text) Against('heavy -rope*' IN BOOLEAN MODE);\n```\n\n全文本布尔操作符表：\n\n| 布尔操作符 | 说明                                                         |\n| ---------- | ------------------------------------------------------------ |\n| +          | 包含，词必须存在                                             |\n| -          | 排除，词必须不存在                                           |\n| >          | 包含，而且增加等级值                                         |\n| <          | 包含，而且减少等级值                                         |\n| ()         | 把词组成子表达式(允许这些子表达式作为一个组被包含、排除、排列等) |\n| ~          | 取消一个词的排序值                                           |\n| *          | 词尾的通配符                                                 |\n| \" \"        | 定义一个短语(与单个词的列表不一样，它匹配整个短语以便包含或排除这个短语) |\n\n示例：\n\n```mysql\nSELECT note_text\nFROM productnotes\nWHERE Match(note_text) Against('+rabbit +bait' IN BOOLEAN MODE);\n```\n\n说明：搜索匹配包含词rabbit和bait的行。\n\n```mysql\nSELECT note_text\nFROM productnotes\nWHERE Match(note_text) Against('rabbit bait' IN BOOLEAN MODE);\n```\n\n说明：搜索匹配包含rabbit和bait中的至少一个词的行。\n\n```mysql\nSELECT note_text\nFROM productnotes\nWHERE Match(note_text) Against('\"rabbit bait\"' IN BOOLEAN MODE);\n```\n\n说明：搜索匹配短语rabbit bait而不是匹配两个词rabbit和bait。\n\n\n\n* 全文本搜索的重要说明\n\n1. 在索引全文本数据时，短词被忽略且从索引中排除。短词定义为哪些具有3个或3个以下字符的词（可以根据需要更改）。\n2. MySQL带有一个内建的非用词(stopword)列表，这些词在索引全文本数据时将被忽略。如果需要，可以覆盖这个列表。\n3. 许多词出现的频率很高，搜索它们没有用处(返回太多的结果)。因此，MySQL规定了一条50%规则，如果一个词出现在50%以上的行中，则将它作为一个非用词忽略。**50%规则不用于`IN BOOLEAN MODE`。\n4. 如果表中的行数少于3行，则全文本搜索不返回结果(因此每个词或者不出现，或者出现在50%的行中)。\n5. 忽略词中的的单引号。例如：don't 索引为 dont。\n6. 不具有词分隔符(包括日语和汉语)的语言不能恰当地返回全文本搜索结果。\n7. 仅在MyISAM数据库引擎中支持全文本搜索。\n\n\n\n ### 插入数据\n\n使用`INSERT`语句来插入或添加行到数据库表，插入可以用几种方式使用：\n\n1. 插入完整的行\n2. 插入行的一部分\n3. 插入多行\n4. 插入某些查询结果\n\n**重要注意事项**：\n\n1. 如果某个列没有值，应该使用`NULL`值(假定表允许对该列指定空值)。\n2. 对于自动增量，可以省略其值。\n\n3. 如果表的定义允许，则可以在`INSERT`操作中省略某些列。被省略的列应该满足以下某个条件。\n   - 该列的定义为允许`NULL`值（无值或空值）。\n   - 在表定义中给出默认值。这表示如果不给出值，将使用默认值。\n\n\n\n* 插入完整的行\n\n```mysql\nINSERT INTO customers\nVALUES (NULL,\n        'Ppe E.LaPew',\n        '100 Main Street',\n        'Los Angeles',\n        'CA',\n        '90046',\n        'USA',\n        NULL,\n        NULL,\n        NULL);\n```\n\n说明：这种语法没有指定列名，各个列必须以它们在表定义中出现的次序填充。这是一种不安全的语法，因为它极  \t\t\t度依赖于表中列的定义次序。\n\n```mysql\nINSERT INTO customers(cust_name,\n                      cust_address,\n                      cust_city,\n                      cust_state,\n                      cust_zip,\n                      cust_country,\n                      cust_contact,\n                      cust_email)\n        VALUES('Ppe E.LaPew',\n        \t   '100 Main Street',\n        \t   'Los Angeles',\n        \t   'CA',\n        \t   '90046',\n        \t   'USA',\n        \t   NULL,\n               NULL);\n```\n\n说明：这种语法与上述的语法显著的区别是明确的指出的列名。在插入行时，MySQL将用VALUES列表中对应的值填入列表中的对应项。因为提供了列名，VALUES必须按其指定的次序匹配指定列名，但不一定需要按各个列在实际表中的次序。这种方式的明显优点是，即使表的结构改变，此语句仍然可以正确工作。\n\n\n\n* 插入多个行\n\n可以使用多条`INSERT`语句。或者，只要每条`INSERT`语句中的列名和次序相同，也可以使用一条`INSERT`语句，组合提交多个行。\n\n**MySQL用条`INSERT`语句处理多个插入比使用多条`INSERT`语句快**。\n\n```mysql\nINSERT INTO customers(cust_name,\n                      cust_address,\n                      cust_city,\n                      cust_state,\n                      cust_zip,\n                      cust_country)\nVALUES(\n    \t'Ppe E.LaPew',\n        '100 Main Street',\n        'Los Angeles',\n    \t'CA',\n        '90046',\n        'USA'\n\t\t),\n\t (\n        'M .Martian',\n        '42 Galaxy Way',\n        'New York',\n        'NY',\n        '11213',\n        'USA'\n     );\n```\n\n\n\n* 插入检索出的数据\n\n可以利用`INSERT`将一条`SELECT`语句的结果插入表中。\n\n```mysql\nINSERT INTO customers(cust_id,\n                     cust_contact,\n                     cust_email,\n                     cust_name,\n                     cust_address,\n                     cust_city,\n                     cust_state,\n                     cust_zip,\n                     cust_country)\n        SELECT cust_id,\n        \t   cust_contact,\n               cust_email,\n               cust_name,\n               cust_address,\n               cust_city,\n               cust_state,\n               cust_zip,\n               cust_country\n         FROM custnew;\n```\n\n说明：上述例子使用`INSERT SELECT`从custnew表中将所有数据导入customers。\n\n* 优先级指定\n\n如果数据检索是最重要的，可以通过在`INSERT`和`INTO`之间添加关键字`LOW_PRIORITY`，指示MySQL降低`INSERT`语句的优先级。如：`INSERT LOW_PRIORITY INTO`。\n\n\n\n### 更新和删除数据\n\n为了更新(修改)表中的数据，可以使用`UPDATE`语句。可采用两种方式使用`UPDATE`：\n\n1. 更新表中的特定行\n\n2. 更新表中所有行\n\n\n\n* 更新数据\n\n`UPDATE`语句非常容易使用，基本的`UPDATE`语句由3部分组成，分别是：\n\n1. 要更新的表；\n2. 列名和它们的新值；\n3. 确定要更新行的过滤条件。\n\n**为了删除某个列的值，可设置它为`NULL`（假如表定义允许`NULL`值）。\n\n```mysql\nUPDATE customers \nSET cust_email = 'elmer@fudd.com'\nWHERE cust_id = 10005;\n\nUPDATE customers\nSET cust_name = 'The Fudds',\n\tcust_email = 'elmer@fudd.com'\nWHERE cust_id = 10005;\n```\n\n说明：`UPDATE`语句总是以要更新的表的名字开始。`SET`命令用来将新值赋给被更新的列。\n\n\n\n* 删除数据\n\n为了从一个表中删除(去掉)数据，使用`DELETE`语句。有两种方式使用`DELETE`:\n\n1. 从表中删除特定的行；\n2. 从表中删除所有行。\n\n**在使用`DELETE`语句时一定要小心，MySQL没有撤销操作。一定要注意使用`WHERE`子句**。\n\n**`DELETE`不需要列名或者通配符。它删除整行而不是删除列。为了删除指定的列，应该使用`UPDATE`语句**。\n\n\n\n* 删除所有行\n\n如果想从表中删除所有行，不要使用`DELETE`。可使用 `TRUNCATE TABLE`语句，它完成相同的工作，但速度更快。因为它时通过删除原来的表并重新创建一个新表来实现的，而`DELETE`是逐行删除表中的数据。\n\n\n\n* 更新和删除的指导原则\n\n1. 除非确实打算更新和删除每一行，否则绝对不要使用不带`WHERE`子句的`UPDATE`或`DELETE`语句。\n2. 保证每个表都有主键，尽可能像`WHERE`子句那样使用它。\n3. 在对`UPDATE`或`DELETE`语句使用`WHERE`子句前，应该先用`SELECT`语句进行测试，以保证它的过滤时正确的。\n4. 使用强制实施引用完整性的数据库，这样MySQL将不允许删除具有与其他表相关联的数据的行。\n\n\n\n### 创建和操纵表\n\n\n\n* 创建表\n\n表的创建使用`CREATE TABLE`语句完成。为成功创建表，必须给出下列信息：\n\n1. 新表的名字，在关键字`CREATE TABLE`之后给出；\n2. 表列的名字和定义，用逗号分隔。\n\n注意事项：\n\n1. 在创建新表时，指定的表名必须不存在。为了防止意外覆盖已有的表，SQL要求首先手工删除该表，然后再重建。**如果仅想在一个表不存在时创建它，应该在表名后面给出`IF NOT EXISTS`**。这样做不检查已有表的模式是否与你打算创建的表模式相匹配，它只检查表名是否存在。\n\n   \n\n```mysql\nCREATE TABLE customers \n(\n\tcust_id\t\t\tint  \t\tNOT NULL  AUTO_INCREMENT,\n    cust_name\t\tchar(50)\tNOT NULL,\n    cust_address\tchar(50)\tNULL,\n    cust_city\t\tchar(50)\tNULL,\n    cust_state\t\tchar(5)\t\tNULL,\n    cust_zip\t\tchar(10)\tNULL,\n    cust_country\tchar(50)\tNULL,\n    cust_contact\tchar(50)\tNULL,\n    cust_email\t\tchar(255)\tNULL,\n    PRIMARY KEY (cust_id)\n)ENGINE=InnoDB;\n```\n\n**说明：**\n\n1. 实际的表定义(所有列)括在圆括号中，个各列之间用逗号分隔。\n\n2. 这个表由9列组成，每列的定义以列名(它在表中必须是唯一的)开始，后跟列的数据类型。\n\n3. 表的主键可以在创建表时用关键字`PRIMARY KEY`指定。\n\n4. `NULL`值就是没有值或者缺值。允许`NULL`值的列也允许在插入行时不给出该列的值，反之不允许`NULL`值的行在插入或更新时，该列必须有值。\n\n5. `AUTO_INCREMENT`告诉MySQL，本列为**自动增量**，每增加一行时自动增加。每个表只允许一个`AUTO_INCREMENT`列，而且它必须被索引(如，通过使它成为主键)。\n\n   自动增量也可以通过在`INSERT`语句中使用其他值覆盖，这样后续的增量将使用该手工插入的值。\n\n   **获取**最后一个增量值可以使用`last_insert_id()`来获取，如：`SELECT last_insert_id();`。\n\n\n\n* 多个列组成主键\n\n为创建多个列组成的主键，应该以逗号分隔的列表给出各列名。\n\n**主键可以在创建表时定义，也可以在创建表后定义**。\n\n**主键只能使用不允许`NULL`值的列**。\n\n```mysql\nCREATE TABLE orderitems\n(\norder_num\tint \t\tNOT NULL,\norder_item\tint\t\t\tNOT NULL,\nprod_id\t\tchar(10)\tNOT NULL,\nquantity\tint\t\t\tNOT NULL,\nitem_price  decimal(8,2)NOT NULL,\nPRIMARY KEY (order_num,order_item)\n)ENGINE=InnoDB;\n```\n\n\n\n* 指定默认值\n\n如果插入行时没有给出值，MySQL允许指定此时使用的默认值。在创建表时用`DEFAULT`关键字指定。\n\n```mysql\nCREATE TABLE orderitems\n(\norder_num\tint \t\tNOT NULL,\norder_item\tint\t\t\tNOT NULL,\nprod_id\t\tchar(10)\tNOT NULL,\nquantity\tint\t\t\tNOT NULL\tDEFAULT 1,\nitem_price  decimal(8,2)NOT NULL,\nPRIMARY KEY (order_num,order_item)\n)ENGINE=InnoDB;\n```\n\n\n\n* 引擎类型\n\nMySQL与其他DBMS不一样，它具有多种引擎。可以使用`ENGINE=`语句进行指定。\n\n1. **引擎类型可以混用**。每个表都可以有自己的引擎类型。\n\n2. **外键不能跨引擎**。外键用于强制实施引用完整性，因此不能跨引擎。即使用一个引擎的表不能引用具有使用不同引擎的表的外键。\n3. \n\n```C\n/*\n几个重要的引擎：\n1. InnoDB 是一个可靠的事务处理引擎，它不支持全文本搜索。\n2. MEMORY 的功能等同于MyISAM，但它的数据存储在内存(不是磁盘)中，因此速度很快，特别适合临时表。\n3. MyISAM 时一个性能极高的引擎，它支持全文本搜索，但不支持事务处理。\n*/\n```\n\n\n\n* 更新表定义\n\n为更新表定义，可使用`ALTER TABLE`语句。但在理想状态下，当表中存储数据以后，该表就不应该再被更新，因此表的设计过程需要花费大量的时间来考虑，十分重要。\n\n**在进行改动前，最好做一个完整的备份。因为数据库表的更改不可撤销**。\n\n为使用`ALTER TABLE`更新表结构，必须给出下面信息：\n\n1. 在`ALTER TABLE`之后给出要更改的表名(该表必须存在，否则将出错)；\n2. 所做更改的列表。\n\n```mysql\n#给表添加一个列\nALTER TABLE 表名\nADD 列定义;\n```\n\n```mysql\nALTER TABLE vendors\nADD vend_phone CHAR(20);\n```\n\n说明：必须明确给出列的数据类型。\n\n```mysql\n#删除刚刚添加的列\nALTER TABLE vendors\nDROP COLUMN vend_phone;\n```\n\n**`ALTER TABLE`的一个常见用途是定义外键**。\n\n```mysql\nALTER TABLE orderitems\nADD CONSTRAINT fk_orderitems_orders\nFOREIGN KEY (order_Num) REFERENCES orders(order_num);\n```\n\n\n\n* 复杂的表结构更改\n\n复杂的表结构更改一般需要手动删除过程，它涉及以下步骤：\n\n1. 用新的列布局创建一个新表；\n2. 使用`INSERT SELECT`语句，从旧表复制数据到新表。如果有必要，可使用转换函数和计算字段；\n3. 检验包含所需数据的新表；\n4. 重命名旧表(如果确定可以删除它)；\n5. 用旧表原来的名字重命名新表；\n6. 根据需要，重新创建触发器、存储过程、索引和外键。\n\n\n\n* 删除表\n\n删除表没有确认，也不能撤销。\n\n```mysql\nDROP TABLE customers2;\n```\n\n\n\n* 重命名表\n\n```mysql\nRENAME TABLE customers TO customers;\n\nRENAME TABLE backup_customers TO customers,\n\t\t\t backup_vendors TO vendors,\n\t\t\t backup_products TO products;\n```\n\n\n\n### 视图\n\n视图是虚拟的表。与包含数据的表不一样，视图只包含使用时动态检索数据的查询。\n\n**作为视图，它不包含表中应该有的数据，它包含的是一个SQL查询。**\n\n**视图仅仅是用来查看存储在别处的数据的一种设施。视图本身不包含数据，因此它们返回的数据是从其他表中检索出来的。在添加或更改这些表中的数据时，视图将返回改变后的数据。**\n\n**视图提供了一种MySQL的`SELECT`语句层次的封装，可用来简化数据处理及重新格式化基础数据或保护基础数据。**\n\n* 为什么使用视图\n\n1. 重用SQL语句。\n2. 简化复杂的SQL操作。在编写查询后，可以方便地重用它而不必知道它的基本查询细节。\n3. 使用表的组成部分而不是整个表。\n4. 保护数据。可以给用户授予表的特定部分的访问权限而不是整个表的访问权限。\n5. 更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。\n\n\n\n* 视图的规则和限制\n\n1. 与表一样，视图必须唯一命名。\n2. 对于可以创建的视图数目没有限制。\n3. 为了创建视图，必须具有足够的访问权限。这些限制通常由数据库管理人员授予。\n4. 视图可以嵌套，即可以利用从其他视图中检索数据的查询来构造一个视图。\n5. `ORDER BY`可以用在视图中，但如果从该视图检索数据的`SELECT`语句中也含有`ORDER BY`，那么该视图中的`ORDER BY`将被覆盖。\n6. 视图不能索引，也不能有关联的触发器或默认值。\n7. 视图可以和表一起使用。例如，编写一条联结表和视图的`SELECT`语句。\n\n\n\n* 使用视图\n\n1. 视图使用`CREATE VIEW`创建。\n2. 使用`SHOW CREATE VIEW viewname;`来查看创建视图的语句。\n3. 用`DROP`删除视图，其语法为`DROP VIEW viewname;`。\n4. 更新视图时，可以先用`DROP`再用`CREATE`,也可以直接用`CREATE OR REPLACE VIEW`，如果更新的视图不存在，则创建一个视图，如果存在，则替换视图。\n\n**如果从视图中检索数据时使用了一条`WHERE`子句，则两组子句(一组在视图中，另一组是传递给视图的)将自动结合**。\n\n**视图主要用于检索数据，而不用于更新数据**。\n\n```mysql\nCREATE VIEW productcustomers AS\nSELECT cust_name,cust_contact,prod_id\nFROM customers,orders,orderitems\nWHERE customers.cust_id = orders.cust_id\n  AND orderitems.order_num = orders.order_num;\n```\n\n说明：这条语句创建了一个名为`productcustomers`的视图，它联结三个表，以返回已订购了任意产品的所有客户的列表。为检索订购了产品TNT2的客户，可使用如下语句：\n\n```mysql\nSELECT cust_name,cust_contact\nFROM productcustomers\nWHERE prod_id = 'TNT2';\n```\n\n示例输出：\n\n```shell\n+----------------+--------------+\n| cust_name      | cust_contact |\n+----------------+--------------+\n| Coyote Inc.    | Y Lee        |\n| Yosemite Place | Y Sam        |\n+----------------+--------------+\n```\n\n \n\n* 更新视图\n\n可以使用`INSERT`、`UPDATE`、`DELETE`对视图进行更新。不过更新一个视图将更新其基表，如果对视图增加或删除行，实际上是对其基表增加或删除行。\n\n但并不是所有视图都可以更新，如果视图定义中有以下操作，则不能进行更新：\n\n1. 分组(使用`GROUP BY`和`HAVING`)；\n2. 联结；\n3. 子查询；\n4. 并；\n5. 聚集函数；\n6. DISTINCT；\n7. 导出 (计算) 列。\n\n\n\n### 存储过程\n\n存储过程简单来说，就是为以后的使用而保存的一条或多条MySQL语句的集合。\n\n\n\n* 为什么使用存储过程\n\n1. 通过把处理封装在容易使用的单元中，简化复杂的操作(正如前面例子所述)。\n2. 由于不要求反复建立一系列处理步骤，这保证了处理的统一性，也就保证了数据的完整性。\n3. 简化对变动的管理。如果表名、列名或业务逻辑有变化，只需要更改存储过程的代码即可。\n\n(2 和 3 在一定的程度上来说都可以延伸为安全性。通过存储过程限制对基础数据的访问减少数据讹误的机会)\n\n4. 提高性能。使用存储过程比使用单独的SQL语句要快。\n5. 存在一些只能用在单个请求中的MySQL元素和特性，存储过程可以使用它们来编写功能更强更灵活的代码。\n\n\n\n* 执行存储过程\n\nMySQL称存储过程的执行为调用，MySQL执行存储过程的语句为`CALL`。`CALL`接受存储过程的名字以及需要传递给它的任意参数。\n\n```mysql\nCALL 存储过程名(@param_1,\n              @param_2,\n              @param_3);\n```\n\n\n\n* 创建存储过程\n\n```mysql\nCREATE PROCEDURE 存储过程名()\nBEGIN\n\t待执行的SQL语句\nEND;\n```\n\n示例:\n\n```mysql\nCREATE PROCEDURE productpricing()\nBEGIN\n\tSELECT Avg(prod_price) AS priceaverage\n\tFROM products;\nEND;\n```\n\n\n\n* 删除存储过程\n\n```mysql\nDROP PROCEDURE productpricing;\n```\n\n\n\n\n\n* 注意事项--mysql命令行客户机的分隔符\n\n默认的MySQL语句分隔符为`；`。因为存储过程中的语句中也以`;`作为结束，因此在命令行客户机中使用`END；`时，应临时更改命令行实用程序的语句分隔符，稍作修改，如示：\n\n```mysql\nDELIMITER\t//\nCREATE PROCEDURE productpricing()\nBEGIN\n\tSELECT Avg(prod_price) AS priceaverage\n\tFROM products;\nEND\t//\n\nDELIMITER ;\n```\n\n说明：`DELIMITER` 可以告诉命令行使用程序使用其所带符号作为新的语句结束分隔符。\n\n\n\n* 使用参数\n\n**变量**：内存中一个特定的位置，用来临时存储数据。\n\n**变量名**：所有MySQL变量都必须以@开始。\n\n```mysql\nCREATE PROCEDURE productpricing(\n\tOUT pl DECIMAL(8,2),\n    OUT ph DECIMAL(8,2),\n    OUT pa DECIMAL(8,2)\n)\n\nBEGIN \n\tSELECT Min(prod_price)\n\tINTO pl\n\tFROM products;\n\tSELECT Max(prod_price)\n\tINTO ph\n\tFROM products;\n\tSELECT Avg(prod_price)\n\tINTO pa\n\tFROM products;\nEND;\n```\n\n说明：\n\n此存储过程接受三个参数。在创建带参数的存储过程时，每个参数必须具有指定的类型。关键字`OUT`指出相应的参数用来从存储过程传出一个值(返回给调用者)。MySQL支持`IN`（传递给存储过程）、`OUT` (从存储过程传出一个值，返回给调用者)和`INOUT`(对存储过程传入和传出)类型的参数。存储过程位于`BEGIN`和`END`语句内。\n\n```mysql\nCALL productpricing(@pricelow,\n                    @pricehigh,\n                   \t@priceaverage);\n```\n\n说明：在调用时，这条语句并不显示任何数据。它返回以后可以显示(或在其他处理中使用)的变量。\n\n\n\n* 建立智能存储过程\n\n存储过程可以包含业务规则和处理逻辑。这将使得存储过程更加的智能。\n\n\n\n* 检查存储过程\n\n可以使用`SHOW CREATE PROCEDURE`来显示一个创建存储过程的语句。\n\n```mysql\nSHOW CREATE PROCEDURE productpricing;\n```\n\n如果要获得包括何时、由谁创建等详细信息的存储过程列表，可以使用`SHOW PROCEDURE STATUS`。\n\n```mysql\nSHOW PROCEDURE STATUS LIKE 'productpricing';\n```\n\n\n\n### 游标\n\n游标(cursor)是一个存储在MySQL服务器上的数据库查询，它不是一条`SELECT`语句，而是被该语句检索出来的结果集。在存储了游标之后，应用程序可以根据需要滚动或浏览其中的数据。游标主要用户交互式应用。\n\n\n\n* 使用游标\n\n使用游标涉及几个明确的步骤。\n\n1. 在能够使用游标前，必须声明(定义)它。这个过程实际上没有检索数据，它只是定义要使用的`SELECT`语句。\n2. 一旦声明后，必须打开游标以供使用。这个过程用前面定义的`SELECT`语句把数据实际检索出来。\n3. 对于填有数据的游标，根据需要取出(检索各行)。\n4. 在结束游标使用时，必须关闭游标。\n\n\n\n* 创建游标\n\n游标用`DECLARE`语句创建。`DECLARE`命名游标，并定义相应的`SELECT`语句，根据需要带`WHERE`和其他子句。例如，下面的语句定义了名为`ordernumbers`的游标，使用了可以检索所有订单的`SELECT`语句。\n\n**DECLARE语句的次序**：`DECLARE`语句的发布存在特定的次序。用`DECLARE`语句定义的局部变量必须在定义任意游标或句柄之前定义，而句柄必须在游标之后定义。\n\n```mysql\nCREATE PROCEDURE processorders()\nBEGIN \t\n\tDECLARE ordernumbers CURSOR\n\tFOR\n\tSELECT order_num FROM orders;\nEND;\n```\n\n说明：这个游标在存储过程处理完成后消失，它局限于存储过程。\n\n\n\n* 打开和关闭游标\n\n```mysql\nOPEN 游标名;#打开游标\nCLOSE 游标名;#关闭游标\n```\n\n**如果不明确关闭游标，MySQL将会在到达`END`语句时自动关闭它**。\n\n\n\n* 使用游标数据\n\n在一个游标被打开后，可以使用`FETCH`语句分别访问它的每一行。`FETCH`指定检索什么数据(所需的列)，检索出来的数据存储在什么地方。它还向前移动游标中的内部行指针，使下一条`FETCH`语句检索下一行(不重复读取同一行)。\n\n```mysql\nCREATE PROCEDURE local processorders()\nBEGIN\n\t--Declare local variables\n\tDECLARE done BOOLEAN DEFAULT 0;\n\tDECLARE o INT;\n\t\n\t--Declare the cursor\n\tDECLARE ordernumbers CURSOR\n\tFOR\n\tSELECT order_num FROM orders;\n\t--Declare continue handler\n\tDECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done=1;\n\t\n\t--Open the cursor\n\tOPEN ordernumbers;\n\t\n\t--Loop through all rows\n\tREPEAT\n\t\t--Get order number\n\t\tFETCH ordernumbers INTO o;\n\t\t\n\t--End of Loop\n\tUNTIL done END REPEAT;\n\t\n\t--Close the cursor\n\tCLOSE ordernumbers;\nEND;\n```\n\n说明：这里需要着重说明下语句：\n\n```mysql\nDECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done=1;\n```\n\n这条语句定义了一个`CONTINUE HANDLER`,它是在条件出现时被执行的代码。它指出当`SQLSTATE '02000'`出现时，`SET done=1`。`SQLSTATE '02000'`是一个未找到条件，当`REPEAT`由于没有更多的行供循环而不能继续时，出现这个条件。\n\n\n\n### 触发器\n\n触发器是MySQL响应以下任意语句而自动执行的一条MySQL语句(或位于`BEGIN`和`END`语句之间的一组语句):\n\n1. `DELETE`\n2. `INSERT`\n3. `UPDATE`\n\n**只有表才支持触发器，视图不支持(临时表也不支持)**。\n\n**触发器按每个表每个事件每次地定义，每个表每个事件每次只允许一个触发器，因此每个表最多支持6个触发器**。\n\n**MySQL触发器不支持`CALL`语句，这表示不能从触发器内调用存储过程。所需的存储过程代码需要复制到触发器中**。\n\n\n\n* 创建触发器\n\n在创建触发器时，需要给出4条信息：\n\n1. 唯一的触发器名;\n2. 触发器关联的表；\n3. 触发器应该响应的活动(`DELETE`、`INSERT`或`UPDATE`)；\n4. 触发器何时执行(处理之前或之后)。`AFTER` or`BEFORE`。\n\n```mysql\nCREATE TRIGGER 触发器名 AFTER INSERT ON 关联表名\nFOR EACH ROW SELECT '显示文本';\n# 这里的显示文本非必须，只是一个示例。类似语句将在每次成功插入数据后，显示\"显示文本\"。\n```\n\n\n\n* 删除触发器\n\n```mysql\nDROP TRIGGER 触发器名;\n```\n\n\n\n* INSERT触发器\n\nINSERT触发器在`INSERT`语句之前或之后执行。需要知道以下几点:\n\n1. 在INSERT触发器代码内，可引用一个名为NEW的虚拟表，访问被插入的行；\n2. 在BEFORE INSERT触发器中，NEW中的值也可以被更新(允许更改被插入的值)；\n3. 对于`AUTO_INCREMENT`列，NEW在`INSERT`执行之前包含0，在`INSERT`执行之后包含新的自动生成值。\n\n\n\n* DELETE触发器\n\nDELETE触发器在`DELETE`语句执行之前或之后执行。需要知道以下两点:\n\n1. 在`DELETE`触发器代码内，你可以引用一个名为OLD的虚拟表，访问被删除的行；\n2. `OLD`中的值全都是只读的，不能更新。\n\n```mysql\nCREATE TRIGGER deleteorder BEFORE DELETE ON orders\nFOR EACH ROW\nBEGIN \n\tINSERT INTO archive_orders(order_num,order_date,cust_id)\n\tVALUES(OLD.order_num,OLD.order_date,OLD.cust_id)\nEND;\n```\n\n说明：上述例子演示使用OLD虚拟表保存将要被删除的行到一个存档表中。同时，上述例子还是用了多语句触发器的技巧，使得触发器能够容纳多条语句。\n\n\n\n* UPDATE触发器\n\nUPDATE触发器在`UPDATE`语句执行之前或之后执行。需要知道以下几点：\n\n1. 在UPDATE触发器代码中，你可以引用一个名为OLD的虚拟表访问以前(UPDATE语句之前)的值，引用一个名为NEW的虚拟表访问新的更新的值；\n2. 在BEFORE UPDATE触发器中，NEW中的值可能也被更新(允许更改将用于`UPDATE`语句中的值)；\n3. OLD中的值全都是只读的，不能更新。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"SQL/mysql/note","published":1,"updated":"2020-12-31T09:50:55.542Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjcobbcn0023helz0h7009pp","content":"<p>[TOC]</p>\n\n        <h3 id=\"声明\"   >\n          <a href=\"#声明\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>声明</h3>\n      <p>以下所有相关命令行内容均基于ubuntu18.04。具体学习过程源自书籍《MySQL必知必会》。</p>\n\n        <h3 id=\"关系数据库的基础知识\"   >\n          <a href=\"#关系数据库的基础知识\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>关系数据库的基础知识</h3>\n      <ul>\n<li>关系表</li>\n</ul>\n<p>理解关系表的最好办法是看一个现实的例子。</p>\n<figure class=\"highlight c\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">假如有一个包含产品目录的数据库表，其中每种类别的物品占一行。对于每种物品要存储的信息包括产品描述和价格，以及生产该产品的供应商信息。</span></span><br><span class=\"line\"><span class=\"comment\">现在，假如有由同一供应商生产的多种物品，那么在何处存储供应商信息（如，供应商名、地址、联系方法等）呢？将这些数据与产品信息分开存储有如下几个重要的理由。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">1. 因为同一个供应商生产的每个产品的供应商信息都是相同的，对每个产品重复此信息既浪费时间又浪费空间。</span></span><br><span class=\"line\"><span class=\"comment\">2. 如果供应商信息改变，只需改变一次即可。</span></span><br><span class=\"line\"><span class=\"comment\">3. 如果有重复数据（即每种产品都存储供应商信息），很难保证每次输入该数据的方式都相同。不一致的数据在报表中很\t  难利用。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></div></figure>\n\n<ol>\n<li><p><strong>相同的数据出现多次决不是一件好事，此因素时关系数据库设计的基础。</strong></p>\n</li>\n<li><p><strong>关系表的设计就是要保证把信息分解成多个表，一类数据一个表。各表通过某些常用的值（即关系设计中的关系）互相关联。</strong></p>\n</li>\n<li><p>关系数据库的可伸缩性远比非关系数据库要好。</p>\n</li>\n</ol>\n<p><strong>主键</strong>：唯一标识表中每行的这个列（或这组列）称为主键。</p>\n<p><strong>外键</strong>：外键为某个表中的一列，它包含另一个表的主键值，定义了两个表之间的关系。</p>\n\n        <h3 id=\"MySQL的登录\"   >\n          <a href=\"#MySQL的登录\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>MySQL的登录</h3>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -h 127.0.0.1 -u root -p</span><br></pre></td></tr></table></div></figure>\n\n<p>参数说明：</p>\n<ul>\n<li><strong>-h</strong> : 指定客户端所要登录的 MySQL 主机名, 登录本机(localhost 或 127.0.0.1)该参数可以省略;</li>\n<li><strong>-u</strong> : 登录的用户名;</li>\n<li><strong>-p</strong> : 告诉服务器将会使用一个密码来登录, 如果所要登录的用户名密码为空, 可以忽略此选项。</li>\n</ul>\n\n        <h3 id=\"建立一个新的数据库\"   >\n          <a href=\"#建立一个新的数据库\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>建立一个新的数据库</h3>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE learning;</span><br></pre></td></tr></table></div></figure>\n\n<p>这样就创建了一个名为 <em>learning</em> 的数据库（数据源）</p>\n\n        <h3 id=\"使用一个指定的数据库\"   >\n          <a href=\"#使用一个指定的数据库\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>使用一个指定的数据库</h3>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USE learning;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"执行SQL脚本文件\"   >\n          <a href=\"#执行SQL脚本文件\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>执行SQL脚本文件</h3>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source XX.sql</span><br></pre></td></tr></table></div></figure>\n\n<p>注意：XX.sql 需要路径支持</p>\n\n        <h3 id=\"显示内容\"   >\n          <a href=\"#显示内容\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>显示内容</h3>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW DATABASES; &#x2F;&#x2F;显示存在的数据库</span><br><span class=\"line\">SHOW TABLES;\t&#x2F;&#x2F;显示当前数据库存在的表</span><br><span class=\"line\">SHOW COLUMNS FROM TABLES;\t&#x2F;&#x2F;显示表列</span><br></pre></td></tr></table></div></figure>\n\n\n\n\n        <h3 id=\"检索数据\"   >\n          <a href=\"#检索数据\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>检索数据</h3>\n      <ol>\n<li><strong>数据的格式化是一个表示问题，而不是一个检索问题</strong></li>\n</ol>\n<ul>\n<li>检索单个列</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT 待检索列名 FROM 预检索表名;</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>检索多个列</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT 待检索列名1,待检索列名2,待检索列名3,...,最后一个待检索列名 FROM 预检索表名;</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>检索所有列</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM 预检索表名;</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>检索时只返回不同的值</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT DISTINCT 待检索列名 FROM 预检索表名;</span><br></pre></td></tr></table></div></figure>\n\n<p>注： DISTINCT 关键字应用于所有列而不是它的前置列。意味着当检索了多个列时，只有每个列的所有行都不同，才被检索出来。</p>\n<ul>\n<li>限制检索结果数量</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT 待检索列名 FROM 预检索表名 LIMIT 检索开始位置，要检索的行数;</span><br></pre></td></tr></table></div></figure>\n\n<p>注： 检索开始位置可省略，默认为0；如：</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT prod_name FROM products LIMIT 5;</span><br></pre></td></tr></table></div></figure>\n\n<p>返回不多于5行，从第  行0  开始（位置参数为0）。</p>\n\n        <h3 id=\"排序检索数据\"   >\n          <a href=\"#排序检索数据\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>排序检索数据</h3>\n      <ol>\n<li><strong>关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有意义</strong></li>\n</ol>\n<ul>\n<li><strong>子句</strong></li>\n</ul>\n<p>SQL语句由子句组成，有些是必需的，有些是可选的。一个子句通常由一个关键字和所提供的数据组成。当前最明显的例子便是 <code>SELECT</code>语句的 <code>FROM</code> 子句。</p>\n<ul>\n<li>字句的顺序</li>\n</ul>\n<p>在给出 <code>ORDER BY</code> 字句时，应该保证它位于 <code>FROM</code> 字句之后。如果使用 <code>LIMIT</code> ,它必须位于 <code>ORDER BY</code> 之后。使用子句的次序不对将产生错误消息。</p>\n<ul>\n<li>单列排序</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT 待检索列名 FROM 预检索表名 ORDER BY 带检索列名;</span><br></pre></td></tr></table></div></figure>\n\n<p>注： 可以通过非选择检索列进行排序。</p>\n<ul>\n<li>多列排序</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT 待检索列名1,待检索列名2,待检索列名3 FROM 预检索表名 ORDER BY 待检索列名2,待检索列名3;</span><br></pre></td></tr></table></div></figure>\n\n<p>在上述排序中，将优先按照  <em>待检索列名2</em>  进行排序，仅在多个行具有相同的  <em>待检索列名2</em>  时才按 <em>待检索列名3</em></p>\n<p>进行再排序。</p>\n<ul>\n<li>指定排序顺序</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT 待检索列名1,待检索列名2,待检索列名3 FROM 预检索表名 ORDER BY 待检索列名1 DESC,待检索列名2;</span><br></pre></td></tr></table></div></figure>\n\n<p>数据排序默认以升序排序进行。当要进行 <strong>降序排序</strong> 时，必须指定 <code>DESC</code> 关键字。 <strong>升序排序</strong> 的关键字为 <code>ASC</code>。</p>\n<p>注意： 与 <code>DISTINCT</code> 关键字不同，<code>DESC</code> 关键字只应用到直接位于其前面的列名。在上述排序命令中，降序只对待检索列名1进行指定，而待检索列名2仍然以默认的升序进行排序。</p>\n\n        <h3 id=\"过滤数据\"   >\n          <a href=\"#过滤数据\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>过滤数据</h3>\n      <p>只检索所需数据需要指定 <em>搜索条件(search criteria)</em> ，搜索条件也成为 _过滤条件_。</p>\n<ol>\n<li><strong>MySQL在执行匹配时默认不区分大小写</strong></li>\n</ol>\n<ul>\n<li>子句顺序</li>\n</ul>\n<p><code>WHERE</code>子句在表名<code>FROM</code>子句之后给出。</p>\n<p>在同时使用了 <code>ORDER BY</code> 子句和 <code>WHERE</code> 子句时，应该让 <code>ORDER BY</code> 位于 <code>WHERE</code> 之后，否则会产生错误。</p>\n<ul>\n<li>WHERE子句条件操作符</li>\n</ul>\n<p>[][]</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>=</td>\n<td>等于</td>\n</tr>\n<tr>\n<td>&lt;&gt;</td>\n<td>不等于</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不等于</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于等于</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于等于</td>\n</tr>\n<tr>\n<td>BETWEEN</td>\n<td>在指定两个值之间</td>\n</tr>\n</tbody></table></div>\n<ul>\n<li>检查单个值</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT 待检索列名1，待检索列名2 FROM 预检索表名 WHERE 待匹配列名 操作符 范围值;</span><br></pre></td></tr></table></div></figure>\n\n<p>注：待匹配列名 可以是 选择检索列也可以是非选择检索列。</p>\n<p>比较字符串时需要用单引号来进行限定。数值比较则不需要引号。如：</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT prod_name,prod_price FROM products WHERE prod_name &#x3D; &#39;fuses&#39;;</span><br><span class=\"line\">SELECT vend_id,prod_name FROM products WHERE vend_id &lt;&gt; 1003;</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>检测范围值</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT 待检索列名1，待检索列名2 FROM 预检索表名 WHERE 待匹配列名 BETWEEN 开始值 AND 结束值;</span><br></pre></td></tr></table></div></figure>\n\n<p>注： <code>BETWEEN</code> 匹配范围中所有的值，包括指定的开始值和结束值。</p>\n<ul>\n<li>空值检查</li>\n</ul>\n<p>在创建表时，可以指定其中的列是否可以不包含值。在一个列不包含值时，称其为包含空值 <strong>NULL</strong>。</p>\n<p><strong>NULL</strong> 无值，它与字段包含0、空字符串或仅仅包含空格不同。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT 待检索列名1 FROM 预检索表名 WHERE 待匹配列名 IS NULL;</span><br></pre></td></tr></table></div></figure>\n\n<p>NULL与不匹配：</p>\n<p>在通过过滤选择出不具有特定值的行时，你可能希望返回具有NULL值的行。但是，不行。</p>\n<p>因为未知具有特殊含义，数据库不知道他们是否匹配，所以在匹配过滤或者不匹配过滤时不返回它们。</p>\n<p>因此，在过滤数据时，一定要验证返回数据中确实给出了被过滤列具有NULL的行。</p>\n<ul>\n<li>组合条件检查</li>\n</ul>\n<ol>\n<li><strong>MySQL支持使用NOT对IN、BETWEEN和EXISTS子句取反</strong></li>\n</ol>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>逻辑操作符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>AND</td>\n<td>与</td>\n</tr>\n<tr>\n<td>OR</td>\n<td>或</td>\n</tr>\n<tr>\n<td>NOT</td>\n<td>非</td>\n</tr>\n<tr>\n<td>IN</td>\n<td>指定条件范围</td>\n</tr>\n</tbody></table></div>\n<p>计算次序：SQL像大多数语言一样，优先处理<code>AND</code>操作符。因此要使用圆括号明确地分组相应的操作符。示例：</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT prod_name,prod_price FROM products </span><br><span class=\"line\">WHERE (vend_id &#x3D; 1002 OR vend_id &#x3D; 1003) AND prod_price &gt;&#x3D; 10;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT prod_name,prod_price FROM products WHERE vend_id IN (1002,1003) ORDER BY prod_name;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT prod_name,prod_price FROM products WHERE vend_id NOT IN (1002,1003);</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>通配符过滤</li>\n</ul>\n<p><strong>通配符</strong>: 用来匹配值的一部分的特殊字符。</p>\n<p><strong>搜索模式</strong>:由字面值、通配符或者两者组合而成的搜索条件。</p>\n<p>为在搜索子句中使用通配符，必须使用<code>LIKE</code>操作符。<code>LIKE</code>指示MySQL，后跟的搜索模式利用通配符匹配而不是直接使用相等匹配进行比较。</p>\n<p><strong>使用通配符的技巧</strong>:</p>\n<ol>\n<li>不要过度使用通配符。在能达到目的的情况下优先使用其他操作符。</li>\n<li>除非绝对必要，不要把通配符放在搜索模式的开始处。把通配符置于搜索模式的开始处，搜索起来最慢。</li>\n</ol>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>通配符</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%</td>\n<td>任何字符出现任意次数</td>\n</tr>\n<tr>\n<td>_</td>\n<td>和%作用一样，但是只匹配单个字符</td>\n</tr>\n</tbody></table></div>\n<p>注： 通配符不可以匹配 NULL。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT 待检索列名1，待检索列名2 FROM 预检索表名 WHERE 待匹配列名 LIKE &#39;%sample&#39;;</span><br></pre></td></tr></table></div></figure>\n\n\n\n\n        <h3 id=\"正则表达式搜索\"   >\n          <a href=\"#正则表达式搜索\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>正则表达式搜索</h3>\n      <p>MySQL使用<code>WHERE</code>对正则表达式提供了初步的支持，允许你指定正则表达式，过滤<code>SELECT</code>检索出来的数据。</p>\n<ol>\n<li><p><strong>MySQL仅支持多数正则表达式实现的一个很小的子集</strong>。</p>\n</li>\n<li><p><strong><code>LIKE</code>与<code>REGEXP</code>之间存在着一个终于差别，<code>LIKE</code>匹配整个列，而<code>REGEXP</code>在列值中进行匹配</strong>。</p>\n</li>\n<li><p>**MySQL中的正则表达式匹配不区分大小写。为区分大小写需要使用<code>BINARY</code>关键字。如：</p>\n<p> <code>WHERE prod_name REGEXP BINARY &#39;JetPack .000&#39;</code></p>\n</li>\n</ol>\n<ul>\n<li>基本字符匹配</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT prod_name FROM products WHERE prod_name REGEXP &#39;.000&#39; ORDER BY prod_name;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出:</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+--------------+</span><br><span class=\"line\">| prod_name    |</span><br><span class=\"line\">+--------------+</span><br><span class=\"line\">| JetPack 1000 |</span><br><span class=\"line\">| JetPack 2000 |</span><br><span class=\"line\">+--------------+</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>匹配几个字符之一</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT prod_name FROM products WHERE prod_name REGEXP &#39;[123] Ton&#39; ORDER BY prod_name;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-------------+</span><br><span class=\"line\">| prod_name   |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">| 1 ton anvil |</span><br><span class=\"line\">| 2 ton anvil |</span><br><span class=\"line\">+-------------+</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>匹配特殊字符</li>\n</ul>\n<p>MySQL的转义使用<code>\\\\</code>两个反斜杠。MySQL自己解析一个，正则表达式解析另一个。</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>空白元字符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\\\f</td>\n<td>换页</td>\n</tr>\n<tr>\n<td>\\\\n</td>\n<td>换行</td>\n</tr>\n<tr>\n<td>\\\\r</td>\n<td>回车</td>\n</tr>\n<tr>\n<td>\\\\t</td>\n<td>制表符</td>\n</tr>\n<tr>\n<td>\\\\v</td>\n<td>纵向制表</td>\n</tr>\n</tbody></table></div>\n<p>说明：每个元字符前面<strong>只有两个反斜杠</strong>，此处为了抵消掉markdown的语法，写了三个。</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>重复元字符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>*</td>\n<td>0个或多个匹配</td>\n</tr>\n<tr>\n<td>+</td>\n<td>1个或多个匹配（ 等于{1,} ）</td>\n</tr>\n<tr>\n<td>?</td>\n<td>0个或1个匹配 （ 等于{0,,1} ）</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>指定数目的匹配</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>不少于指定数目的匹配</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>匹配数目的范围（m不超过255）</td>\n</tr>\n</tbody></table></div>\n<ul>\n<li>预定义字符集，字符类</li>\n</ul>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>字符类</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[:alnum:]</td>\n<td>任意字母和数字(同[a-ZA-Z0-9])</td>\n</tr>\n<tr>\n<td>[:alpha:]</td>\n<td>任意字符([a-zA-Z])</td>\n</tr>\n<tr>\n<td>[:blank:]</td>\n<td>空格和制表(同[\\\\t])</td>\n</tr>\n<tr>\n<td>[:cntrl:]</td>\n<td>ASCII控制字符(ASCII0到31和127)</td>\n</tr>\n<tr>\n<td>[:digit:]</td>\n<td>任意数字(同[0-9])</td>\n</tr>\n<tr>\n<td>[:graph:]</td>\n<td>与[:print:]相同，但不包括空格</td>\n</tr>\n<tr>\n<td>[:lower:]</td>\n<td>任意小写字母(同[a-z])</td>\n</tr>\n<tr>\n<td>[:print:]</td>\n<td>任意可打印字符</td>\n</tr>\n<tr>\n<td>[:punct:]</td>\n<td>既不在[:alnum:]又不在[:cntrl:]中的任意字符</td>\n</tr>\n<tr>\n<td>[:space:]</td>\n<td>包括空格在内的任意空白字符(同[\\\\f\\\\n\\\\r\\\\t\\\\v])</td>\n</tr>\n<tr>\n<td>[:upper:]</td>\n<td>任意大写字母(同[A-Z])</td>\n</tr>\n<tr>\n<td>[:xdigit:]</td>\n<td>任意十六进制数字(同[a-fA-F0-9])</td>\n</tr>\n</tbody></table></div>\n<p>说明：每个双反斜杠<strong>只有两个反斜杠</strong>，此处为了抵消掉markdown的语法，写了三个。</p>\n<ul>\n<li>定位元字符</li>\n</ul>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>定位元字符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>^</td>\n<td>文本的开始</td>\n</tr>\n<tr>\n<td>$</td>\n<td>文本的结尾</td>\n</tr>\n<tr>\n<td>[[:&lt;:]]</td>\n<td>词的开始</td>\n</tr>\n<tr>\n<td>[[:&gt;:]]</td>\n<td>词的结尾</td>\n</tr>\n</tbody></table></div>\n<ul>\n<li>简单的正则表达式测试</li>\n</ul>\n<p>可以在不使用数据库表的情况下使用<code>SELECT</code>来测试正则表达式。<code>REGEXP</code>检查总是返回0(没有匹配)或者1(匹配)。可以用带文字串的REFEXP来测试表达式，并试验它们。如：</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT &#39;hello&#39; REGEXP &#39;[0-9]&#39;;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+------------------------+</span><br><span class=\"line\">| 'hello' REGEXP '[0-9]' |</span><br><span class=\"line\">+------------------------+</span><br><span class=\"line\">|                      0 |</span><br><span class=\"line\">+------------------------+</span><br></pre></td></tr></table></div></figure>\n\n\n\n\n        <h3 id=\"创建计算字段\"   >\n          <a href=\"#创建计算字段\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>创建计算字段</h3>\n      <ul>\n<li>拼接</li>\n</ul>\n<p>拼接是指将值联结到一起构成单个值。在MySQL的<code>SELECT</code>语句中，可使用<code>Concat()</code>函数来拼接两个列。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT Concat(vend_name,&#39; (&#39;,vend_country,&#39;)&#39;) FROM vendors ORDER BY vend_name;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出:</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-----------------------------------------+</span><br><span class=\"line\">| Concat(vend_name,' (',vend_country,')') |</span><br><span class=\"line\">+-----------------------------------------+</span><br><span class=\"line\">| ACME (USA)                              |</span><br><span class=\"line\">| Anvils R Us (USA)                       |</span><br><span class=\"line\">| Furball Inc. (USA)                      |</span><br><span class=\"line\">| Jet Set (England)                       |</span><br><span class=\"line\">| Jouets Et Ours (France)                 |</span><br><span class=\"line\">| LT Supplies (USA)                       |</span><br><span class=\"line\">+-----------------------------------------+</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>格式调整</li>\n</ul>\n<p>可以使用<code>Trim()</code>函数去掉串左右两边的空格。<code>LTrim()</code>去掉串左边的空格。<code>RTtim()</code>去掉串右边的空格。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT Concat(RTrim(vend_name),&#39; (&#39;,RTrim(vend_country),&#39;)&#39;) FROM vendors ORDER BY vend_name;</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>使用别名(alias)</li>\n</ul>\n<p>别名：一个字段或值的替换名。别名使用<code>AS</code>关键字赋予。</p>\n<p>别名的常见用途：在实际的表列名包含不符合规定的字符（如空格）时重新命名它，在原来的名字含混或容易误解                                时扩充它等等。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT Concat(RTrim(vend_name),&#39; (&#39;,RTrim(vend_country),&#39;)&#39;) AS vend_title FROM vendors</span><br><span class=\"line\">ORDER BY vend_name;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-------------------------+</span><br><span class=\"line\">| vend_title              |</span><br><span class=\"line\">+-------------------------+</span><br><span class=\"line\">| ACME (USA)              |</span><br><span class=\"line\">| Anvils R Us (USA)       |</span><br><span class=\"line\">| Furball Inc. (USA)      |</span><br><span class=\"line\">| Jet Set (England)       |</span><br><span class=\"line\">| Jouets Et Ours (France) |</span><br><span class=\"line\">| LT Supplies (USA)       |</span><br><span class=\"line\">+-------------------------+</span><br></pre></td></tr></table></div></figure>\n\n<p>注: 仔细观察拼接段落的示例，很容易就可以看出两者的区别。</p>\n<ul>\n<li>执行算术计算</li>\n</ul>\n<p>计算字段的另一常见用途是对检索出的数据进行算术计算。</p>\n<p>测试计算：<code>SELECT</code>可以省略<code>FROM</code>子句以便简单地访问和处理表达式。如<code>SELECT 3*2;</code> <code>SELECT Now();</code>。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT prod_id,quantity,item_price FROM orderitems WHERE order_num &#x3D; 20005;</span><br><span class=\"line\">SELECT prod_id,quantity,item_price,</span><br><span class=\"line\">\t   quantity*item_price AS expanded_price</span><br><span class=\"line\">FROM orderitems WHERE order_num &#x3D; 20005;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出:</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+----------+------------+</span><br><span class=\"line\">| prod_id | quantity | item_price |</span><br><span class=\"line\">+---------+----------+------------+</span><br><span class=\"line\">| ANV01   |       10 |       5.99 |</span><br><span class=\"line\">| ANV02   |        3 |       9.99 |</span><br><span class=\"line\">| TNT2    |        5 |      10.00 |</span><br><span class=\"line\">| FB      |        1 |      10.00 |</span><br><span class=\"line\">+---------+----------+------------+</span><br><span class=\"line\">==============================================================</span><br><span class=\"line\">+---------+----------+------------+----------------+</span><br><span class=\"line\">| prod_id | quantity | item_price | expanded_price |</span><br><span class=\"line\">+---------+----------+------------+----------------+</span><br><span class=\"line\">| ANV01   |       10 |       5.99 |          59.90 |</span><br><span class=\"line\">| ANV02   |        3 |       9.99 |          29.97 |</span><br><span class=\"line\">| TNT2    |        5 |      10.00 |          50.00 |</span><br><span class=\"line\">| FB      |        1 |      10.00 |          10.00 |</span><br><span class=\"line\">+---------+----------+------------+----------------+</span><br></pre></td></tr></table></div></figure>\n\n\n\n\n        <h3 id=\"使用数据处理函数\"   >\n          <a href=\"#使用数据处理函数\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>使用数据处理函数</h3>\n      <p>SQL支持利用函数来处理数据。函数一般是在数据上执行的，它给数据的转换和处理提供了方便。</p>\n<p><strong>函数没有SQL的可移植性强，如果决定使用函数，应该保证做好代码注释</strong></p>\n<p><strong>大多数SQL实现支持以下类型的函数：</strong></p>\n<ol>\n<li>用于处理文本串的文本函数</li>\n<li>用于在数值数据上进行算术操作的数值函数</li>\n<li>用于处理日期和时间值并从这些值中提取特定成分的日期和时间函数</li>\n<li>返回DBMS正使用的特殊信息（如返回用户登录信息，检查版本细节）的系统函数。</li>\n</ol>\n<ul>\n<li>文本处理函数</li>\n</ul>\n<p>常用的文本处理函数如下：</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Left()</td>\n<td>返回串左边的字符</td>\n</tr>\n<tr>\n<td>Length()</td>\n<td>返回串的长度</td>\n</tr>\n<tr>\n<td>Locate()</td>\n<td>找出串的一个子串</td>\n</tr>\n<tr>\n<td>Lower()</td>\n<td>将串转换为小写</td>\n</tr>\n<tr>\n<td>LTrim()</td>\n<td>去掉串左边的空格</td>\n</tr>\n<tr>\n<td>Right()</td>\n<td>返回串右边的字符</td>\n</tr>\n<tr>\n<td>RTrim()</td>\n<td>去掉串右边的空格</td>\n</tr>\n<tr>\n<td>Soundex()</td>\n<td>返回串的SOUNDEX值</td>\n</tr>\n<tr>\n<td>SubString()</td>\n<td>返回子串的字符</td>\n</tr>\n<tr>\n<td>Upper()</td>\n<td>将串转换为大写</td>\n</tr>\n</tbody></table></div>\n<ul>\n<li>日期和时间处理函数</li>\n</ul>\n<p><strong>用日期进行过滤需要注意一些别的问题和使用特殊的MySQL函数</strong></p>\n<ol>\n<li>无论什么时候指定一个日期，不管是插入或更新表值还是用WHERE字句进行过滤，日期格式必须为yyyy-mm=dd。这是首选的日期格式，因为它排除了多义性。</li>\n</ol>\n<p>常用日期和时间处理函数如下：</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>AddDate()</td>\n<td>增加一个日期（天、周等）</td>\n</tr>\n<tr>\n<td>AddTime()</td>\n<td>增加一个时间（时、分等）</td>\n</tr>\n<tr>\n<td>CurDate()</td>\n<td>返回当前日期</td>\n</tr>\n<tr>\n<td>CurTime()</td>\n<td>返回当前时间</td>\n</tr>\n<tr>\n<td>Date()</td>\n<td>返回日期时间的日期部分</td>\n</tr>\n<tr>\n<td>DateDiff()</td>\n<td>计算两个日期之差</td>\n</tr>\n<tr>\n<td>Date_Add()</td>\n<td>高度灵活的日期运算函数</td>\n</tr>\n<tr>\n<td>Date_Format()</td>\n<td>返回一个格式化的日期或时间串</td>\n</tr>\n<tr>\n<td>Day()</td>\n<td>返回一个日期的天数部分</td>\n</tr>\n<tr>\n<td>DayOfWeek()</td>\n<td>对于一个日期，返回对应的是星期几</td>\n</tr>\n<tr>\n<td>Hour()</td>\n<td>返回一个时间的小时部分</td>\n</tr>\n<tr>\n<td>Minute()</td>\n<td>返回一个时间的分钟部分</td>\n</tr>\n<tr>\n<td>Month()</td>\n<td>返回一个时期的月份部分</td>\n</tr>\n<tr>\n<td>Now()</td>\n<td>返回当前日期和时间</td>\n</tr>\n<tr>\n<td>Second()</td>\n<td>返回一个时间的秒部分</td>\n</tr>\n<tr>\n<td>Time()</td>\n<td>返回一个日期时间的时间部分</td>\n</tr>\n<tr>\n<td>Year()</td>\n<td>返回一个日期的年份部分</td>\n</tr>\n</tbody></table></div>\n<ul>\n<li>数值处理函数</li>\n</ul>\n<p>常用数值处理函数如下：</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Abs()</td>\n<td>返回一个数的绝对值</td>\n</tr>\n<tr>\n<td>Cos()</td>\n<td>返回一个角度的余弦</td>\n</tr>\n<tr>\n<td>Exp()</td>\n<td>返回一个数的指数值</td>\n</tr>\n<tr>\n<td>Mod()</td>\n<td>返回除操作的余数</td>\n</tr>\n<tr>\n<td>Pi()</td>\n<td>返回圆周率</td>\n</tr>\n<tr>\n<td>Rand()</td>\n<td>返回一个随机数</td>\n</tr>\n<tr>\n<td>Sin()</td>\n<td>返回一个角度的正弦</td>\n</tr>\n<tr>\n<td>Sqrt()</td>\n<td>返回一个数的平方根</td>\n</tr>\n</tbody></table></div>\n\n        <h3 id=\"汇总数据\"   >\n          <a href=\"#汇总数据\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>汇总数据</h3>\n      <ul>\n<li>聚集 函数</li>\n</ul>\n<p>我们经常需要汇总数据而不用把它们实际检索出来，为此MySQL提供了专门的函数。这些函数就是<strong>聚集函数</strong>。</p>\n<p><strong>聚集函数：</strong>运行在行组上，计算和返回单个值的函数。</p>\n<p><strong>标准偏差聚集函数</strong></p>\n<p>SQL聚集函数表：</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>AVG()</td>\n<td>返回某列的平均值</td>\n</tr>\n<tr>\n<td>COUNT()</td>\n<td>返回某列的行数</td>\n</tr>\n<tr>\n<td>MAX()</td>\n<td>返回某列的最大值</td>\n</tr>\n<tr>\n<td>MIN()</td>\n<td>返回某列的最小值</td>\n</tr>\n<tr>\n<td>SUM()</td>\n<td>返回某列值之和</td>\n</tr>\n</tbody></table></div>\n<p>补充说明：</p>\n<p>AVG()：只能用来确定特定数值列的平均值，而且列名必须作为函数参数给出。为了获得多个列的平均值，必须使             用多个AVG()函数。</p>\n<p>​             AVG()函数忽略列值为<code>NULL</code>的行。</p>\n<p>COUNT(): 如果指定列名，则指定列值为<code>NULL</code>的行被COUNT()函数忽略，但如果COUNT()函数中用的是星号(*),则                 不忽略。</p>\n<p>MAX()：忽略列值为<code>NULL</code>的行。</p>\n<p>MIN()：忽略列值为<code>NULL</code>的行。    </p>\n<p>SUM()：忽略列值为<code>NULL</code>的行。</p>\n<ul>\n<li>聚集不同值</li>\n</ul>\n<ol>\n<li><strong>不允许使用COUNT( DISTINCT )</strong></li>\n</ol>\n<p>以上5个聚集函数都可以如下使用：</p>\n<ol>\n<li><p>对所有的行执行计算，指定<code>ALL</code>参数或不给参数(默认为<code>ALL</code>)。</p>\n</li>\n<li><p>只包含不同的值，指定<code>DISTINCT</code>参数。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT AVG(prod_price) AS avg_price FROM products WHERE vend_id &#x3D; 1003;</span><br><span class=\"line\">SELECT AVG(DISTINCT prod_price) AS avg_price FROM products WHERE vend_id &#x3D; 1003;</span><br></pre></td></tr></table></div></figure>\n\n</li>\n</ol>\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-----------+</span><br><span class=\"line\">| avg_price |</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">| 13.212857 |</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">================================================</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">| avg_price |</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">| 15.998000 |</span><br><span class=\"line\">+-----------+</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>组合聚集函数</li>\n</ul>\n<p><code>SELECT</code>语句可根据需要包含多个聚集函数。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT COUNT(*) AS num_items,</span><br><span class=\"line\">\t   MIN(prod_price) AS price_min,</span><br><span class=\"line\">\t   MAX(prod_price) AS price_max,</span><br><span class=\"line\">\t   AVG(prod_price) AS price_avg</span><br><span class=\"line\">FROM products;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-----------+-----------+-----------+-----------+</span><br><span class=\"line\">| num_items | price_min | price_max | price_avg |</span><br><span class=\"line\">+-----------+-----------+-----------+-----------+</span><br><span class=\"line\">|        14 |      2.50 |     55.00 | 16.133571 |</span><br><span class=\"line\">+-----------+-----------+-----------+-----------+</span><br></pre></td></tr></table></div></figure>\n\n\n\n\n        <h3 id=\"分组数据\"   >\n          <a href=\"#分组数据\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>分组数据</h3>\n      <ul>\n<li>数据分组</li>\n</ul>\n<p><strong>分组</strong>允许把数据分为多个逻辑组，以便能对每个组进行聚集计算。分组是在<code>SELECT</code>语句的<code>GROUP BY</code>子句中建立的。</p>\n<p><strong>子句顺序</strong>：<code>GROUP BY</code>子句必须出现在<code>WHERE</code>子句之后，<code>ORDER BY</code>子句之前。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT vend_id,COUNT(*) AS num_prods </span><br><span class=\"line\">FROM products </span><br><span class=\"line\">GROUP BY vend_id;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+-----------+</span><br><span class=\"line\">| vend_id | num_prods |</span><br><span class=\"line\">+---------+-----------+</span><br><span class=\"line\">|    1001 |         3 |</span><br><span class=\"line\">|    1002 |         2 |</span><br><span class=\"line\">|    1003 |         7 |</span><br><span class=\"line\">|    1005 |         2 |</span><br><span class=\"line\">+---------+-----------+</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：上述的<code>SELECT</code>语句指定了两个列，vend_id包含产品供应商的ID,num_prods为计算字段(用COUNT(*)函数建立)。<code>GROUP BY</code>子句指示MySQL按照vend_id排序并分组数据。这导致对每个vend_id而不是整个表计算num_prods一次。从输出中可以看到，供应商1001有3个产品，供应商1002有2个产品，供应商1003有7个产品，而供应商1005有2个产品。</p>\n<p><code>GROUP BY</code>子句后还可以跟<code>WITH ROLLUP</code>关键字，表示在分组统计的基础上再次进行汇总统计（在每个分组下都会有汇总统计）。</p>\n<p>[更多内容参考][<a href=\"https://blog.csdn.net/qq_42254088/article/details/81904819]\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_42254088/article/details/81904819]</a></p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT vend_id,COUNT(*) AS num_prods</span><br><span class=\"line\">FROM products</span><br><span class=\"line\">GROUP BY vend_id WITH ROLLUP;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+-----------+</span><br><span class=\"line\">| vend_id | num_prods |</span><br><span class=\"line\">+---------+-----------+</span><br><span class=\"line\">|    1001 |         3 |</span><br><span class=\"line\">|    1002 |         2 |</span><br><span class=\"line\">|    1003 |         7 |</span><br><span class=\"line\">|    1005 |         2 |</span><br><span class=\"line\">|    NULL |        14 |</span><br><span class=\"line\">+---------+-----------+</span><br></pre></td></tr></table></div></figure>\n\n<p><strong><code>GROUP BY</code>字句的重要规定</strong>:</p>\n<ol>\n<li><p><code>GROUP BY</code>子句可以包含任意数目的列。这使得能对分组进行嵌套，为数据分组提供更细致的控制。</p>\n</li>\n<li><p>如果在<code>GROUP BY</code>子句中嵌套了分组，数据将在最后规定的分组上进行汇总。换句话说，在建立分组时，指定的所有列都一起计算，不能再从个别的列中取回数据。</p>\n</li>\n<li><p><code>GROUP BY</code>子句中列出的每个列都必须是<strong>检索列</strong>或<strong>有效的表达式</strong>（但不能是聚集函数）。如果<code>SELECT</code>中使用表达式，则必须在<code>GROUP BY</code>子句中指定相同的表达式。<strong>不能使用别名</strong>。</p>\n</li>\n<li><p>除聚集计算语句外，<code>SELECT</code>语句中的每个列都必须在<code>GROUP BY</code>子句中给出。</p>\n</li>\n<li><p>如果分组列中具有<code>NULL</code>值，则<code>NULL</code>将作为一个分组返回。如果列中有多行<code>NULL</code>值，它们将分为一组。</p>\n</li>\n<li><p><code>GROUP BY</code>子句必须出现在<code>WHERE</code>子句之后，<code>ORDER BY</code>子句之前。</p>\n</li>\n</ol>\n<ul>\n<li>过滤分组</li>\n</ul>\n<p>除了能用<code>GROUP BY</code>分组数据外，MySQL还允许过滤分组。</p>\n<p><code>WHERE</code>的过滤指定的是行而不是分组。<code>WHERE</code>没有分组的概念。为了实现分组过滤，需要使用<code>HAVING</code>子句，<code>HAVING</code>非常类似于<code>WHERE</code>，它能替代绝大部分的<code>WHERE</code>功能。两者唯一的差别是<code>WHERE</code>过滤行，而<code>HAVING</code>过滤分组。</p>\n<p><strong><code>HAVING</code>支持所有<code>WHERE</code>操作符</strong>。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT cust_id,COUNT(*) AS orders </span><br><span class=\"line\">FROM orders</span><br><span class=\"line\">GROUP BY cust_id</span><br><span class=\"line\">HAVING COUNT(*) &gt;&#x3D; 2;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+--------+</span><br><span class=\"line\">| cust_id | orders |</span><br><span class=\"line\">+---------+--------+</span><br><span class=\"line\">|   10001 |      2 |</span><br><span class=\"line\">+---------+--------+</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>同时使用<code>WHERE</code>和<code>HAVING</code>：</strong></p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT vend_id,COUNT(*) AS num_prods</span><br><span class=\"line\">FROM products</span><br><span class=\"line\">WHERE prod_price &gt;&#x3D; 10</span><br><span class=\"line\">GROUP BY vend_id</span><br><span class=\"line\">HAVING COUNT(*) &gt;&#x3D; 2;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+-----------+</span><br><span class=\"line\">| vend_id | num_prods |</span><br><span class=\"line\">+---------+-----------+</span><br><span class=\"line\">|    1003 |         4 |</span><br><span class=\"line\">|    1005 |         2 |</span><br><span class=\"line\">+---------+-----------+</span><br></pre></td></tr></table></div></figure>\n\n<p>对于<code>WHERE</code>和<code>HAVING</code>的差别，也可以结合上述示例换另一种理解方法：</p>\n<p><code>WHERE</code>在数据分组前进行过滤，<code>HAVING</code>在数据分组后进行过滤。这是一种重要的区别，<code>WHERE</code>排除的行不包括在分组中，这可能会改变计算值，从而影响<code>HAVING</code>子句中基于这些值过滤掉的分组。</p>\n<ul>\n<li>分组和排序</li>\n</ul>\n<p>仅管我们经常发现用<code>GROUP BY</code>分组的数据确实以分组顺序输出，但情况并不总是这样，它不是SQL规范所要求的。因此一般在使用<code>GROUP BY</code>时也应该给出<code>ORDER BY</code>,以保证数据正确排序。</p>\n\n        <h3 id=\"SELECT字句顺序表\"   >\n          <a href=\"#SELECT字句顺序表\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>SELECT字句顺序表</h3>\n      <div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>字句</th>\n<th>说明</th>\n<th>是否必须使用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SELECT</td>\n<td>要返回的列或表达式</td>\n<td>是</td>\n</tr>\n<tr>\n<td>FROM</td>\n<td>从中检索数据的表</td>\n<td>仅在从表中选择数据时使用</td>\n</tr>\n<tr>\n<td>WHERE</td>\n<td>行级过滤</td>\n<td>否</td>\n</tr>\n<tr>\n<td>GROUP BY</td>\n<td>分组说明</td>\n<td>仅在按组计算聚集时使用</td>\n</tr>\n<tr>\n<td>HAVING</td>\n<td>组级过滤</td>\n<td>否</td>\n</tr>\n<tr>\n<td>ORDER BY</td>\n<td>输出排序顺序</td>\n<td>否</td>\n</tr>\n<tr>\n<td>LIMIT</td>\n<td>要检索的行数</td>\n<td>否</td>\n</tr>\n</tbody></table></div>\n\n        <h3 id=\"子查询\"   >\n          <a href=\"#子查询\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>子查询</h3>\n      <p><strong>查询(query)</strong>:任何SQL语句都是查询。但此术语一般值<code>SELECT</code>语句。</p>\n<p>SQL在版本4.1开始引入子查询的支持。<strong>子查询(subquery)</strong>即嵌套在其他查询中的查询。</p>\n<ol>\n<li>对于能嵌套的子查询数目没有限制，不过在实际使用中由于性能的限制，不能嵌套太多的子查询。</li>\n</ol>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT cust_id</span><br><span class=\"line\">FROM orders </span><br><span class=\"line\">WHERE order_num IN(SELECT order_num</span><br><span class=\"line\">                   FROM orderitems</span><br><span class=\"line\">                   WHERE prod_id &#x3D; &#39;TNT2&#39;);</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+</span><br><span class=\"line\">| cust_id |</span><br><span class=\"line\">+---------+</span><br><span class=\"line\">|   10001 |</span><br><span class=\"line\">|   10004 |</span><br><span class=\"line\">+---------+</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>作为计算字段使用子查询</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT cust_name,</span><br><span class=\"line\">\t   cust_state,</span><br><span class=\"line\">\t   (SELECT COUNT(*)</span><br><span class=\"line\">       \tFROM orders</span><br><span class=\"line\">        WHERE orders.cust_id &#x3D; customers.cust_id) AS orders</span><br><span class=\"line\">FROM customers</span><br><span class=\"line\">ORDER BY cust_name;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+----------------+------------+--------+</span><br><span class=\"line\">| cust_name      | cust_state | orders |</span><br><span class=\"line\">+----------------+------------+--------+</span><br><span class=\"line\">| Coyote Inc.    | MI         |      2 |</span><br><span class=\"line\">| E Fudd         | IL         |      1 |</span><br><span class=\"line\">| Mouse House    | OH         |      0 |</span><br><span class=\"line\">| Wascals        | IN         |      1 |</span><br><span class=\"line\">| Yosemite Place | AZ         |      1 |</span><br><span class=\"line\">+----------------+------------+--------+</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：在这个示例中，使用了<strong>完全限定列名</strong>。这里还涉及到了一个新的概念，<strong>相关子查询(correlated  subquery)</strong>，涉及外部查询的子查询。任何时候只要列名可能有多义性，就必须使用这种语法（表名和列名由一个句点分隔）。</p>\n\n        <h3 id=\"联结表\"   >\n          <a href=\"#联结表\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>联结表</h3>\n      <p>SQL最强大的功能之一就是能在数据检索查询的执行中<strong>联结(join)</strong>表。</p>\n<p><strong>联结</strong>：简单的说联结是一种机制，它不是物理实体，它用来在一条<code>SELECT</code>语句中关联表。联结在运行时关联表中            正确的行。</p>\n<ol>\n<li><strong>在一条<code>SELECT</code>语句中联结几个表时，相应的关系是在运行中构造的。</strong></li>\n<li><strong>在联结两个表时，你实际上做的是将第一个表中的每一行与第二个表中的每一行配对。<code>WHERE</code>子句作为过滤条件，它只包含那些匹配给定条件（这里是联结条件）的行。</strong></li>\n<li>由没有联结条件的表关系返回的结果为笛卡尔积。检索出的行的数目将是第一个表中的行数乘以第二个表中的行数。笛卡尔积的联结类型又称为叉联结。</li>\n</ol>\n<ul>\n<li>创建联结</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT vend_name,prod_name,prod_price</span><br><span class=\"line\">FROM vendors,products</span><br><span class=\"line\">WHERE vendors.vend_id &#x3D; products.vend_id</span><br><span class=\"line\">ORDER BY vend_name,prod_name;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-------------+----------------+------------+</span><br><span class=\"line\">| vend_name   | prod_name      | prod_price |</span><br><span class=\"line\">+-------------+----------------+------------+</span><br><span class=\"line\">| ACME        | Bird seed      |      10.00 |</span><br><span class=\"line\">| ACME        | Carrots        |       2.50 |</span><br><span class=\"line\">| ACME        | Detonator      |      13.00 |</span><br><span class=\"line\">| ACME        | Safe           |      50.00 |</span><br><span class=\"line\">| ACME        | Sling          |       4.49 |</span><br><span class=\"line\">| ACME        | TNT (1 stick)  |       2.50 |</span><br><span class=\"line\">| ACME        | TNT (5 sticks) |      10.00 |</span><br><span class=\"line\">| Anvils R Us | .5 ton anvil   |       5.99 |</span><br><span class=\"line\">| Anvils R Us | 1 ton anvil    |       9.99 |</span><br><span class=\"line\">| Anvils R Us | 2 ton anvil    |      14.99 |</span><br><span class=\"line\">| Jet Set     | JetPack 1000   |      35.00 |</span><br><span class=\"line\">| Jet Set     | JetPack 2000   |      55.00 |</span><br><span class=\"line\">| LT Supplies | Fuses          |       3.42 |</span><br><span class=\"line\">| LT Supplies | Oil can        |       8.99 |</span><br><span class=\"line\">+-------------+----------------+------------+</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：这里使用了<code>WHERE</code>子句来正确联结。</p>\n<ul>\n<li>联结多个表</li>\n</ul>\n<p>SQL对于一条<code>SELECT</code>语句中可以联结的表的数目没有限制。创建联结的基本规则也相同。</p>\n<ol>\n<li>出于性能的考虑，不应该联结太多的表，联结的表越多，性能下降的越厉害。</li>\n</ol>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT prod_name,vend_name,prod_price,quantity</span><br><span class=\"line\">FROM orderitems,products,vendors</span><br><span class=\"line\">WHERE products.vend_id &#x3D; vendors.vend_id</span><br><span class=\"line\">\t  AND orderitems.prod_id &#x3D; products.prod_id</span><br><span class=\"line\">\t  AND order_num &#x3D; 20005;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+----------------+-------------+------------+----------+</span><br><span class=\"line\">| prod_name      | vend_name   | prod_price | quantity |</span><br><span class=\"line\">+----------------+-------------+------------+----------+</span><br><span class=\"line\">| .5 ton anvil   | Anvils R Us |       5.99 |       10 |</span><br><span class=\"line\">| 1 ton anvil    | Anvils R Us |       9.99 |        3 |</span><br><span class=\"line\">| TNT (5 sticks) | ACME        |      10.00 |        5 |</span><br><span class=\"line\">| Bird seed      | ACME        |      10.00 |        1 |</span><br><span class=\"line\">+----------------+-------------+------------+----------+</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>表别名</li>\n</ul>\n<p>表别名只在查询执行中使用。与列别名不一样，表别名不返回到客户机。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT cust_name,cust_contact</span><br><span class=\"line\">FROM customers AS c,orders AS o,orderitems AS oi</span><br><span class=\"line\">WHERE c.cust_id &#x3D; o.cust_id</span><br><span class=\"line\">  AND oi.order_num &#x3D; o.order_num</span><br><span class=\"line\">  AND prod_id &#x3D; &#39;TNT2&#39;;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+----------------+--------------+</span><br><span class=\"line\">| cust_name      | cust_contact |</span><br><span class=\"line\">+----------------+--------------+</span><br><span class=\"line\">| Coyote Inc.    | Y Lee        |</span><br><span class=\"line\">| Yosemite Place | Y Sam        |</span><br><span class=\"line\">+----------------+--------------+</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>内部联结</li>\n</ul>\n<p>内部联结又称为等值联结(equijion),它基于两个表之间的相等测试。</p>\n<p>对于这种联结可以使用稍微不同的语法来明确指定联结的类型。</p>\n<ol>\n<li>尽管使用<code>WHERE</code>字句定义的联结的确比较简单，但是使用明确的联结语法能够确保不会忘记联结条件，有时候这样做也能影响性能。</li>\n</ol>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT vend_name,prod_name,prod_price</span><br><span class=\"line\">FROM vendors INNER JOIN products</span><br><span class=\"line\">ON vendors.vend_id &#x3D; products.vend_id;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-------------+----------------+------------+</span><br><span class=\"line\">| vend_name   | prod_name      | prod_price |</span><br><span class=\"line\">+-------------+----------------+------------+</span><br><span class=\"line\">| Anvils R Us | .5 ton anvil   |       5.99 |</span><br><span class=\"line\">| Anvils R Us | 1 ton anvil    |       9.99 |</span><br><span class=\"line\">| Anvils R Us | 2 ton anvil    |      14.99 |</span><br><span class=\"line\">| LT Supplies | Fuses          |       3.42 |</span><br><span class=\"line\">| LT Supplies | Oil can        |       8.99 |</span><br><span class=\"line\">| ACME        | Detonator      |      13.00 |</span><br><span class=\"line\">| ACME        | Bird seed      |      10.00 |</span><br><span class=\"line\">| ACME        | Carrots        |       2.50 |</span><br><span class=\"line\">| ACME        | Safe           |      50.00 |</span><br><span class=\"line\">| ACME        | Sling          |       4.49 |</span><br><span class=\"line\">| ACME        | TNT (1 stick)  |       2.50 |</span><br><span class=\"line\">| ACME        | TNT (5 sticks) |      10.00 |</span><br><span class=\"line\">| Jet Set     | JetPack 1000   |      35.00 |</span><br><span class=\"line\">| Jet Set     | JetPack 2000   |      55.00 |</span><br><span class=\"line\">+-------------+----------------+------------+</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>自联结</li>\n</ul>\n<p>表自己联结自己的联结类型称为自联结。</p>\n<p><strong>自联结通常作为外部语句用来替代从相同表中检索数据时使用的子查询语句。虽然最终结果是一样的，但是有时候处理联结远比处理子查询快得多</strong>。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT p1.prod_id, p1.prod_name</span><br><span class=\"line\">FROM products AS p1, products AS p2</span><br><span class=\"line\">WHERE p1.vend_id &#x3D; p2.vend_id</span><br><span class=\"line\">  AND p2.prod_id &#x3D; &#39;DTNTR&#39;;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+----------------+</span><br><span class=\"line\">| prod_id | prod_name      |</span><br><span class=\"line\">+---------+----------------+</span><br><span class=\"line\">| DTNTR   | Detonator      |</span><br><span class=\"line\">| FB      | Bird seed      |</span><br><span class=\"line\">| FC      | Carrots        |</span><br><span class=\"line\">| SAFE    | Safe           |</span><br><span class=\"line\">| SLING   | Sling          |</span><br><span class=\"line\">| TNT1    | TNT (1 stick)  |</span><br><span class=\"line\">| TNT2    | TNT (5 sticks) |</span><br><span class=\"line\">+---------+----------------+</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>自然联结</li>\n</ul>\n<p>标准联结（内部联结）返回所有数据，甚至相同的列多次出现。自然联结排除多次出现，使每个列只返回一次。</p>\n<p><strong>自然联结是这样一种联结，其中你只能选择那些唯一的列。这一般是通过对表使用通配符<code>SELECT *</code>，对所有其他表的列使用明确的子集来完成的。</strong></p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT c.*, o.order_num,o.order_date,</span><br><span class=\"line\">\t   oi.prod_id,oi.quantity,oi.item_price</span><br><span class=\"line\">FROM customers AS c, orders AS o, orderitems AS oi</span><br><span class=\"line\">WHERE c.cust_id &#x3D; o.cust_id</span><br><span class=\"line\">  AND oi.order_num &#x3D; o.order_num</span><br><span class=\"line\">  AND prod_id &#x3D; &#39;FB&#39;;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+-------------+----------------+-----------+------------+----------+--------------+--------------+-----------------+-----------+---------------------+---------+----------+------------+</span><br><span class=\"line\">| cust_id | cust_name   | cust_address   | cust_city | cust_state | cust_zip | cust_country | cust_contact | cust_email      | order_num | order_date          | prod_id | quantity | item_price |</span><br><span class=\"line\">+---------+-------------+----------------+-----------+------------+----------+--------------+--------------+-----------------+-----------+---------------------+---------+----------+------------+</span><br><span class=\"line\">|   10001 | Coyote Inc. | 200 Maple Lane | Detroit   | MI         | 44444    | USA          | Y Lee        | ylee@coyote.com |     20005 | 2005-09-01 00:00:00 | FB      |        1 |      10.00 |</span><br><span class=\"line\">|   10001 | Coyote Inc. | 200 Maple Lane | Detroit   | MI         | 44444    | USA          | Y Lee        | ylee@coyote.com |     20009 | 2005-10-08 00:00:00 | FB      |        1 |      10.00 |</span><br><span class=\"line\">+---------+-------------+----------------+-----------+------------+----------+--------------+--------------+-----------------+-----------+---------------------+---------+----------+--</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：在这个例子中，通配符只对第一个表使用。所有其他列明确列出，所以没有重复的列被检索出来。</p>\n<ul>\n<li>外部联结</li>\n</ul>\n<p>联结包含了那些在相关表中没有关联的行。这种类型的联结称为<strong>外部联结</strong>。</p>\n<p>在使用<code>OUTER JOIN</code>语法时，必须使用<code>RIGHT</code>或<code>LEFT</code>关键字指定包括其所有行的表(<code>RIGHT</code>指出的是<code>OUTER JOIN</code>右边的表，而<code>LEFT</code>指出的是<code>OUTER JOIN</code>左边的表)。这也引出了两种外部联结形式：<code>左外部联结</code>和<code>右外部联结</code>。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT customers.cust_id,orders.order_num</span><br><span class=\"line\">FROM customers LEFT OUTER JOIN orders</span><br><span class=\"line\">ON customers.cust_id &#x3D; orders.cust_id;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+-----------+</span><br><span class=\"line\">| cust_id | order_num |</span><br><span class=\"line\">+---------+-----------+</span><br><span class=\"line\">|   10001 |     20005 |</span><br><span class=\"line\">|   10001 |     20009 |</span><br><span class=\"line\">|   10002 |      NULL |</span><br><span class=\"line\">|   10003 |     20006 |</span><br><span class=\"line\">|   10004 |     20007 |</span><br><span class=\"line\">|   10005 |     20008 |</span><br><span class=\"line\">+---------+-----------+</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>使用带聚集函数的联结</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT customers.cust_name,customers.cust_id,COUNT(orders.order_num) AS num_ord</span><br><span class=\"line\">FROM customers INNER JOIN orders</span><br><span class=\"line\">ON customers.cust_id &#x3D; orders.cust_id</span><br><span class=\"line\">GROUP BY customers.cust_id;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+----------------+---------+---------+</span><br><span class=\"line\">| cust_name      | cust_id | num_ord |</span><br><span class=\"line\">+----------------+---------+---------+</span><br><span class=\"line\">| Coyote Inc.    |   10001 |       2 |</span><br><span class=\"line\">| Wascals        |   10003 |       1 |</span><br><span class=\"line\">| Yosemite Place |   10004 |       1 |</span><br><span class=\"line\">| E Fudd         |   10005 |       1 |</span><br><span class=\"line\">+----------------+---------+---------+</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>使用联结和联结条件</li>\n</ul>\n<p>以下总结一下关于联结及其使用的某些要点。</p>\n<ol>\n<li>注意所使用的联结类型。一般我们使用内部联结，但使用外部联结也是有效的。</li>\n<li>保证使用正确的联结条件，否则将返回不正确的数据。</li>\n<li>应该总是提供联结条件，否则将得到笛卡尔积。</li>\n<li>在一个联结中可以包含多个表，甚至对于每个联结可以采用不同的联结类型。虽然这也做是合法的，一般也很有用，但应该在一起测试它们前，分别测试每个联结。这将使故障的排除更为简便。</li>\n</ol>\n\n        <h3 id=\"组合查询\"   >\n          <a href=\"#组合查询\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>组合查询</h3>\n      <p>多数SQL查询都只包含从一个或多个表中返回数据的单条<code>SELECT</code>语句。MySQL也允许执行多个查询（多条<code>SELECT</code>语句），并将结果作为单个查询结果集返回。这些组合查询通常称为<strong>并</strong>或<strong>复合查询</strong>。</p>\n<p>有两种基本情况，其中需要使用组合查询：</p>\n<ol>\n<li>在单个查询中从不同的表返回类似结构的数据；</li>\n<li>对单个表执行多个查询，按单个查询返回数据。</li>\n</ol>\n<ul>\n<li>创建组合查询</li>\n</ul>\n<p>利用<code>UNION</code>，可给出多条<code>SELECT</code>语句，将它们的结果组合成单个结果集。</p>\n<p><code>UNION</code>从结果集中自动去除了重复的行。如果想返回所有匹配的行，可使用<code>UNION ALL</code>而不是<code>UNION</code>。这里值得注意的是多个<code>WHERE</code>子句一定会自动去除重复的行，因此如果确实需要每个条件的匹配行全部出现（包括重复行），则必须使用<code>UNION ALL</code>而不是<code>WHERE</code>。</p>\n<p><strong><code>UNION</code>规则</strong>：</p>\n<ol>\n<li>UNION必须由两条或两条以上的<code>SELECT</code>语句组成，语句之间用关键字<code>UNION</code>分隔(因此，如果组合4条<code>SELECT</code>语句，将要使用<code>UNION</code>关键字)。</li>\n<li><strong><code>UNION</code>中的每个查询必须包含相同的列、表达式或聚集函数（不过每个列不需要以相同的次序给出）</strong>。</li>\n<li>列数据类型必须兼容：类型不必完全相同，但必须时DBMS可以隐含地转换的类型。</li>\n</ol>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT vend_id,prod_id,prod_price</span><br><span class=\"line\">FROM products </span><br><span class=\"line\">WHERE prod_price &lt;&#x3D; 5</span><br><span class=\"line\">UNION</span><br><span class=\"line\">SELECT vend_id,prod_id,prod_price</span><br><span class=\"line\">FROM products</span><br><span class=\"line\">WHERE vend_id IN (1001,1002);</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+---------+------------+</span><br><span class=\"line\">| vend_id | prod_id | prod_price |</span><br><span class=\"line\">+---------+---------+------------+</span><br><span class=\"line\">|    1003 | FC      |       2.50 |</span><br><span class=\"line\">|    1002 | FU1     |       3.42 |</span><br><span class=\"line\">|    1003 | SLING   |       4.49 |</span><br><span class=\"line\">|    1003 | TNT1    |       2.50 |</span><br><span class=\"line\">|    1001 | ANV01   |       5.99 |</span><br><span class=\"line\">|    1001 | ANV02   |       9.99 |</span><br><span class=\"line\">|    1001 | ANV03   |      14.99 |</span><br><span class=\"line\">|    1002 | OL1     |       8.99 |</span><br><span class=\"line\">+---------+---------+------------+</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>对组合查询结果进行排序</li>\n</ul>\n<p>在使用<code>UNION</code>组合查询时，只能使用一条<code>ORDER BY</code>子句，它必须出现在最后一条<code>SELECT</code>语句之后。对于结果集，不存在用一种方式排序一部分，而使用另一种方式排序另一部分的情况，因此不允许使用多条<code>ORDER BY</code>子句。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT vend_id,prod_id,prod_price</span><br><span class=\"line\">FROM products</span><br><span class=\"line\">WHERE prod_price &lt;&#x3D; 5</span><br><span class=\"line\">UNION </span><br><span class=\"line\">SELECT vend_id,prod_id,prod_price</span><br><span class=\"line\">FROM products</span><br><span class=\"line\">WHERE vend_id IN (1001,1002)</span><br><span class=\"line\">ORDER BY vend_id,prod_price;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+---------+------------+</span><br><span class=\"line\">| vend_id | prod_id | prod_price |</span><br><span class=\"line\">+---------+---------+------------+</span><br><span class=\"line\">|    1001 | ANV01   |       5.99 |</span><br><span class=\"line\">|    1001 | ANV02   |       9.99 |</span><br><span class=\"line\">|    1001 | ANV03   |      14.99 |</span><br><span class=\"line\">|    1002 | FU1     |       3.42 |</span><br><span class=\"line\">|    1002 | OL1     |       8.99 |</span><br><span class=\"line\">|    1003 | FC      |       2.50 |</span><br><span class=\"line\">|    1003 | TNT1    |       2.50 |</span><br><span class=\"line\">|    1003 | SLING   |       4.49 |</span><br><span class=\"line\">+---------+---------+------------+</span><br></pre></td></tr></table></div></figure>\n\n\n\n\n        <h3 id=\"全文本搜索\"   >\n          <a href=\"#全文本搜索\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>全文本搜索</h3>\n      <p>虽然<strong>通配符</strong>及<strong>正则表达式</strong>它们作为搜索机制非常有用，但仍存在几个重要的限制：</p>\n<ol>\n<li>性能—-通配符和正则表达式匹配通常要求MySQL尝试匹配表中所有行（而且这些搜索极少使用表索引）。因此，由于被搜索行数不断增加，这些搜索可能非常耗时。</li>\n<li>明确控制—-使用通配符和正则表达式匹配，很难（而且并不总能）明确地控制匹配什么和不匹配什么。例如，指定一个词必须匹配，一个词必须不匹配，而一个词仅在第一个词确实匹配的情况下才可以匹配或者才可以不匹配。</li>\n<li>智能化的结果—-虽然基于通配符和正则表达式的搜索提供了非常灵活的搜索，但它们都不能提供一种智能化的选择结果的方法。</li>\n</ol>\n<p>所有上述这些限制以及更多的限制都可以用<strong>全文本搜索</strong>来解决。在使用全文本搜索时，MySQL不需要分别查看每个行，不需要分别分析和处理每个词。MySQL创建指定列中各词的一个索引，搜索可以针对这些词进行。这样，MySQL可以快速有效地绝对哪些词匹配（哪些行包含它们），哪些词不匹配，它们匹配的频率，等等。</p>\n<ol>\n<li><p><strong>为了进行全文本搜索，必须索引被搜索的列，而且要随着数据的更改不断重新索引</strong>。在对表列进行适当设计后，MySQL会自动进行所有的索引和重新索引。但值得注意的是，在导入数据时应该先不启用<code>FULLTEXT</code>索引，应该首先导入所有数据，然后再修改表，定义<code>FULLTEXT</code>建立索引。这样有助于更快的导入数据及更快的更新索引（索引总数据的时间小于每行分时分别索引）。</p>\n</li>\n<li><p>除非使用<code>BINARY</code>方式，否则全文本搜索不区分大小写。</p>\n</li>\n<li><p><strong>全文本搜索会返回以文本匹配的良好程度排序的数据</strong>。</p>\n</li>\n</ol>\n<ul>\n<li>启用全文本搜索支持</li>\n</ul>\n<p>一般在创建表时启用全文本搜索。<code>CREATE TABLE</code>语句接受<code>FULLTEXT</code>子句，它给出别索引列的一个逗号分隔的列表。</p>\n<p>在定义后，MySQL自动维护该索引，在增加、更新或删除行时，索引随之自动更新。</p>\n<p><strong><code>FULLTEXT</code>子句可以指定多个列</strong>。</p>\n<p><strong>可以在创建表时指定<code>FULLTEXT</code>，也可以在稍后指定</strong>。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE productnotes</span><br><span class=\"line\">(</span><br><span class=\"line\">    note_id    int        NOT NULL    AUTO_INCREMENT</span><br><span class=\"line\">    prod_id    char(10)   NOT NULL,</span><br><span class=\"line\">    note_date  datetime   NOT NULL,</span><br><span class=\"line\">    note_text  text       NULL,</span><br><span class=\"line\">    PRIMARY KEY(note_id),</span><br><span class=\"line\">    FULLTEXT(note_text)</span><br><span class=\"line\">)ENGINE&#x3D;MyISAM;</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>进行全文本搜索</li>\n</ul>\n<p>在索引之后，使用两个函数<code>Match()</code>和<code>Against()</code>执行全文本搜索，其中<code>Match()</code>指定被搜索的列，<code>Against()</code>指定要使用的搜索表达式。</p>\n<p><strong>传递给<code>Match()</code>的值必须与<code>FULLTEXT()</code>定义中的相同。如果指定多个列，则必须列出它们（而且次序正确）。</strong></p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT note_text</span><br><span class=\"line\">FROM productnotes</span><br><span class=\"line\">WHERE Match(note_text) Against(&#39;rabbit&#39;);</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+----------------------------------------------------------------------------------------------------------------------+</span><br><span class=\"line\">| note_text                                                                                                            |</span><br><span class=\"line\">+----------------------------------------------------------------------------------------------------------------------+</span><br><span class=\"line\">| Customer complaint: rabbit has been able to detect trap, food apparently less effective now.                         |</span><br><span class=\"line\">| Quantity varies, sold by the sack load.</span><br><span class=\"line\">All guaranteed to be bright and orange, and suitable for use as rabbit bait. |</span><br><span class=\"line\">+----------------------------------------------------------------------------------------------------------------------+</span><br></pre></td></tr></table></div></figure>\n\n\n\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT note_text,</span><br><span class=\"line\">\t   Match(note_text) Against(&#39;rabbit&#39;) AS rank</span><br><span class=\"line\">FROM productnotes;</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：下面的例子和其上的例子最明显的区别时，前者将返回所有行，因为没有<code>WHERE</code>字句进行过滤，同时将全文本匹配结果作为新行<code>rank</code>进行展示。</p>\n<ul>\n<li>使用查询扩展</li>\n</ul>\n<p>查询扩展使用<code>WITH QUERY EXPANSION</code>子句完成。</p>\n<p>查询扩展用来设法放宽所返回的全文本搜索结果的范围。使用查询扩展时，MySQL对数据和索引进行两遍扫描来完成搜索：</p>\n<ol>\n<li>首先，进行一个基本的全文本搜索，找出与搜索条件匹配的所有行；</li>\n<li>其次，MySQL检查这些匹配行并选择所有有用的词(根据某种规则)；</li>\n<li>再其次，MySQL再次进行全文本搜索，这次不仅使用原来的条件，而且还使用所有有用的词。</li>\n</ol>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT note_text</span><br><span class=\"line\">FROM productnotes</span><br><span class=\"line\">WHERE Match(note_text) Against(&#39;anvils&#39; WITH QUERY EXPANSION);</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>布尔文本搜索</li>\n</ul>\n<p>MySQL支持全文本搜索的另外一种形式，称为<strong>布尔方式（boolean mode）</strong>。其可提供关于如下内容的细节：</p>\n<ol>\n<li>要匹配的词；</li>\n<li>要排斥的词（如果某行包含这个词，则不返回该行，即使它包含其他指定的词也是如此）；</li>\n<li>排列提示（指定某些词比其他词更加重要，更重要的词等级变高）；</li>\n<li>表达式分组；</li>\n<li>另外一些内容。</li>\n</ol>\n<p><strong>布尔方式不同于上述使用的全文本搜索语法，它即使在没有定义<code>FULLTEXT</code>索引的情况下，也可以使用。但这是一种非常缓慢的操作</strong>。</p>\n<p>在布尔方式中，不按等级值降序排序返回的行。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT note_text FROM productnotes </span><br><span class=\"line\">WHERE Match(note_text) Against(&#39;heavy&#39; IN BOOLEAN MODE);</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT note_text FORM productnotes</span><br><span class=\"line\">WHERE Match(note_text) Against(&#39;heavy -rope*&#39; IN BOOLEAN MODE);</span><br></pre></td></tr></table></div></figure>\n\n<p>全文本布尔操作符表：</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>布尔操作符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+</td>\n<td>包含，词必须存在</td>\n</tr>\n<tr>\n<td>-</td>\n<td>排除，词必须不存在</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>包含，而且增加等级值</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>包含，而且减少等级值</td>\n</tr>\n<tr>\n<td>()</td>\n<td>把词组成子表达式(允许这些子表达式作为一个组被包含、排除、排列等)</td>\n</tr>\n<tr>\n<td>~</td>\n<td>取消一个词的排序值</td>\n</tr>\n<tr>\n<td>*</td>\n<td>词尾的通配符</td>\n</tr>\n<tr>\n<td>“ “</td>\n<td>定义一个短语(与单个词的列表不一样，它匹配整个短语以便包含或排除这个短语)</td>\n</tr>\n</tbody></table></div>\n<p>示例：</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT note_text</span><br><span class=\"line\">FROM productnotes</span><br><span class=\"line\">WHERE Match(note_text) Against(&#39;+rabbit +bait&#39; IN BOOLEAN MODE);</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：搜索匹配包含词rabbit和bait的行。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT note_text</span><br><span class=\"line\">FROM productnotes</span><br><span class=\"line\">WHERE Match(note_text) Against(&#39;rabbit bait&#39; IN BOOLEAN MODE);</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：搜索匹配包含rabbit和bait中的至少一个词的行。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT note_text</span><br><span class=\"line\">FROM productnotes</span><br><span class=\"line\">WHERE Match(note_text) Against(&#39;&quot;rabbit bait&quot;&#39; IN BOOLEAN MODE);</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：搜索匹配短语rabbit bait而不是匹配两个词rabbit和bait。</p>\n<ul>\n<li>全文本搜索的重要说明</li>\n</ul>\n<ol>\n<li>在索引全文本数据时，短词被忽略且从索引中排除。短词定义为哪些具有3个或3个以下字符的词（可以根据需要更改）。</li>\n<li>MySQL带有一个内建的非用词(stopword)列表，这些词在索引全文本数据时将被忽略。如果需要，可以覆盖这个列表。</li>\n<li>许多词出现的频率很高，搜索它们没有用处(返回太多的结果)。因此，MySQL规定了一条50%规则，如果一个词出现在50%以上的行中，则将它作为一个非用词忽略。**50%规则不用于<code>IN BOOLEAN MODE</code>。</li>\n<li>如果表中的行数少于3行，则全文本搜索不返回结果(因此每个词或者不出现，或者出现在50%的行中)。</li>\n<li>忽略词中的的单引号。例如：don’t 索引为 dont。</li>\n<li>不具有词分隔符(包括日语和汉语)的语言不能恰当地返回全文本搜索结果。</li>\n<li>仅在MyISAM数据库引擎中支持全文本搜索。</li>\n</ol>\n\n        <h3 id=\"插入数据\"   >\n          <a href=\"#插入数据\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>插入数据</h3>\n      <p>使用<code>INSERT</code>语句来插入或添加行到数据库表，插入可以用几种方式使用：</p>\n<ol>\n<li>插入完整的行</li>\n<li>插入行的一部分</li>\n<li>插入多行</li>\n<li>插入某些查询结果</li>\n</ol>\n<p><strong>重要注意事项</strong>：</p>\n<ol>\n<li><p>如果某个列没有值，应该使用<code>NULL</code>值(假定表允许对该列指定空值)。</p>\n</li>\n<li><p>对于自动增量，可以省略其值。</p>\n</li>\n<li><p>如果表的定义允许，则可以在<code>INSERT</code>操作中省略某些列。被省略的列应该满足以下某个条件。</p>\n<ul>\n<li>该列的定义为允许<code>NULL</code>值（无值或空值）。</li>\n<li>在表定义中给出默认值。这表示如果不给出值，将使用默认值。</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>插入完整的行</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO customers</span><br><span class=\"line\">VALUES (NULL,</span><br><span class=\"line\">        &#39;Ppe E.LaPew&#39;,</span><br><span class=\"line\">        &#39;100 Main Street&#39;,</span><br><span class=\"line\">        &#39;Los Angeles&#39;,</span><br><span class=\"line\">        &#39;CA&#39;,</span><br><span class=\"line\">        &#39;90046&#39;,</span><br><span class=\"line\">        &#39;USA&#39;,</span><br><span class=\"line\">        NULL,</span><br><span class=\"line\">        NULL,</span><br><span class=\"line\">        NULL);</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：这种语法没有指定列名，各个列必须以它们在表定义中出现的次序填充。这是一种不安全的语法，因为它极              度依赖于表中列的定义次序。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO customers(cust_name,</span><br><span class=\"line\">                      cust_address,</span><br><span class=\"line\">                      cust_city,</span><br><span class=\"line\">                      cust_state,</span><br><span class=\"line\">                      cust_zip,</span><br><span class=\"line\">                      cust_country,</span><br><span class=\"line\">                      cust_contact,</span><br><span class=\"line\">                      cust_email)</span><br><span class=\"line\">        VALUES(&#39;Ppe E.LaPew&#39;,</span><br><span class=\"line\">        \t   &#39;100 Main Street&#39;,</span><br><span class=\"line\">        \t   &#39;Los Angeles&#39;,</span><br><span class=\"line\">        \t   &#39;CA&#39;,</span><br><span class=\"line\">        \t   &#39;90046&#39;,</span><br><span class=\"line\">        \t   &#39;USA&#39;,</span><br><span class=\"line\">        \t   NULL,</span><br><span class=\"line\">               NULL);</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：这种语法与上述的语法显著的区别是明确的指出的列名。在插入行时，MySQL将用VALUES列表中对应的值填入列表中的对应项。因为提供了列名，VALUES必须按其指定的次序匹配指定列名，但不一定需要按各个列在实际表中的次序。这种方式的明显优点是，即使表的结构改变，此语句仍然可以正确工作。</p>\n<ul>\n<li>插入多个行</li>\n</ul>\n<p>可以使用多条<code>INSERT</code>语句。或者，只要每条<code>INSERT</code>语句中的列名和次序相同，也可以使用一条<code>INSERT</code>语句，组合提交多个行。</p>\n<p><strong>MySQL用条<code>INSERT</code>语句处理多个插入比使用多条<code>INSERT</code>语句快</strong>。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO customers(cust_name,</span><br><span class=\"line\">                      cust_address,</span><br><span class=\"line\">                      cust_city,</span><br><span class=\"line\">                      cust_state,</span><br><span class=\"line\">                      cust_zip,</span><br><span class=\"line\">                      cust_country)</span><br><span class=\"line\">VALUES(</span><br><span class=\"line\">    \t&#39;Ppe E.LaPew&#39;,</span><br><span class=\"line\">        &#39;100 Main Street&#39;,</span><br><span class=\"line\">        &#39;Los Angeles&#39;,</span><br><span class=\"line\">    \t&#39;CA&#39;,</span><br><span class=\"line\">        &#39;90046&#39;,</span><br><span class=\"line\">        &#39;USA&#39;</span><br><span class=\"line\">\t\t),</span><br><span class=\"line\">\t (</span><br><span class=\"line\">        &#39;M .Martian&#39;,</span><br><span class=\"line\">        &#39;42 Galaxy Way&#39;,</span><br><span class=\"line\">        &#39;New York&#39;,</span><br><span class=\"line\">        &#39;NY&#39;,</span><br><span class=\"line\">        &#39;11213&#39;,</span><br><span class=\"line\">        &#39;USA&#39;</span><br><span class=\"line\">     );</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>插入检索出的数据</li>\n</ul>\n<p>可以利用<code>INSERT</code>将一条<code>SELECT</code>语句的结果插入表中。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO customers(cust_id,</span><br><span class=\"line\">                     cust_contact,</span><br><span class=\"line\">                     cust_email,</span><br><span class=\"line\">                     cust_name,</span><br><span class=\"line\">                     cust_address,</span><br><span class=\"line\">                     cust_city,</span><br><span class=\"line\">                     cust_state,</span><br><span class=\"line\">                     cust_zip,</span><br><span class=\"line\">                     cust_country)</span><br><span class=\"line\">        SELECT cust_id,</span><br><span class=\"line\">        \t   cust_contact,</span><br><span class=\"line\">               cust_email,</span><br><span class=\"line\">               cust_name,</span><br><span class=\"line\">               cust_address,</span><br><span class=\"line\">               cust_city,</span><br><span class=\"line\">               cust_state,</span><br><span class=\"line\">               cust_zip,</span><br><span class=\"line\">               cust_country</span><br><span class=\"line\">         FROM custnew;</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：上述例子使用<code>INSERT SELECT</code>从custnew表中将所有数据导入customers。</p>\n<ul>\n<li>优先级指定</li>\n</ul>\n<p>如果数据检索是最重要的，可以通过在<code>INSERT</code>和<code>INTO</code>之间添加关键字<code>LOW_PRIORITY</code>，指示MySQL降低<code>INSERT</code>语句的优先级。如：<code>INSERT LOW_PRIORITY INTO</code>。</p>\n\n        <h3 id=\"更新和删除数据\"   >\n          <a href=\"#更新和删除数据\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>更新和删除数据</h3>\n      <p>为了更新(修改)表中的数据，可以使用<code>UPDATE</code>语句。可采用两种方式使用<code>UPDATE</code>：</p>\n<ol>\n<li><p>更新表中的特定行</p>\n</li>\n<li><p>更新表中所有行</p>\n</li>\n</ol>\n<ul>\n<li>更新数据</li>\n</ul>\n<p><code>UPDATE</code>语句非常容易使用，基本的<code>UPDATE</code>语句由3部分组成，分别是：</p>\n<ol>\n<li>要更新的表；</li>\n<li>列名和它们的新值；</li>\n<li>确定要更新行的过滤条件。</li>\n</ol>\n<p>**为了删除某个列的值，可设置它为<code>NULL</code>（假如表定义允许<code>NULL</code>值）。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE customers </span><br><span class=\"line\">SET cust_email &#x3D; &#39;elmer@fudd.com&#39;</span><br><span class=\"line\">WHERE cust_id &#x3D; 10005;</span><br><span class=\"line\"></span><br><span class=\"line\">UPDATE customers</span><br><span class=\"line\">SET cust_name &#x3D; &#39;The Fudds&#39;,</span><br><span class=\"line\">\tcust_email &#x3D; &#39;elmer@fudd.com&#39;</span><br><span class=\"line\">WHERE cust_id &#x3D; 10005;</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：<code>UPDATE</code>语句总是以要更新的表的名字开始。<code>SET</code>命令用来将新值赋给被更新的列。</p>\n<ul>\n<li>删除数据</li>\n</ul>\n<p>为了从一个表中删除(去掉)数据，使用<code>DELETE</code>语句。有两种方式使用<code>DELETE</code>:</p>\n<ol>\n<li>从表中删除特定的行；</li>\n<li>从表中删除所有行。</li>\n</ol>\n<p><strong>在使用<code>DELETE</code>语句时一定要小心，MySQL没有撤销操作。一定要注意使用<code>WHERE</code>子句</strong>。</p>\n<p><strong><code>DELETE</code>不需要列名或者通配符。它删除整行而不是删除列。为了删除指定的列，应该使用<code>UPDATE</code>语句</strong>。</p>\n<ul>\n<li>删除所有行</li>\n</ul>\n<p>如果想从表中删除所有行，不要使用<code>DELETE</code>。可使用 <code>TRUNCATE TABLE</code>语句，它完成相同的工作，但速度更快。因为它时通过删除原来的表并重新创建一个新表来实现的，而<code>DELETE</code>是逐行删除表中的数据。</p>\n<ul>\n<li>更新和删除的指导原则</li>\n</ul>\n<ol>\n<li>除非确实打算更新和删除每一行，否则绝对不要使用不带<code>WHERE</code>子句的<code>UPDATE</code>或<code>DELETE</code>语句。</li>\n<li>保证每个表都有主键，尽可能像<code>WHERE</code>子句那样使用它。</li>\n<li>在对<code>UPDATE</code>或<code>DELETE</code>语句使用<code>WHERE</code>子句前，应该先用<code>SELECT</code>语句进行测试，以保证它的过滤时正确的。</li>\n<li>使用强制实施引用完整性的数据库，这样MySQL将不允许删除具有与其他表相关联的数据的行。</li>\n</ol>\n\n        <h3 id=\"创建和操纵表\"   >\n          <a href=\"#创建和操纵表\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>创建和操纵表</h3>\n      <ul>\n<li>创建表</li>\n</ul>\n<p>表的创建使用<code>CREATE TABLE</code>语句完成。为成功创建表，必须给出下列信息：</p>\n<ol>\n<li>新表的名字，在关键字<code>CREATE TABLE</code>之后给出；</li>\n<li>表列的名字和定义，用逗号分隔。</li>\n</ol>\n<p>注意事项：</p>\n<ol>\n<li>在创建新表时，指定的表名必须不存在。为了防止意外覆盖已有的表，SQL要求首先手工删除该表，然后再重建。<strong>如果仅想在一个表不存在时创建它，应该在表名后面给出<code>IF NOT EXISTS</code></strong>。这样做不检查已有表的模式是否与你打算创建的表模式相匹配，它只检查表名是否存在。</li>\n</ol>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE customers </span><br><span class=\"line\">(</span><br><span class=\"line\">\tcust_id\t\t\tint  \t\tNOT NULL  AUTO_INCREMENT,</span><br><span class=\"line\">    cust_name\t\tchar(50)\tNOT NULL,</span><br><span class=\"line\">    cust_address\tchar(50)\tNULL,</span><br><span class=\"line\">    cust_city\t\tchar(50)\tNULL,</span><br><span class=\"line\">    cust_state\t\tchar(5)\t\tNULL,</span><br><span class=\"line\">    cust_zip\t\tchar(10)\tNULL,</span><br><span class=\"line\">    cust_country\tchar(50)\tNULL,</span><br><span class=\"line\">    cust_contact\tchar(50)\tNULL,</span><br><span class=\"line\">    cust_email\t\tchar(255)\tNULL,</span><br><span class=\"line\">    PRIMARY KEY (cust_id)</span><br><span class=\"line\">)ENGINE&#x3D;InnoDB;</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>说明：</strong></p>\n<ol>\n<li><p>实际的表定义(所有列)括在圆括号中，个各列之间用逗号分隔。</p>\n</li>\n<li><p>这个表由9列组成，每列的定义以列名(它在表中必须是唯一的)开始，后跟列的数据类型。</p>\n</li>\n<li><p>表的主键可以在创建表时用关键字<code>PRIMARY KEY</code>指定。</p>\n</li>\n<li><p><code>NULL</code>值就是没有值或者缺值。允许<code>NULL</code>值的列也允许在插入行时不给出该列的值，反之不允许<code>NULL</code>值的行在插入或更新时，该列必须有值。</p>\n</li>\n<li><p><code>AUTO_INCREMENT</code>告诉MySQL，本列为<strong>自动增量</strong>，每增加一行时自动增加。每个表只允许一个<code>AUTO_INCREMENT</code>列，而且它必须被索引(如，通过使它成为主键)。</p>\n<p>自动增量也可以通过在<code>INSERT</code>语句中使用其他值覆盖，这样后续的增量将使用该手工插入的值。</p>\n<p><strong>获取</strong>最后一个增量值可以使用<code>last_insert_id()</code>来获取，如：<code>SELECT last_insert_id();</code>。</p>\n</li>\n</ol>\n<ul>\n<li>多个列组成主键</li>\n</ul>\n<p>为创建多个列组成的主键，应该以逗号分隔的列表给出各列名。</p>\n<p><strong>主键可以在创建表时定义，也可以在创建表后定义</strong>。</p>\n<p><strong>主键只能使用不允许<code>NULL</code>值的列</strong>。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE orderitems</span><br><span class=\"line\">(</span><br><span class=\"line\">order_num\tint \t\tNOT NULL,</span><br><span class=\"line\">order_item\tint\t\t\tNOT NULL,</span><br><span class=\"line\">prod_id\t\tchar(10)\tNOT NULL,</span><br><span class=\"line\">quantity\tint\t\t\tNOT NULL,</span><br><span class=\"line\">item_price  decimal(8,2)NOT NULL,</span><br><span class=\"line\">PRIMARY KEY (order_num,order_item)</span><br><span class=\"line\">)ENGINE&#x3D;InnoDB;</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>指定默认值</li>\n</ul>\n<p>如果插入行时没有给出值，MySQL允许指定此时使用的默认值。在创建表时用<code>DEFAULT</code>关键字指定。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE orderitems</span><br><span class=\"line\">(</span><br><span class=\"line\">order_num\tint \t\tNOT NULL,</span><br><span class=\"line\">order_item\tint\t\t\tNOT NULL,</span><br><span class=\"line\">prod_id\t\tchar(10)\tNOT NULL,</span><br><span class=\"line\">quantity\tint\t\t\tNOT NULL\tDEFAULT 1,</span><br><span class=\"line\">item_price  decimal(8,2)NOT NULL,</span><br><span class=\"line\">PRIMARY KEY (order_num,order_item)</span><br><span class=\"line\">)ENGINE&#x3D;InnoDB;</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>引擎类型</li>\n</ul>\n<p>MySQL与其他DBMS不一样，它具有多种引擎。可以使用<code>ENGINE=</code>语句进行指定。</p>\n<ol>\n<li><p><strong>引擎类型可以混用</strong>。每个表都可以有自己的引擎类型。</p>\n</li>\n<li><p><strong>外键不能跨引擎</strong>。外键用于强制实施引用完整性，因此不能跨引擎。即使用一个引擎的表不能引用具有使用不同引擎的表的外键。</p>\n</li>\n<li></li>\n</ol>\n<figure class=\"highlight c\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">几个重要的引擎：</span></span><br><span class=\"line\"><span class=\"comment\">1. InnoDB 是一个可靠的事务处理引擎，它不支持全文本搜索。</span></span><br><span class=\"line\"><span class=\"comment\">2. MEMORY 的功能等同于MyISAM，但它的数据存储在内存(不是磁盘)中，因此速度很快，特别适合临时表。</span></span><br><span class=\"line\"><span class=\"comment\">3. MyISAM 时一个性能极高的引擎，它支持全文本搜索，但不支持事务处理。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>更新表定义</li>\n</ul>\n<p>为更新表定义，可使用<code>ALTER TABLE</code>语句。但在理想状态下，当表中存储数据以后，该表就不应该再被更新，因此表的设计过程需要花费大量的时间来考虑，十分重要。</p>\n<p><strong>在进行改动前，最好做一个完整的备份。因为数据库表的更改不可撤销</strong>。</p>\n<p>为使用<code>ALTER TABLE</code>更新表结构，必须给出下面信息：</p>\n<ol>\n<li>在<code>ALTER TABLE</code>之后给出要更改的表名(该表必须存在，否则将出错)；</li>\n<li>所做更改的列表。</li>\n</ol>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#给表添加一个列</span><br><span class=\"line\">ALTER TABLE 表名</span><br><span class=\"line\">ADD 列定义;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE vendors</span><br><span class=\"line\">ADD vend_phone CHAR(20);</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：必须明确给出列的数据类型。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#删除刚刚添加的列</span><br><span class=\"line\">ALTER TABLE vendors</span><br><span class=\"line\">DROP COLUMN vend_phone;</span><br></pre></td></tr></table></div></figure>\n\n<p><strong><code>ALTER TABLE</code>的一个常见用途是定义外键</strong>。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE orderitems</span><br><span class=\"line\">ADD CONSTRAINT fk_orderitems_orders</span><br><span class=\"line\">FOREIGN KEY (order_Num) REFERENCES orders(order_num);</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>复杂的表结构更改</li>\n</ul>\n<p>复杂的表结构更改一般需要手动删除过程，它涉及以下步骤：</p>\n<ol>\n<li>用新的列布局创建一个新表；</li>\n<li>使用<code>INSERT SELECT</code>语句，从旧表复制数据到新表。如果有必要，可使用转换函数和计算字段；</li>\n<li>检验包含所需数据的新表；</li>\n<li>重命名旧表(如果确定可以删除它)；</li>\n<li>用旧表原来的名字重命名新表；</li>\n<li>根据需要，重新创建触发器、存储过程、索引和外键。</li>\n</ol>\n<ul>\n<li>删除表</li>\n</ul>\n<p>删除表没有确认，也不能撤销。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP TABLE customers2;</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>重命名表</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RENAME TABLE customers TO customers;</span><br><span class=\"line\"></span><br><span class=\"line\">RENAME TABLE backup_customers TO customers,</span><br><span class=\"line\">\t\t\t backup_vendors TO vendors,</span><br><span class=\"line\">\t\t\t backup_products TO products;</span><br></pre></td></tr></table></div></figure>\n\n\n\n\n        <h3 id=\"视图\"   >\n          <a href=\"#视图\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>视图</h3>\n      <p>视图是虚拟的表。与包含数据的表不一样，视图只包含使用时动态检索数据的查询。</p>\n<p><strong>作为视图，它不包含表中应该有的数据，它包含的是一个SQL查询。</strong></p>\n<p><strong>视图仅仅是用来查看存储在别处的数据的一种设施。视图本身不包含数据，因此它们返回的数据是从其他表中检索出来的。在添加或更改这些表中的数据时，视图将返回改变后的数据。</strong></p>\n<p><strong>视图提供了一种MySQL的<code>SELECT</code>语句层次的封装，可用来简化数据处理及重新格式化基础数据或保护基础数据。</strong></p>\n<ul>\n<li>为什么使用视图</li>\n</ul>\n<ol>\n<li>重用SQL语句。</li>\n<li>简化复杂的SQL操作。在编写查询后，可以方便地重用它而不必知道它的基本查询细节。</li>\n<li>使用表的组成部分而不是整个表。</li>\n<li>保护数据。可以给用户授予表的特定部分的访问权限而不是整个表的访问权限。</li>\n<li>更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。</li>\n</ol>\n<ul>\n<li>视图的规则和限制</li>\n</ul>\n<ol>\n<li>与表一样，视图必须唯一命名。</li>\n<li>对于可以创建的视图数目没有限制。</li>\n<li>为了创建视图，必须具有足够的访问权限。这些限制通常由数据库管理人员授予。</li>\n<li>视图可以嵌套，即可以利用从其他视图中检索数据的查询来构造一个视图。</li>\n<li><code>ORDER BY</code>可以用在视图中，但如果从该视图检索数据的<code>SELECT</code>语句中也含有<code>ORDER BY</code>，那么该视图中的<code>ORDER BY</code>将被覆盖。</li>\n<li>视图不能索引，也不能有关联的触发器或默认值。</li>\n<li>视图可以和表一起使用。例如，编写一条联结表和视图的<code>SELECT</code>语句。</li>\n</ol>\n<ul>\n<li>使用视图</li>\n</ul>\n<ol>\n<li>视图使用<code>CREATE VIEW</code>创建。</li>\n<li>使用<code>SHOW CREATE VIEW viewname;</code>来查看创建视图的语句。</li>\n<li>用<code>DROP</code>删除视图，其语法为<code>DROP VIEW viewname;</code>。</li>\n<li>更新视图时，可以先用<code>DROP</code>再用<code>CREATE</code>,也可以直接用<code>CREATE OR REPLACE VIEW</code>，如果更新的视图不存在，则创建一个视图，如果存在，则替换视图。</li>\n</ol>\n<p><strong>如果从视图中检索数据时使用了一条<code>WHERE</code>子句，则两组子句(一组在视图中，另一组是传递给视图的)将自动结合</strong>。</p>\n<p><strong>视图主要用于检索数据，而不用于更新数据</strong>。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE VIEW productcustomers AS</span><br><span class=\"line\">SELECT cust_name,cust_contact,prod_id</span><br><span class=\"line\">FROM customers,orders,orderitems</span><br><span class=\"line\">WHERE customers.cust_id &#x3D; orders.cust_id</span><br><span class=\"line\">  AND orderitems.order_num &#x3D; orders.order_num;</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：这条语句创建了一个名为<code>productcustomers</code>的视图，它联结三个表，以返回已订购了任意产品的所有客户的列表。为检索订购了产品TNT2的客户，可使用如下语句：</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT cust_name,cust_contact</span><br><span class=\"line\">FROM productcustomers</span><br><span class=\"line\">WHERE prod_id &#x3D; &#39;TNT2&#39;;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+----------------+--------------+</span><br><span class=\"line\">| cust_name      | cust_contact |</span><br><span class=\"line\">+----------------+--------------+</span><br><span class=\"line\">| Coyote Inc.    | Y Lee        |</span><br><span class=\"line\">| Yosemite Place | Y Sam        |</span><br><span class=\"line\">+----------------+--------------+</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>更新视图</li>\n</ul>\n<p>可以使用<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>对视图进行更新。不过更新一个视图将更新其基表，如果对视图增加或删除行，实际上是对其基表增加或删除行。</p>\n<p>但并不是所有视图都可以更新，如果视图定义中有以下操作，则不能进行更新：</p>\n<ol>\n<li>分组(使用<code>GROUP BY</code>和<code>HAVING</code>)；</li>\n<li>联结；</li>\n<li>子查询；</li>\n<li>并；</li>\n<li>聚集函数；</li>\n<li>DISTINCT；</li>\n<li>导出 (计算) 列。</li>\n</ol>\n\n        <h3 id=\"存储过程\"   >\n          <a href=\"#存储过程\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>存储过程</h3>\n      <p>存储过程简单来说，就是为以后的使用而保存的一条或多条MySQL语句的集合。</p>\n<ul>\n<li>为什么使用存储过程</li>\n</ul>\n<ol>\n<li>通过把处理封装在容易使用的单元中，简化复杂的操作(正如前面例子所述)。</li>\n<li>由于不要求反复建立一系列处理步骤，这保证了处理的统一性，也就保证了数据的完整性。</li>\n<li>简化对变动的管理。如果表名、列名或业务逻辑有变化，只需要更改存储过程的代码即可。</li>\n</ol>\n<p>(2 和 3 在一定的程度上来说都可以延伸为安全性。通过存储过程限制对基础数据的访问减少数据讹误的机会)</p>\n<ol start=\"4\">\n<li>提高性能。使用存储过程比使用单独的SQL语句要快。</li>\n<li>存在一些只能用在单个请求中的MySQL元素和特性，存储过程可以使用它们来编写功能更强更灵活的代码。</li>\n</ol>\n<ul>\n<li>执行存储过程</li>\n</ul>\n<p>MySQL称存储过程的执行为调用，MySQL执行存储过程的语句为<code>CALL</code>。<code>CALL</code>接受存储过程的名字以及需要传递给它的任意参数。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CALL 存储过程名(@param_1,</span><br><span class=\"line\">              @param_2,</span><br><span class=\"line\">              @param_3);</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>创建存储过程</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE PROCEDURE 存储过程名()</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">\t待执行的SQL语句</span><br><span class=\"line\">END;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例:</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE PROCEDURE productpricing()</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">\tSELECT Avg(prod_price) AS priceaverage</span><br><span class=\"line\">\tFROM products;</span><br><span class=\"line\">END;</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>删除存储过程</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP PROCEDURE productpricing;</span><br></pre></td></tr></table></div></figure>\n\n\n\n\n\n<ul>\n<li>注意事项–mysql命令行客户机的分隔符</li>\n</ul>\n<p>默认的MySQL语句分隔符为<code>；</code>。因为存储过程中的语句中也以<code>;</code>作为结束，因此在命令行客户机中使用<code>END；</code>时，应临时更改命令行实用程序的语句分隔符，稍作修改，如示：</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER\t&#x2F;&#x2F;</span><br><span class=\"line\">CREATE PROCEDURE productpricing()</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">\tSELECT Avg(prod_price) AS priceaverage</span><br><span class=\"line\">\tFROM products;</span><br><span class=\"line\">END\t&#x2F;&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：<code>DELIMITER</code> 可以告诉命令行使用程序使用其所带符号作为新的语句结束分隔符。</p>\n<ul>\n<li>使用参数</li>\n</ul>\n<p><strong>变量</strong>：内存中一个特定的位置，用来临时存储数据。</p>\n<p><strong>变量名</strong>：所有MySQL变量都必须以@开始。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE PROCEDURE productpricing(</span><br><span class=\"line\">\tOUT pl DECIMAL(8,2),</span><br><span class=\"line\">    OUT ph DECIMAL(8,2),</span><br><span class=\"line\">    OUT pa DECIMAL(8,2)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">BEGIN </span><br><span class=\"line\">\tSELECT Min(prod_price)</span><br><span class=\"line\">\tINTO pl</span><br><span class=\"line\">\tFROM products;</span><br><span class=\"line\">\tSELECT Max(prod_price)</span><br><span class=\"line\">\tINTO ph</span><br><span class=\"line\">\tFROM products;</span><br><span class=\"line\">\tSELECT Avg(prod_price)</span><br><span class=\"line\">\tINTO pa</span><br><span class=\"line\">\tFROM products;</span><br><span class=\"line\">END;</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：</p>\n<p>此存储过程接受三个参数。在创建带参数的存储过程时，每个参数必须具有指定的类型。关键字<code>OUT</code>指出相应的参数用来从存储过程传出一个值(返回给调用者)。MySQL支持<code>IN</code>（传递给存储过程）、<code>OUT</code> (从存储过程传出一个值，返回给调用者)和<code>INOUT</code>(对存储过程传入和传出)类型的参数。存储过程位于<code>BEGIN</code>和<code>END</code>语句内。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CALL productpricing(@pricelow,</span><br><span class=\"line\">                    @pricehigh,</span><br><span class=\"line\">                   \t@priceaverage);</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：在调用时，这条语句并不显示任何数据。它返回以后可以显示(或在其他处理中使用)的变量。</p>\n<ul>\n<li>建立智能存储过程</li>\n</ul>\n<p>存储过程可以包含业务规则和处理逻辑。这将使得存储过程更加的智能。</p>\n<ul>\n<li>检查存储过程</li>\n</ul>\n<p>可以使用<code>SHOW CREATE PROCEDURE</code>来显示一个创建存储过程的语句。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW CREATE PROCEDURE productpricing;</span><br></pre></td></tr></table></div></figure>\n\n<p>如果要获得包括何时、由谁创建等详细信息的存储过程列表，可以使用<code>SHOW PROCEDURE STATUS</code>。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW PROCEDURE STATUS LIKE &#39;productpricing&#39;;</span><br></pre></td></tr></table></div></figure>\n\n\n\n\n        <h3 id=\"游标\"   >\n          <a href=\"#游标\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>游标</h3>\n      <p>游标(cursor)是一个存储在MySQL服务器上的数据库查询，它不是一条<code>SELECT</code>语句，而是被该语句检索出来的结果集。在存储了游标之后，应用程序可以根据需要滚动或浏览其中的数据。游标主要用户交互式应用。</p>\n<ul>\n<li>使用游标</li>\n</ul>\n<p>使用游标涉及几个明确的步骤。</p>\n<ol>\n<li>在能够使用游标前，必须声明(定义)它。这个过程实际上没有检索数据，它只是定义要使用的<code>SELECT</code>语句。</li>\n<li>一旦声明后，必须打开游标以供使用。这个过程用前面定义的<code>SELECT</code>语句把数据实际检索出来。</li>\n<li>对于填有数据的游标，根据需要取出(检索各行)。</li>\n<li>在结束游标使用时，必须关闭游标。</li>\n</ol>\n<ul>\n<li>创建游标</li>\n</ul>\n<p>游标用<code>DECLARE</code>语句创建。<code>DECLARE</code>命名游标，并定义相应的<code>SELECT</code>语句，根据需要带<code>WHERE</code>和其他子句。例如，下面的语句定义了名为<code>ordernumbers</code>的游标，使用了可以检索所有订单的<code>SELECT</code>语句。</p>\n<p><strong>DECLARE语句的次序</strong>：<code>DECLARE</code>语句的发布存在特定的次序。用<code>DECLARE</code>语句定义的局部变量必须在定义任意游标或句柄之前定义，而句柄必须在游标之后定义。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE PROCEDURE processorders()</span><br><span class=\"line\">BEGIN \t</span><br><span class=\"line\">\tDECLARE ordernumbers CURSOR</span><br><span class=\"line\">\tFOR</span><br><span class=\"line\">\tSELECT order_num FROM orders;</span><br><span class=\"line\">END;</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：这个游标在存储过程处理完成后消失，它局限于存储过程。</p>\n<ul>\n<li>打开和关闭游标</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OPEN 游标名;#打开游标</span><br><span class=\"line\">CLOSE 游标名;#关闭游标</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>如果不明确关闭游标，MySQL将会在到达<code>END</code>语句时自动关闭它</strong>。</p>\n<ul>\n<li>使用游标数据</li>\n</ul>\n<p>在一个游标被打开后，可以使用<code>FETCH</code>语句分别访问它的每一行。<code>FETCH</code>指定检索什么数据(所需的列)，检索出来的数据存储在什么地方。它还向前移动游标中的内部行指针，使下一条<code>FETCH</code>语句检索下一行(不重复读取同一行)。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE PROCEDURE local processorders()</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">\t--Declare local variables</span><br><span class=\"line\">\tDECLARE done BOOLEAN DEFAULT 0;</span><br><span class=\"line\">\tDECLARE o INT;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t--Declare the cursor</span><br><span class=\"line\">\tDECLARE ordernumbers CURSOR</span><br><span class=\"line\">\tFOR</span><br><span class=\"line\">\tSELECT order_num FROM orders;</span><br><span class=\"line\">\t--Declare continue handler</span><br><span class=\"line\">\tDECLARE CONTINUE HANDLER FOR SQLSTATE &#39;02000&#39; SET done&#x3D;1;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t--Open the cursor</span><br><span class=\"line\">\tOPEN ordernumbers;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t--Loop through all rows</span><br><span class=\"line\">\tREPEAT</span><br><span class=\"line\">\t\t--Get order number</span><br><span class=\"line\">\t\tFETCH ordernumbers INTO o;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t--End of Loop</span><br><span class=\"line\">\tUNTIL done END REPEAT;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t--Close the cursor</span><br><span class=\"line\">\tCLOSE ordernumbers;</span><br><span class=\"line\">END;</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：这里需要着重说明下语句：</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE CONTINUE HANDLER FOR SQLSTATE &#39;02000&#39; SET done&#x3D;1;</span><br></pre></td></tr></table></div></figure>\n\n<p>这条语句定义了一个<code>CONTINUE HANDLER</code>,它是在条件出现时被执行的代码。它指出当<code>SQLSTATE &#39;02000&#39;</code>出现时，<code>SET done=1</code>。<code>SQLSTATE &#39;02000&#39;</code>是一个未找到条件，当<code>REPEAT</code>由于没有更多的行供循环而不能继续时，出现这个条件。</p>\n\n        <h3 id=\"触发器\"   >\n          <a href=\"#触发器\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>触发器</h3>\n      <p>触发器是MySQL响应以下任意语句而自动执行的一条MySQL语句(或位于<code>BEGIN</code>和<code>END</code>语句之间的一组语句):</p>\n<ol>\n<li><code>DELETE</code></li>\n<li><code>INSERT</code></li>\n<li><code>UPDATE</code></li>\n</ol>\n<p><strong>只有表才支持触发器，视图不支持(临时表也不支持)</strong>。</p>\n<p><strong>触发器按每个表每个事件每次地定义，每个表每个事件每次只允许一个触发器，因此每个表最多支持6个触发器</strong>。</p>\n<p><strong>MySQL触发器不支持<code>CALL</code>语句，这表示不能从触发器内调用存储过程。所需的存储过程代码需要复制到触发器中</strong>。</p>\n<ul>\n<li>创建触发器</li>\n</ul>\n<p>在创建触发器时，需要给出4条信息：</p>\n<ol>\n<li>唯一的触发器名;</li>\n<li>触发器关联的表；</li>\n<li>触发器应该响应的活动(<code>DELETE</code>、<code>INSERT</code>或<code>UPDATE</code>)；</li>\n<li>触发器何时执行(处理之前或之后)。<code>AFTER</code> or<code>BEFORE</code>。</li>\n</ol>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TRIGGER 触发器名 AFTER INSERT ON 关联表名</span><br><span class=\"line\">FOR EACH ROW SELECT &#39;显示文本&#39;;</span><br><span class=\"line\"># 这里的显示文本非必须，只是一个示例。类似语句将在每次成功插入数据后，显示&quot;显示文本&quot;。</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>删除触发器</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP TRIGGER 触发器名;</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>INSERT触发器</li>\n</ul>\n<p>INSERT触发器在<code>INSERT</code>语句之前或之后执行。需要知道以下几点:</p>\n<ol>\n<li>在INSERT触发器代码内，可引用一个名为NEW的虚拟表，访问被插入的行；</li>\n<li>在BEFORE INSERT触发器中，NEW中的值也可以被更新(允许更改被插入的值)；</li>\n<li>对于<code>AUTO_INCREMENT</code>列，NEW在<code>INSERT</code>执行之前包含0，在<code>INSERT</code>执行之后包含新的自动生成值。</li>\n</ol>\n<ul>\n<li>DELETE触发器</li>\n</ul>\n<p>DELETE触发器在<code>DELETE</code>语句执行之前或之后执行。需要知道以下两点:</p>\n<ol>\n<li>在<code>DELETE</code>触发器代码内，你可以引用一个名为OLD的虚拟表，访问被删除的行；</li>\n<li><code>OLD</code>中的值全都是只读的，不能更新。</li>\n</ol>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TRIGGER deleteorder BEFORE DELETE ON orders</span><br><span class=\"line\">FOR EACH ROW</span><br><span class=\"line\">BEGIN </span><br><span class=\"line\">\tINSERT INTO archive_orders(order_num,order_date,cust_id)</span><br><span class=\"line\">\tVALUES(OLD.order_num,OLD.order_date,OLD.cust_id)</span><br><span class=\"line\">END;</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：上述例子演示使用OLD虚拟表保存将要被删除的行到一个存档表中。同时，上述例子还是用了多语句触发器的技巧，使得触发器能够容纳多条语句。</p>\n<ul>\n<li>UPDATE触发器</li>\n</ul>\n<p>UPDATE触发器在<code>UPDATE</code>语句执行之前或之后执行。需要知道以下几点：</p>\n<ol>\n<li>在UPDATE触发器代码中，你可以引用一个名为OLD的虚拟表访问以前(UPDATE语句之前)的值，引用一个名为NEW的虚拟表访问新的更新的值；</li>\n<li>在BEFORE UPDATE触发器中，NEW中的值可能也被更新(允许更改将用于<code>UPDATE</code>语句中的值)；</li>\n<li>OLD中的值全都是只读的，不能更新。</li>\n</ol>\n","site":{"data":{"stun":{"shake_file":true,"index_subtitle":false,"canonical":true,"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu360_site_verification":null,"sougou_site_verification":null,"menu":{"home":"/ || fas fa-home","archives":"/archives/ || fas fa-folder-open","categories":"/categories/ || fas fa-layer-group","tags":"/tags/ || fas fa-tags"},"submenu":null,"menu_settings":{"icon_only":false,"text_only":false},"favicon":{"small":"/images/icons/favicon-16x16.png","medium":"/images/icons/favicon-32x32.png"},"pwa":{"enable":false,"manifest":"/manifest.json","theme_color":"#54bcff"},"night_mode":{"enable":true,"button":{"color":"#fafafa","bg_color":"#8c8a8a"},"icon":{"dark":"🌜","light":"🌞"}},"layout":{"content":"768px","sidebar":"300px","content_sidebar_gap":"30px","main_padding":{"default":"20px","tablet":"15px","mobile":"10px"}},"header":{"enable":true,"show_on":{"post":true},"height":"80%","bg_image":{"enable":true,"url":"/images/header.jpg"},"mask":{"enable":true,"opacity":0.5},"nav":{"height":"50px","bg_color":"#333"},"scroll_down_icon":{"enable":false,"name":"fas fa-angle-down","animation":true}},"body":{"bg_image":{"enable":true,"url":"/images/blogbk.jpg","fixed":true,"repeat":false},"mask":{"enable":false,"opacity":{"default":0.1,"night_mode":0.6}}},"footer":{"bg_image":{"enable":false,"url":null},"mask":{"enable":false,"opacity":0.5},"copyright":{"enable":true,"text":null,"since":null,"end":null},"icon":{"enable":true,"name":"fas fa-heart","animation":false,"color":"#ff0000"},"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":false,"icp":null},"custom":{"enable":false,"text":null}},"creative_commons":{"enable":true,"license":"BY-NC-SA","sidebar":true,"post":true,"language":null},"back2top":{"enable":true,"icon":{"name":"fas fa-rocket","rotate":"-45deg","color":"#49b1f5","hover_color":"#fc6423"}},"sidebar":{"enable":true,"position":"right","offsetTop":"20px","horizon_line":false},"author":{"enable":true,"avatar":{"url":"/images/icons/stun-logo.svg","rounded":false,"opacity":1,"animation":"turn"},"motto":"hello world"},"social":{"github":"https://github.com/ || fab fa-github","google":"https://plus.google.com/ || fab fa-google","twitter":"https://twitter.com/ || fab fa-twitter","youtube":"https://youtube.com/ || fab fa-youtube"},"social_setting":{"enable":false,"icon_only":true},"toc":{"enable":true,"list_number":true,"wrap":true,"expand_all":false,"min_depth":1,"max_depth":6},"feed":{"enable":false,"email":null,"rss":null},"reading_progress":{"enable":true,"color":"#fc6423","height":"1px"},"codeblock":{"style":"default","highlight":"light","word_wrap":false},"heading_line":true,"reward":{"enable":false,"alipay":null,"wechat":null},"post_meta":{"icon_only":false,"created":{"enable":true,"icon":"far fa-calendar-plus"},"updated":{"enable":true,"icon":"far fa-calendar-check"},"reading_time":{"enable":false,"icon":"far fa-clock","speed":{"zh":200,"en":80}},"word_count":{"enable":false,"icon":"far fa-file-word"}},"post_list":{"paginate":{"home":true,"archives":false},"cover_image":{"home":false}},"post_widget":{"tags":true,"end_text":{"enable":true,"horizon_line":true},"share":{"enable":false,"label":"Share to: ","target":"qzone, qq, weibo, wechat, douban, linkedin, facebook, twitter, google"}},"stick_top":{"position":"right","icon":"fas fa-thumbtack","rotate":"45deg","color":"#999"},"gitalk":{"enable":false,"owner":null,"repo":null,"client_id":null,"client_secret":null,"admin":null,"distraction_free_mode":false,"language":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"Just go go","avatar":"mp","meta":"nick,mail,link","pageSize":10,"visitor":false,"recordIP":false,"language":null},"minivaline":{"enable":false,"appId":null,"appKey":null,"placeholder":"Write a Comment","adminEmailMd5":null,"math":true,"md":true,"lang":null},"livere":{"enable":false,"uid":null},"disqus":{"enable":false,"shortname":null,"count":true},"utterances":{"enable":false,"owner":null,"repo":null,"mapping":"title","label":"utterances","theme":"github-light","script_url":"https://utteranc.es/client.js"},"busuanzi":{"enable":false,"icon_only":false,"site_uv":{"enable":true,"icon":"fas fa-user"},"site_pv":{"enable":true,"icon":"fas fa-eye"},"post_pv":{"enable":true,"icon":"fas fa-eye"}},"google_analytics":null,"baidu_analytics":null,"tencent_analytics":null,"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"show_stats":true}},"local_search":{"enable":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"canvas_nest":{"enable":true,"color":"0,0,0","opacity":0.6,"count":200,"zIndex":-1},"math":{"enable":false,"per_page":false,"engine":"katex","mathjax":{"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","mhchem":{"enable":false,"mhchem_js":"https://cdn.jsdelivr.net/npm/mathjax-mhchem@3.3.2/mhchem.min.js"}},"katex":{"cdn":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css","copy_tex":{"enable":true,"copy_tex_js":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.min.js","copy_tex_css":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.css"}}},"fancybox":false,"zoom_image":{"enable":true,"mask_color":"rgba(0,0,0,0.6)","gap_aside":"20px"},"gallery_waterfall":{"enable":false,"col_width":"220px","gap_x":"10px","gap_y":"10px"},"lazyload":{"enable":false,"placeholder":"gif"},"quicklink":{"enable":false,"home":true,"archive":true,"delay":true,"timeout":10000,"priority":true,"ignores":["/\\/api\\/?/","uri => uri.includes('.xml')","uri => uri.includes('.zip')","(uri, el) => el.hasAttribute('nofollow')","(uri, el) => el.hasAttribute('noprefetch')"]},"pjax":{"enable":false,"avoid_banner":false,"elements":null,"selectors":null,"switches":null,"switchesOptions":null,"history":true,"scrollTo":false,"scrollRestoration":false,"cacheBust":false,"debug":false,"currentUrlFullReload":false,"timeout":0},"google_adsense":{"enable":false,"client":null,"js_src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"},"external_link":{"icon":{"enable":true,"name":"fas fa-external-link-alt","color":"#aaa"}},"shortcuts":{"switch_post":{"enable":false}},"tag_cloud":{"start_color":"#a4d8fa","end_color":"#49b1f5","min_size":16,"max_size":26,"max_amount":200},"kill_old_ie":{"enable":false,"warning_url":"https://support.dmeng.net/upgrade-your-browser.html"},"css":"css","js":"js","images":"images","icon":{"search":"fas fa-search","localsearch_empty":"far fa-meh","menu_btn":"fas fa-bars","feed_email":"fas fa-envelope","feed_rss":"fas fa-rss","paginator_prev":"fas fa-angle-left","paginator_next":"fas fa-angle-right","read_more_btn":"fas fa-long-arrow-alt-right","post_tags":"fas fa-tag","copy_btn":"fas fa-copy","prompt_success":"fas fa-check-circle","prompt_info":"fas fa-arrow-circle-right","prompt_warning":"fas fa-exclamation-circle","prompt_error":"fas fa-times-circle","valine_visitor":"fas fa-eye","post_heading":"fas fa-link","notetag_default":"fas fa-arrow-circle-right","notetag_success":"fas fa-check-circle","notetag_info":"fas fa-info-circle","notetag_warning":"fas fa-exclamation-circle","notetag_danger":"fas fa-minus-circle"},"cdn":{"fontawesome":null,"jquery":null,"velocity":null,"velocity_ui":null,"gitalk_js":null,"gitalk_css":null,"gitalk_md5":null,"valine":null,"leancloud_storage":null,"minivaline":null,"busuanzi":null,"instantsearch_js":null,"instantsearch_css":null,"canvas_ribbon":null,"canvas_nest":null,"fancybox_js":null,"fancybox_css":null,"masonry":null,"lazyload":null,"quicklink":null,"pjax":null,"share_js":null,"share_css":null},"rootConfig":{"title":"在下的小书架","subtitle":"对一件事理解的越深，就能做的越好！","description":"","author":"zxr","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"stun","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/qingfengzxr/qingfengzxr.github.io","branch":"master","message":"(Site update {{ now('YYYY-MM-DD HH:mm:ss') }})"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"","more":"<p>[TOC]</p>\n\n        <h3 id=\"声明\"   >\n          <a href=\"#声明\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>声明</h3>\n      <p>以下所有相关命令行内容均基于ubuntu18.04。具体学习过程源自书籍《MySQL必知必会》。</p>\n\n        <h3 id=\"关系数据库的基础知识\"   >\n          <a href=\"#关系数据库的基础知识\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>关系数据库的基础知识</h3>\n      <ul>\n<li>关系表</li>\n</ul>\n<p>理解关系表的最好办法是看一个现实的例子。</p>\n<figure class=\"highlight c\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">假如有一个包含产品目录的数据库表，其中每种类别的物品占一行。对于每种物品要存储的信息包括产品描述和价格，以及生产该产品的供应商信息。</span></span><br><span class=\"line\"><span class=\"comment\">现在，假如有由同一供应商生产的多种物品，那么在何处存储供应商信息（如，供应商名、地址、联系方法等）呢？将这些数据与产品信息分开存储有如下几个重要的理由。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">1. 因为同一个供应商生产的每个产品的供应商信息都是相同的，对每个产品重复此信息既浪费时间又浪费空间。</span></span><br><span class=\"line\"><span class=\"comment\">2. 如果供应商信息改变，只需改变一次即可。</span></span><br><span class=\"line\"><span class=\"comment\">3. 如果有重复数据（即每种产品都存储供应商信息），很难保证每次输入该数据的方式都相同。不一致的数据在报表中很\t  难利用。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></div></figure>\n\n<ol>\n<li><p><strong>相同的数据出现多次决不是一件好事，此因素时关系数据库设计的基础。</strong></p>\n</li>\n<li><p><strong>关系表的设计就是要保证把信息分解成多个表，一类数据一个表。各表通过某些常用的值（即关系设计中的关系）互相关联。</strong></p>\n</li>\n<li><p>关系数据库的可伸缩性远比非关系数据库要好。</p>\n</li>\n</ol>\n<p><strong>主键</strong>：唯一标识表中每行的这个列（或这组列）称为主键。</p>\n<p><strong>外键</strong>：外键为某个表中的一列，它包含另一个表的主键值，定义了两个表之间的关系。</p>\n\n        <h3 id=\"MySQL的登录\"   >\n          <a href=\"#MySQL的登录\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>MySQL的登录</h3>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -h 127.0.0.1 -u root -p</span><br></pre></td></tr></table></div></figure>\n\n<p>参数说明：</p>\n<ul>\n<li><strong>-h</strong> : 指定客户端所要登录的 MySQL 主机名, 登录本机(localhost 或 127.0.0.1)该参数可以省略;</li>\n<li><strong>-u</strong> : 登录的用户名;</li>\n<li><strong>-p</strong> : 告诉服务器将会使用一个密码来登录, 如果所要登录的用户名密码为空, 可以忽略此选项。</li>\n</ul>\n\n        <h3 id=\"建立一个新的数据库\"   >\n          <a href=\"#建立一个新的数据库\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>建立一个新的数据库</h3>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE learning;</span><br></pre></td></tr></table></div></figure>\n\n<p>这样就创建了一个名为 <em>learning</em> 的数据库（数据源）</p>\n\n        <h3 id=\"使用一个指定的数据库\"   >\n          <a href=\"#使用一个指定的数据库\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>使用一个指定的数据库</h3>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USE learning;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h3 id=\"执行SQL脚本文件\"   >\n          <a href=\"#执行SQL脚本文件\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>执行SQL脚本文件</h3>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source XX.sql</span><br></pre></td></tr></table></div></figure>\n\n<p>注意：XX.sql 需要路径支持</p>\n\n        <h3 id=\"显示内容\"   >\n          <a href=\"#显示内容\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>显示内容</h3>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW DATABASES; &#x2F;&#x2F;显示存在的数据库</span><br><span class=\"line\">SHOW TABLES;\t&#x2F;&#x2F;显示当前数据库存在的表</span><br><span class=\"line\">SHOW COLUMNS FROM TABLES;\t&#x2F;&#x2F;显示表列</span><br></pre></td></tr></table></div></figure>\n\n\n\n\n        <h3 id=\"检索数据\"   >\n          <a href=\"#检索数据\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>检索数据</h3>\n      <ol>\n<li><strong>数据的格式化是一个表示问题，而不是一个检索问题</strong></li>\n</ol>\n<ul>\n<li>检索单个列</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT 待检索列名 FROM 预检索表名;</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>检索多个列</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT 待检索列名1,待检索列名2,待检索列名3,...,最后一个待检索列名 FROM 预检索表名;</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>检索所有列</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT * FROM 预检索表名;</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>检索时只返回不同的值</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT DISTINCT 待检索列名 FROM 预检索表名;</span><br></pre></td></tr></table></div></figure>\n\n<p>注： DISTINCT 关键字应用于所有列而不是它的前置列。意味着当检索了多个列时，只有每个列的所有行都不同，才被检索出来。</p>\n<ul>\n<li>限制检索结果数量</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT 待检索列名 FROM 预检索表名 LIMIT 检索开始位置，要检索的行数;</span><br></pre></td></tr></table></div></figure>\n\n<p>注： 检索开始位置可省略，默认为0；如：</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT prod_name FROM products LIMIT 5;</span><br></pre></td></tr></table></div></figure>\n\n<p>返回不多于5行，从第  行0  开始（位置参数为0）。</p>\n\n        <h3 id=\"排序检索数据\"   >\n          <a href=\"#排序检索数据\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>排序检索数据</h3>\n      <ol>\n<li><strong>关系数据库设计理论认为，如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有意义</strong></li>\n</ol>\n<ul>\n<li><strong>子句</strong></li>\n</ul>\n<p>SQL语句由子句组成，有些是必需的，有些是可选的。一个子句通常由一个关键字和所提供的数据组成。当前最明显的例子便是 <code>SELECT</code>语句的 <code>FROM</code> 子句。</p>\n<ul>\n<li>字句的顺序</li>\n</ul>\n<p>在给出 <code>ORDER BY</code> 字句时，应该保证它位于 <code>FROM</code> 字句之后。如果使用 <code>LIMIT</code> ,它必须位于 <code>ORDER BY</code> 之后。使用子句的次序不对将产生错误消息。</p>\n<ul>\n<li>单列排序</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT 待检索列名 FROM 预检索表名 ORDER BY 带检索列名;</span><br></pre></td></tr></table></div></figure>\n\n<p>注： 可以通过非选择检索列进行排序。</p>\n<ul>\n<li>多列排序</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT 待检索列名1,待检索列名2,待检索列名3 FROM 预检索表名 ORDER BY 待检索列名2,待检索列名3;</span><br></pre></td></tr></table></div></figure>\n\n<p>在上述排序中，将优先按照  <em>待检索列名2</em>  进行排序，仅在多个行具有相同的  <em>待检索列名2</em>  时才按 <em>待检索列名3</em></p>\n<p>进行再排序。</p>\n<ul>\n<li>指定排序顺序</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT 待检索列名1,待检索列名2,待检索列名3 FROM 预检索表名 ORDER BY 待检索列名1 DESC,待检索列名2;</span><br></pre></td></tr></table></div></figure>\n\n<p>数据排序默认以升序排序进行。当要进行 <strong>降序排序</strong> 时，必须指定 <code>DESC</code> 关键字。 <strong>升序排序</strong> 的关键字为 <code>ASC</code>。</p>\n<p>注意： 与 <code>DISTINCT</code> 关键字不同，<code>DESC</code> 关键字只应用到直接位于其前面的列名。在上述排序命令中，降序只对待检索列名1进行指定，而待检索列名2仍然以默认的升序进行排序。</p>\n\n        <h3 id=\"过滤数据\"   >\n          <a href=\"#过滤数据\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>过滤数据</h3>\n      <p>只检索所需数据需要指定 <em>搜索条件(search criteria)</em> ，搜索条件也成为 _过滤条件_。</p>\n<ol>\n<li><strong>MySQL在执行匹配时默认不区分大小写</strong></li>\n</ol>\n<ul>\n<li>子句顺序</li>\n</ul>\n<p><code>WHERE</code>子句在表名<code>FROM</code>子句之后给出。</p>\n<p>在同时使用了 <code>ORDER BY</code> 子句和 <code>WHERE</code> 子句时，应该让 <code>ORDER BY</code> 位于 <code>WHERE</code> 之后，否则会产生错误。</p>\n<ul>\n<li>WHERE子句条件操作符</li>\n</ul>\n<p>[][]</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>=</td>\n<td>等于</td>\n</tr>\n<tr>\n<td>&lt;&gt;</td>\n<td>不等于</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不等于</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于等于</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于等于</td>\n</tr>\n<tr>\n<td>BETWEEN</td>\n<td>在指定两个值之间</td>\n</tr>\n</tbody></table></div>\n<ul>\n<li>检查单个值</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT 待检索列名1，待检索列名2 FROM 预检索表名 WHERE 待匹配列名 操作符 范围值;</span><br></pre></td></tr></table></div></figure>\n\n<p>注：待匹配列名 可以是 选择检索列也可以是非选择检索列。</p>\n<p>比较字符串时需要用单引号来进行限定。数值比较则不需要引号。如：</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT prod_name,prod_price FROM products WHERE prod_name &#x3D; &#39;fuses&#39;;</span><br><span class=\"line\">SELECT vend_id,prod_name FROM products WHERE vend_id &lt;&gt; 1003;</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>检测范围值</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT 待检索列名1，待检索列名2 FROM 预检索表名 WHERE 待匹配列名 BETWEEN 开始值 AND 结束值;</span><br></pre></td></tr></table></div></figure>\n\n<p>注： <code>BETWEEN</code> 匹配范围中所有的值，包括指定的开始值和结束值。</p>\n<ul>\n<li>空值检查</li>\n</ul>\n<p>在创建表时，可以指定其中的列是否可以不包含值。在一个列不包含值时，称其为包含空值 <strong>NULL</strong>。</p>\n<p><strong>NULL</strong> 无值，它与字段包含0、空字符串或仅仅包含空格不同。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT 待检索列名1 FROM 预检索表名 WHERE 待匹配列名 IS NULL;</span><br></pre></td></tr></table></div></figure>\n\n<p>NULL与不匹配：</p>\n<p>在通过过滤选择出不具有特定值的行时，你可能希望返回具有NULL值的行。但是，不行。</p>\n<p>因为未知具有特殊含义，数据库不知道他们是否匹配，所以在匹配过滤或者不匹配过滤时不返回它们。</p>\n<p>因此，在过滤数据时，一定要验证返回数据中确实给出了被过滤列具有NULL的行。</p>\n<ul>\n<li>组合条件检查</li>\n</ul>\n<ol>\n<li><strong>MySQL支持使用NOT对IN、BETWEEN和EXISTS子句取反</strong></li>\n</ol>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>逻辑操作符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>AND</td>\n<td>与</td>\n</tr>\n<tr>\n<td>OR</td>\n<td>或</td>\n</tr>\n<tr>\n<td>NOT</td>\n<td>非</td>\n</tr>\n<tr>\n<td>IN</td>\n<td>指定条件范围</td>\n</tr>\n</tbody></table></div>\n<p>计算次序：SQL像大多数语言一样，优先处理<code>AND</code>操作符。因此要使用圆括号明确地分组相应的操作符。示例：</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT prod_name,prod_price FROM products </span><br><span class=\"line\">WHERE (vend_id &#x3D; 1002 OR vend_id &#x3D; 1003) AND prod_price &gt;&#x3D; 10;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT prod_name,prod_price FROM products WHERE vend_id IN (1002,1003) ORDER BY prod_name;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT prod_name,prod_price FROM products WHERE vend_id NOT IN (1002,1003);</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>通配符过滤</li>\n</ul>\n<p><strong>通配符</strong>: 用来匹配值的一部分的特殊字符。</p>\n<p><strong>搜索模式</strong>:由字面值、通配符或者两者组合而成的搜索条件。</p>\n<p>为在搜索子句中使用通配符，必须使用<code>LIKE</code>操作符。<code>LIKE</code>指示MySQL，后跟的搜索模式利用通配符匹配而不是直接使用相等匹配进行比较。</p>\n<p><strong>使用通配符的技巧</strong>:</p>\n<ol>\n<li>不要过度使用通配符。在能达到目的的情况下优先使用其他操作符。</li>\n<li>除非绝对必要，不要把通配符放在搜索模式的开始处。把通配符置于搜索模式的开始处，搜索起来最慢。</li>\n</ol>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>通配符</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%</td>\n<td>任何字符出现任意次数</td>\n</tr>\n<tr>\n<td>_</td>\n<td>和%作用一样，但是只匹配单个字符</td>\n</tr>\n</tbody></table></div>\n<p>注： 通配符不可以匹配 NULL。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT 待检索列名1，待检索列名2 FROM 预检索表名 WHERE 待匹配列名 LIKE &#39;%sample&#39;;</span><br></pre></td></tr></table></div></figure>\n\n\n\n\n        <h3 id=\"正则表达式搜索\"   >\n          <a href=\"#正则表达式搜索\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>正则表达式搜索</h3>\n      <p>MySQL使用<code>WHERE</code>对正则表达式提供了初步的支持，允许你指定正则表达式，过滤<code>SELECT</code>检索出来的数据。</p>\n<ol>\n<li><p><strong>MySQL仅支持多数正则表达式实现的一个很小的子集</strong>。</p>\n</li>\n<li><p><strong><code>LIKE</code>与<code>REGEXP</code>之间存在着一个终于差别，<code>LIKE</code>匹配整个列，而<code>REGEXP</code>在列值中进行匹配</strong>。</p>\n</li>\n<li><p>**MySQL中的正则表达式匹配不区分大小写。为区分大小写需要使用<code>BINARY</code>关键字。如：</p>\n<p> <code>WHERE prod_name REGEXP BINARY &#39;JetPack .000&#39;</code></p>\n</li>\n</ol>\n<ul>\n<li>基本字符匹配</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT prod_name FROM products WHERE prod_name REGEXP &#39;.000&#39; ORDER BY prod_name;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出:</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+--------------+</span><br><span class=\"line\">| prod_name    |</span><br><span class=\"line\">+--------------+</span><br><span class=\"line\">| JetPack 1000 |</span><br><span class=\"line\">| JetPack 2000 |</span><br><span class=\"line\">+--------------+</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>匹配几个字符之一</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT prod_name FROM products WHERE prod_name REGEXP &#39;[123] Ton&#39; ORDER BY prod_name;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-------------+</span><br><span class=\"line\">| prod_name   |</span><br><span class=\"line\">+-------------+</span><br><span class=\"line\">| 1 ton anvil |</span><br><span class=\"line\">| 2 ton anvil |</span><br><span class=\"line\">+-------------+</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>匹配特殊字符</li>\n</ul>\n<p>MySQL的转义使用<code>\\\\</code>两个反斜杠。MySQL自己解析一个，正则表达式解析另一个。</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>空白元字符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\\\f</td>\n<td>换页</td>\n</tr>\n<tr>\n<td>\\\\n</td>\n<td>换行</td>\n</tr>\n<tr>\n<td>\\\\r</td>\n<td>回车</td>\n</tr>\n<tr>\n<td>\\\\t</td>\n<td>制表符</td>\n</tr>\n<tr>\n<td>\\\\v</td>\n<td>纵向制表</td>\n</tr>\n</tbody></table></div>\n<p>说明：每个元字符前面<strong>只有两个反斜杠</strong>，此处为了抵消掉markdown的语法，写了三个。</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>重复元字符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>*</td>\n<td>0个或多个匹配</td>\n</tr>\n<tr>\n<td>+</td>\n<td>1个或多个匹配（ 等于{1,} ）</td>\n</tr>\n<tr>\n<td>?</td>\n<td>0个或1个匹配 （ 等于{0,,1} ）</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>指定数目的匹配</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>不少于指定数目的匹配</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>匹配数目的范围（m不超过255）</td>\n</tr>\n</tbody></table></div>\n<ul>\n<li>预定义字符集，字符类</li>\n</ul>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>字符类</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[:alnum:]</td>\n<td>任意字母和数字(同[a-ZA-Z0-9])</td>\n</tr>\n<tr>\n<td>[:alpha:]</td>\n<td>任意字符([a-zA-Z])</td>\n</tr>\n<tr>\n<td>[:blank:]</td>\n<td>空格和制表(同[\\\\t])</td>\n</tr>\n<tr>\n<td>[:cntrl:]</td>\n<td>ASCII控制字符(ASCII0到31和127)</td>\n</tr>\n<tr>\n<td>[:digit:]</td>\n<td>任意数字(同[0-9])</td>\n</tr>\n<tr>\n<td>[:graph:]</td>\n<td>与[:print:]相同，但不包括空格</td>\n</tr>\n<tr>\n<td>[:lower:]</td>\n<td>任意小写字母(同[a-z])</td>\n</tr>\n<tr>\n<td>[:print:]</td>\n<td>任意可打印字符</td>\n</tr>\n<tr>\n<td>[:punct:]</td>\n<td>既不在[:alnum:]又不在[:cntrl:]中的任意字符</td>\n</tr>\n<tr>\n<td>[:space:]</td>\n<td>包括空格在内的任意空白字符(同[\\\\f\\\\n\\\\r\\\\t\\\\v])</td>\n</tr>\n<tr>\n<td>[:upper:]</td>\n<td>任意大写字母(同[A-Z])</td>\n</tr>\n<tr>\n<td>[:xdigit:]</td>\n<td>任意十六进制数字(同[a-fA-F0-9])</td>\n</tr>\n</tbody></table></div>\n<p>说明：每个双反斜杠<strong>只有两个反斜杠</strong>，此处为了抵消掉markdown的语法，写了三个。</p>\n<ul>\n<li>定位元字符</li>\n</ul>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>定位元字符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>^</td>\n<td>文本的开始</td>\n</tr>\n<tr>\n<td>$</td>\n<td>文本的结尾</td>\n</tr>\n<tr>\n<td>[[:&lt;:]]</td>\n<td>词的开始</td>\n</tr>\n<tr>\n<td>[[:&gt;:]]</td>\n<td>词的结尾</td>\n</tr>\n</tbody></table></div>\n<ul>\n<li>简单的正则表达式测试</li>\n</ul>\n<p>可以在不使用数据库表的情况下使用<code>SELECT</code>来测试正则表达式。<code>REGEXP</code>检查总是返回0(没有匹配)或者1(匹配)。可以用带文字串的REFEXP来测试表达式，并试验它们。如：</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT &#39;hello&#39; REGEXP &#39;[0-9]&#39;;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+------------------------+</span><br><span class=\"line\">| 'hello' REGEXP '[0-9]' |</span><br><span class=\"line\">+------------------------+</span><br><span class=\"line\">|                      0 |</span><br><span class=\"line\">+------------------------+</span><br></pre></td></tr></table></div></figure>\n\n\n\n\n        <h3 id=\"创建计算字段\"   >\n          <a href=\"#创建计算字段\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>创建计算字段</h3>\n      <ul>\n<li>拼接</li>\n</ul>\n<p>拼接是指将值联结到一起构成单个值。在MySQL的<code>SELECT</code>语句中，可使用<code>Concat()</code>函数来拼接两个列。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT Concat(vend_name,&#39; (&#39;,vend_country,&#39;)&#39;) FROM vendors ORDER BY vend_name;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出:</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-----------------------------------------+</span><br><span class=\"line\">| Concat(vend_name,' (',vend_country,')') |</span><br><span class=\"line\">+-----------------------------------------+</span><br><span class=\"line\">| ACME (USA)                              |</span><br><span class=\"line\">| Anvils R Us (USA)                       |</span><br><span class=\"line\">| Furball Inc. (USA)                      |</span><br><span class=\"line\">| Jet Set (England)                       |</span><br><span class=\"line\">| Jouets Et Ours (France)                 |</span><br><span class=\"line\">| LT Supplies (USA)                       |</span><br><span class=\"line\">+-----------------------------------------+</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>格式调整</li>\n</ul>\n<p>可以使用<code>Trim()</code>函数去掉串左右两边的空格。<code>LTrim()</code>去掉串左边的空格。<code>RTtim()</code>去掉串右边的空格。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT Concat(RTrim(vend_name),&#39; (&#39;,RTrim(vend_country),&#39;)&#39;) FROM vendors ORDER BY vend_name;</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>使用别名(alias)</li>\n</ul>\n<p>别名：一个字段或值的替换名。别名使用<code>AS</code>关键字赋予。</p>\n<p>别名的常见用途：在实际的表列名包含不符合规定的字符（如空格）时重新命名它，在原来的名字含混或容易误解                                时扩充它等等。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT Concat(RTrim(vend_name),&#39; (&#39;,RTrim(vend_country),&#39;)&#39;) AS vend_title FROM vendors</span><br><span class=\"line\">ORDER BY vend_name;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-------------------------+</span><br><span class=\"line\">| vend_title              |</span><br><span class=\"line\">+-------------------------+</span><br><span class=\"line\">| ACME (USA)              |</span><br><span class=\"line\">| Anvils R Us (USA)       |</span><br><span class=\"line\">| Furball Inc. (USA)      |</span><br><span class=\"line\">| Jet Set (England)       |</span><br><span class=\"line\">| Jouets Et Ours (France) |</span><br><span class=\"line\">| LT Supplies (USA)       |</span><br><span class=\"line\">+-------------------------+</span><br></pre></td></tr></table></div></figure>\n\n<p>注: 仔细观察拼接段落的示例，很容易就可以看出两者的区别。</p>\n<ul>\n<li>执行算术计算</li>\n</ul>\n<p>计算字段的另一常见用途是对检索出的数据进行算术计算。</p>\n<p>测试计算：<code>SELECT</code>可以省略<code>FROM</code>子句以便简单地访问和处理表达式。如<code>SELECT 3*2;</code> <code>SELECT Now();</code>。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT prod_id,quantity,item_price FROM orderitems WHERE order_num &#x3D; 20005;</span><br><span class=\"line\">SELECT prod_id,quantity,item_price,</span><br><span class=\"line\">\t   quantity*item_price AS expanded_price</span><br><span class=\"line\">FROM orderitems WHERE order_num &#x3D; 20005;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出:</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+----------+------------+</span><br><span class=\"line\">| prod_id | quantity | item_price |</span><br><span class=\"line\">+---------+----------+------------+</span><br><span class=\"line\">| ANV01   |       10 |       5.99 |</span><br><span class=\"line\">| ANV02   |        3 |       9.99 |</span><br><span class=\"line\">| TNT2    |        5 |      10.00 |</span><br><span class=\"line\">| FB      |        1 |      10.00 |</span><br><span class=\"line\">+---------+----------+------------+</span><br><span class=\"line\">==============================================================</span><br><span class=\"line\">+---------+----------+------------+----------------+</span><br><span class=\"line\">| prod_id | quantity | item_price | expanded_price |</span><br><span class=\"line\">+---------+----------+------------+----------------+</span><br><span class=\"line\">| ANV01   |       10 |       5.99 |          59.90 |</span><br><span class=\"line\">| ANV02   |        3 |       9.99 |          29.97 |</span><br><span class=\"line\">| TNT2    |        5 |      10.00 |          50.00 |</span><br><span class=\"line\">| FB      |        1 |      10.00 |          10.00 |</span><br><span class=\"line\">+---------+----------+------------+----------------+</span><br></pre></td></tr></table></div></figure>\n\n\n\n\n        <h3 id=\"使用数据处理函数\"   >\n          <a href=\"#使用数据处理函数\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>使用数据处理函数</h3>\n      <p>SQL支持利用函数来处理数据。函数一般是在数据上执行的，它给数据的转换和处理提供了方便。</p>\n<p><strong>函数没有SQL的可移植性强，如果决定使用函数，应该保证做好代码注释</strong></p>\n<p><strong>大多数SQL实现支持以下类型的函数：</strong></p>\n<ol>\n<li>用于处理文本串的文本函数</li>\n<li>用于在数值数据上进行算术操作的数值函数</li>\n<li>用于处理日期和时间值并从这些值中提取特定成分的日期和时间函数</li>\n<li>返回DBMS正使用的特殊信息（如返回用户登录信息，检查版本细节）的系统函数。</li>\n</ol>\n<ul>\n<li>文本处理函数</li>\n</ul>\n<p>常用的文本处理函数如下：</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Left()</td>\n<td>返回串左边的字符</td>\n</tr>\n<tr>\n<td>Length()</td>\n<td>返回串的长度</td>\n</tr>\n<tr>\n<td>Locate()</td>\n<td>找出串的一个子串</td>\n</tr>\n<tr>\n<td>Lower()</td>\n<td>将串转换为小写</td>\n</tr>\n<tr>\n<td>LTrim()</td>\n<td>去掉串左边的空格</td>\n</tr>\n<tr>\n<td>Right()</td>\n<td>返回串右边的字符</td>\n</tr>\n<tr>\n<td>RTrim()</td>\n<td>去掉串右边的空格</td>\n</tr>\n<tr>\n<td>Soundex()</td>\n<td>返回串的SOUNDEX值</td>\n</tr>\n<tr>\n<td>SubString()</td>\n<td>返回子串的字符</td>\n</tr>\n<tr>\n<td>Upper()</td>\n<td>将串转换为大写</td>\n</tr>\n</tbody></table></div>\n<ul>\n<li>日期和时间处理函数</li>\n</ul>\n<p><strong>用日期进行过滤需要注意一些别的问题和使用特殊的MySQL函数</strong></p>\n<ol>\n<li>无论什么时候指定一个日期，不管是插入或更新表值还是用WHERE字句进行过滤，日期格式必须为yyyy-mm=dd。这是首选的日期格式，因为它排除了多义性。</li>\n</ol>\n<p>常用日期和时间处理函数如下：</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>AddDate()</td>\n<td>增加一个日期（天、周等）</td>\n</tr>\n<tr>\n<td>AddTime()</td>\n<td>增加一个时间（时、分等）</td>\n</tr>\n<tr>\n<td>CurDate()</td>\n<td>返回当前日期</td>\n</tr>\n<tr>\n<td>CurTime()</td>\n<td>返回当前时间</td>\n</tr>\n<tr>\n<td>Date()</td>\n<td>返回日期时间的日期部分</td>\n</tr>\n<tr>\n<td>DateDiff()</td>\n<td>计算两个日期之差</td>\n</tr>\n<tr>\n<td>Date_Add()</td>\n<td>高度灵活的日期运算函数</td>\n</tr>\n<tr>\n<td>Date_Format()</td>\n<td>返回一个格式化的日期或时间串</td>\n</tr>\n<tr>\n<td>Day()</td>\n<td>返回一个日期的天数部分</td>\n</tr>\n<tr>\n<td>DayOfWeek()</td>\n<td>对于一个日期，返回对应的是星期几</td>\n</tr>\n<tr>\n<td>Hour()</td>\n<td>返回一个时间的小时部分</td>\n</tr>\n<tr>\n<td>Minute()</td>\n<td>返回一个时间的分钟部分</td>\n</tr>\n<tr>\n<td>Month()</td>\n<td>返回一个时期的月份部分</td>\n</tr>\n<tr>\n<td>Now()</td>\n<td>返回当前日期和时间</td>\n</tr>\n<tr>\n<td>Second()</td>\n<td>返回一个时间的秒部分</td>\n</tr>\n<tr>\n<td>Time()</td>\n<td>返回一个日期时间的时间部分</td>\n</tr>\n<tr>\n<td>Year()</td>\n<td>返回一个日期的年份部分</td>\n</tr>\n</tbody></table></div>\n<ul>\n<li>数值处理函数</li>\n</ul>\n<p>常用数值处理函数如下：</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Abs()</td>\n<td>返回一个数的绝对值</td>\n</tr>\n<tr>\n<td>Cos()</td>\n<td>返回一个角度的余弦</td>\n</tr>\n<tr>\n<td>Exp()</td>\n<td>返回一个数的指数值</td>\n</tr>\n<tr>\n<td>Mod()</td>\n<td>返回除操作的余数</td>\n</tr>\n<tr>\n<td>Pi()</td>\n<td>返回圆周率</td>\n</tr>\n<tr>\n<td>Rand()</td>\n<td>返回一个随机数</td>\n</tr>\n<tr>\n<td>Sin()</td>\n<td>返回一个角度的正弦</td>\n</tr>\n<tr>\n<td>Sqrt()</td>\n<td>返回一个数的平方根</td>\n</tr>\n</tbody></table></div>\n\n        <h3 id=\"汇总数据\"   >\n          <a href=\"#汇总数据\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>汇总数据</h3>\n      <ul>\n<li>聚集 函数</li>\n</ul>\n<p>我们经常需要汇总数据而不用把它们实际检索出来，为此MySQL提供了专门的函数。这些函数就是<strong>聚集函数</strong>。</p>\n<p><strong>聚集函数：</strong>运行在行组上，计算和返回单个值的函数。</p>\n<p><strong>标准偏差聚集函数</strong></p>\n<p>SQL聚集函数表：</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>AVG()</td>\n<td>返回某列的平均值</td>\n</tr>\n<tr>\n<td>COUNT()</td>\n<td>返回某列的行数</td>\n</tr>\n<tr>\n<td>MAX()</td>\n<td>返回某列的最大值</td>\n</tr>\n<tr>\n<td>MIN()</td>\n<td>返回某列的最小值</td>\n</tr>\n<tr>\n<td>SUM()</td>\n<td>返回某列值之和</td>\n</tr>\n</tbody></table></div>\n<p>补充说明：</p>\n<p>AVG()：只能用来确定特定数值列的平均值，而且列名必须作为函数参数给出。为了获得多个列的平均值，必须使             用多个AVG()函数。</p>\n<p>​             AVG()函数忽略列值为<code>NULL</code>的行。</p>\n<p>COUNT(): 如果指定列名，则指定列值为<code>NULL</code>的行被COUNT()函数忽略，但如果COUNT()函数中用的是星号(*),则                 不忽略。</p>\n<p>MAX()：忽略列值为<code>NULL</code>的行。</p>\n<p>MIN()：忽略列值为<code>NULL</code>的行。    </p>\n<p>SUM()：忽略列值为<code>NULL</code>的行。</p>\n<ul>\n<li>聚集不同值</li>\n</ul>\n<ol>\n<li><strong>不允许使用COUNT( DISTINCT )</strong></li>\n</ol>\n<p>以上5个聚集函数都可以如下使用：</p>\n<ol>\n<li><p>对所有的行执行计算，指定<code>ALL</code>参数或不给参数(默认为<code>ALL</code>)。</p>\n</li>\n<li><p>只包含不同的值，指定<code>DISTINCT</code>参数。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT AVG(prod_price) AS avg_price FROM products WHERE vend_id &#x3D; 1003;</span><br><span class=\"line\">SELECT AVG(DISTINCT prod_price) AS avg_price FROM products WHERE vend_id &#x3D; 1003;</span><br></pre></td></tr></table></div></figure>\n\n</li>\n</ol>\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-----------+</span><br><span class=\"line\">| avg_price |</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">| 13.212857 |</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">================================================</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">| avg_price |</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">| 15.998000 |</span><br><span class=\"line\">+-----------+</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>组合聚集函数</li>\n</ul>\n<p><code>SELECT</code>语句可根据需要包含多个聚集函数。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT COUNT(*) AS num_items,</span><br><span class=\"line\">\t   MIN(prod_price) AS price_min,</span><br><span class=\"line\">\t   MAX(prod_price) AS price_max,</span><br><span class=\"line\">\t   AVG(prod_price) AS price_avg</span><br><span class=\"line\">FROM products;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-----------+-----------+-----------+-----------+</span><br><span class=\"line\">| num_items | price_min | price_max | price_avg |</span><br><span class=\"line\">+-----------+-----------+-----------+-----------+</span><br><span class=\"line\">|        14 |      2.50 |     55.00 | 16.133571 |</span><br><span class=\"line\">+-----------+-----------+-----------+-----------+</span><br></pre></td></tr></table></div></figure>\n\n\n\n\n        <h3 id=\"分组数据\"   >\n          <a href=\"#分组数据\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>分组数据</h3>\n      <ul>\n<li>数据分组</li>\n</ul>\n<p><strong>分组</strong>允许把数据分为多个逻辑组，以便能对每个组进行聚集计算。分组是在<code>SELECT</code>语句的<code>GROUP BY</code>子句中建立的。</p>\n<p><strong>子句顺序</strong>：<code>GROUP BY</code>子句必须出现在<code>WHERE</code>子句之后，<code>ORDER BY</code>子句之前。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT vend_id,COUNT(*) AS num_prods </span><br><span class=\"line\">FROM products </span><br><span class=\"line\">GROUP BY vend_id;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+-----------+</span><br><span class=\"line\">| vend_id | num_prods |</span><br><span class=\"line\">+---------+-----------+</span><br><span class=\"line\">|    1001 |         3 |</span><br><span class=\"line\">|    1002 |         2 |</span><br><span class=\"line\">|    1003 |         7 |</span><br><span class=\"line\">|    1005 |         2 |</span><br><span class=\"line\">+---------+-----------+</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：上述的<code>SELECT</code>语句指定了两个列，vend_id包含产品供应商的ID,num_prods为计算字段(用COUNT(*)函数建立)。<code>GROUP BY</code>子句指示MySQL按照vend_id排序并分组数据。这导致对每个vend_id而不是整个表计算num_prods一次。从输出中可以看到，供应商1001有3个产品，供应商1002有2个产品，供应商1003有7个产品，而供应商1005有2个产品。</p>\n<p><code>GROUP BY</code>子句后还可以跟<code>WITH ROLLUP</code>关键字，表示在分组统计的基础上再次进行汇总统计（在每个分组下都会有汇总统计）。</p>\n<p>[更多内容参考][<a href=\"https://blog.csdn.net/qq_42254088/article/details/81904819]\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_42254088/article/details/81904819]</a></p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT vend_id,COUNT(*) AS num_prods</span><br><span class=\"line\">FROM products</span><br><span class=\"line\">GROUP BY vend_id WITH ROLLUP;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+-----------+</span><br><span class=\"line\">| vend_id | num_prods |</span><br><span class=\"line\">+---------+-----------+</span><br><span class=\"line\">|    1001 |         3 |</span><br><span class=\"line\">|    1002 |         2 |</span><br><span class=\"line\">|    1003 |         7 |</span><br><span class=\"line\">|    1005 |         2 |</span><br><span class=\"line\">|    NULL |        14 |</span><br><span class=\"line\">+---------+-----------+</span><br></pre></td></tr></table></div></figure>\n\n<p><strong><code>GROUP BY</code>字句的重要规定</strong>:</p>\n<ol>\n<li><p><code>GROUP BY</code>子句可以包含任意数目的列。这使得能对分组进行嵌套，为数据分组提供更细致的控制。</p>\n</li>\n<li><p>如果在<code>GROUP BY</code>子句中嵌套了分组，数据将在最后规定的分组上进行汇总。换句话说，在建立分组时，指定的所有列都一起计算，不能再从个别的列中取回数据。</p>\n</li>\n<li><p><code>GROUP BY</code>子句中列出的每个列都必须是<strong>检索列</strong>或<strong>有效的表达式</strong>（但不能是聚集函数）。如果<code>SELECT</code>中使用表达式，则必须在<code>GROUP BY</code>子句中指定相同的表达式。<strong>不能使用别名</strong>。</p>\n</li>\n<li><p>除聚集计算语句外，<code>SELECT</code>语句中的每个列都必须在<code>GROUP BY</code>子句中给出。</p>\n</li>\n<li><p>如果分组列中具有<code>NULL</code>值，则<code>NULL</code>将作为一个分组返回。如果列中有多行<code>NULL</code>值，它们将分为一组。</p>\n</li>\n<li><p><code>GROUP BY</code>子句必须出现在<code>WHERE</code>子句之后，<code>ORDER BY</code>子句之前。</p>\n</li>\n</ol>\n<ul>\n<li>过滤分组</li>\n</ul>\n<p>除了能用<code>GROUP BY</code>分组数据外，MySQL还允许过滤分组。</p>\n<p><code>WHERE</code>的过滤指定的是行而不是分组。<code>WHERE</code>没有分组的概念。为了实现分组过滤，需要使用<code>HAVING</code>子句，<code>HAVING</code>非常类似于<code>WHERE</code>，它能替代绝大部分的<code>WHERE</code>功能。两者唯一的差别是<code>WHERE</code>过滤行，而<code>HAVING</code>过滤分组。</p>\n<p><strong><code>HAVING</code>支持所有<code>WHERE</code>操作符</strong>。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT cust_id,COUNT(*) AS orders </span><br><span class=\"line\">FROM orders</span><br><span class=\"line\">GROUP BY cust_id</span><br><span class=\"line\">HAVING COUNT(*) &gt;&#x3D; 2;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+--------+</span><br><span class=\"line\">| cust_id | orders |</span><br><span class=\"line\">+---------+--------+</span><br><span class=\"line\">|   10001 |      2 |</span><br><span class=\"line\">+---------+--------+</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>同时使用<code>WHERE</code>和<code>HAVING</code>：</strong></p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT vend_id,COUNT(*) AS num_prods</span><br><span class=\"line\">FROM products</span><br><span class=\"line\">WHERE prod_price &gt;&#x3D; 10</span><br><span class=\"line\">GROUP BY vend_id</span><br><span class=\"line\">HAVING COUNT(*) &gt;&#x3D; 2;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+-----------+</span><br><span class=\"line\">| vend_id | num_prods |</span><br><span class=\"line\">+---------+-----------+</span><br><span class=\"line\">|    1003 |         4 |</span><br><span class=\"line\">|    1005 |         2 |</span><br><span class=\"line\">+---------+-----------+</span><br></pre></td></tr></table></div></figure>\n\n<p>对于<code>WHERE</code>和<code>HAVING</code>的差别，也可以结合上述示例换另一种理解方法：</p>\n<p><code>WHERE</code>在数据分组前进行过滤，<code>HAVING</code>在数据分组后进行过滤。这是一种重要的区别，<code>WHERE</code>排除的行不包括在分组中，这可能会改变计算值，从而影响<code>HAVING</code>子句中基于这些值过滤掉的分组。</p>\n<ul>\n<li>分组和排序</li>\n</ul>\n<p>仅管我们经常发现用<code>GROUP BY</code>分组的数据确实以分组顺序输出，但情况并不总是这样，它不是SQL规范所要求的。因此一般在使用<code>GROUP BY</code>时也应该给出<code>ORDER BY</code>,以保证数据正确排序。</p>\n\n        <h3 id=\"SELECT字句顺序表\"   >\n          <a href=\"#SELECT字句顺序表\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>SELECT字句顺序表</h3>\n      <div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>字句</th>\n<th>说明</th>\n<th>是否必须使用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SELECT</td>\n<td>要返回的列或表达式</td>\n<td>是</td>\n</tr>\n<tr>\n<td>FROM</td>\n<td>从中检索数据的表</td>\n<td>仅在从表中选择数据时使用</td>\n</tr>\n<tr>\n<td>WHERE</td>\n<td>行级过滤</td>\n<td>否</td>\n</tr>\n<tr>\n<td>GROUP BY</td>\n<td>分组说明</td>\n<td>仅在按组计算聚集时使用</td>\n</tr>\n<tr>\n<td>HAVING</td>\n<td>组级过滤</td>\n<td>否</td>\n</tr>\n<tr>\n<td>ORDER BY</td>\n<td>输出排序顺序</td>\n<td>否</td>\n</tr>\n<tr>\n<td>LIMIT</td>\n<td>要检索的行数</td>\n<td>否</td>\n</tr>\n</tbody></table></div>\n\n        <h3 id=\"子查询\"   >\n          <a href=\"#子查询\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>子查询</h3>\n      <p><strong>查询(query)</strong>:任何SQL语句都是查询。但此术语一般值<code>SELECT</code>语句。</p>\n<p>SQL在版本4.1开始引入子查询的支持。<strong>子查询(subquery)</strong>即嵌套在其他查询中的查询。</p>\n<ol>\n<li>对于能嵌套的子查询数目没有限制，不过在实际使用中由于性能的限制，不能嵌套太多的子查询。</li>\n</ol>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT cust_id</span><br><span class=\"line\">FROM orders </span><br><span class=\"line\">WHERE order_num IN(SELECT order_num</span><br><span class=\"line\">                   FROM orderitems</span><br><span class=\"line\">                   WHERE prod_id &#x3D; &#39;TNT2&#39;);</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+</span><br><span class=\"line\">| cust_id |</span><br><span class=\"line\">+---------+</span><br><span class=\"line\">|   10001 |</span><br><span class=\"line\">|   10004 |</span><br><span class=\"line\">+---------+</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>作为计算字段使用子查询</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT cust_name,</span><br><span class=\"line\">\t   cust_state,</span><br><span class=\"line\">\t   (SELECT COUNT(*)</span><br><span class=\"line\">       \tFROM orders</span><br><span class=\"line\">        WHERE orders.cust_id &#x3D; customers.cust_id) AS orders</span><br><span class=\"line\">FROM customers</span><br><span class=\"line\">ORDER BY cust_name;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+----------------+------------+--------+</span><br><span class=\"line\">| cust_name      | cust_state | orders |</span><br><span class=\"line\">+----------------+------------+--------+</span><br><span class=\"line\">| Coyote Inc.    | MI         |      2 |</span><br><span class=\"line\">| E Fudd         | IL         |      1 |</span><br><span class=\"line\">| Mouse House    | OH         |      0 |</span><br><span class=\"line\">| Wascals        | IN         |      1 |</span><br><span class=\"line\">| Yosemite Place | AZ         |      1 |</span><br><span class=\"line\">+----------------+------------+--------+</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：在这个示例中，使用了<strong>完全限定列名</strong>。这里还涉及到了一个新的概念，<strong>相关子查询(correlated  subquery)</strong>，涉及外部查询的子查询。任何时候只要列名可能有多义性，就必须使用这种语法（表名和列名由一个句点分隔）。</p>\n\n        <h3 id=\"联结表\"   >\n          <a href=\"#联结表\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>联结表</h3>\n      <p>SQL最强大的功能之一就是能在数据检索查询的执行中<strong>联结(join)</strong>表。</p>\n<p><strong>联结</strong>：简单的说联结是一种机制，它不是物理实体，它用来在一条<code>SELECT</code>语句中关联表。联结在运行时关联表中            正确的行。</p>\n<ol>\n<li><strong>在一条<code>SELECT</code>语句中联结几个表时，相应的关系是在运行中构造的。</strong></li>\n<li><strong>在联结两个表时，你实际上做的是将第一个表中的每一行与第二个表中的每一行配对。<code>WHERE</code>子句作为过滤条件，它只包含那些匹配给定条件（这里是联结条件）的行。</strong></li>\n<li>由没有联结条件的表关系返回的结果为笛卡尔积。检索出的行的数目将是第一个表中的行数乘以第二个表中的行数。笛卡尔积的联结类型又称为叉联结。</li>\n</ol>\n<ul>\n<li>创建联结</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT vend_name,prod_name,prod_price</span><br><span class=\"line\">FROM vendors,products</span><br><span class=\"line\">WHERE vendors.vend_id &#x3D; products.vend_id</span><br><span class=\"line\">ORDER BY vend_name,prod_name;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-------------+----------------+------------+</span><br><span class=\"line\">| vend_name   | prod_name      | prod_price |</span><br><span class=\"line\">+-------------+----------------+------------+</span><br><span class=\"line\">| ACME        | Bird seed      |      10.00 |</span><br><span class=\"line\">| ACME        | Carrots        |       2.50 |</span><br><span class=\"line\">| ACME        | Detonator      |      13.00 |</span><br><span class=\"line\">| ACME        | Safe           |      50.00 |</span><br><span class=\"line\">| ACME        | Sling          |       4.49 |</span><br><span class=\"line\">| ACME        | TNT (1 stick)  |       2.50 |</span><br><span class=\"line\">| ACME        | TNT (5 sticks) |      10.00 |</span><br><span class=\"line\">| Anvils R Us | .5 ton anvil   |       5.99 |</span><br><span class=\"line\">| Anvils R Us | 1 ton anvil    |       9.99 |</span><br><span class=\"line\">| Anvils R Us | 2 ton anvil    |      14.99 |</span><br><span class=\"line\">| Jet Set     | JetPack 1000   |      35.00 |</span><br><span class=\"line\">| Jet Set     | JetPack 2000   |      55.00 |</span><br><span class=\"line\">| LT Supplies | Fuses          |       3.42 |</span><br><span class=\"line\">| LT Supplies | Oil can        |       8.99 |</span><br><span class=\"line\">+-------------+----------------+------------+</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：这里使用了<code>WHERE</code>子句来正确联结。</p>\n<ul>\n<li>联结多个表</li>\n</ul>\n<p>SQL对于一条<code>SELECT</code>语句中可以联结的表的数目没有限制。创建联结的基本规则也相同。</p>\n<ol>\n<li>出于性能的考虑，不应该联结太多的表，联结的表越多，性能下降的越厉害。</li>\n</ol>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT prod_name,vend_name,prod_price,quantity</span><br><span class=\"line\">FROM orderitems,products,vendors</span><br><span class=\"line\">WHERE products.vend_id &#x3D; vendors.vend_id</span><br><span class=\"line\">\t  AND orderitems.prod_id &#x3D; products.prod_id</span><br><span class=\"line\">\t  AND order_num &#x3D; 20005;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+----------------+-------------+------------+----------+</span><br><span class=\"line\">| prod_name      | vend_name   | prod_price | quantity |</span><br><span class=\"line\">+----------------+-------------+------------+----------+</span><br><span class=\"line\">| .5 ton anvil   | Anvils R Us |       5.99 |       10 |</span><br><span class=\"line\">| 1 ton anvil    | Anvils R Us |       9.99 |        3 |</span><br><span class=\"line\">| TNT (5 sticks) | ACME        |      10.00 |        5 |</span><br><span class=\"line\">| Bird seed      | ACME        |      10.00 |        1 |</span><br><span class=\"line\">+----------------+-------------+------------+----------+</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>表别名</li>\n</ul>\n<p>表别名只在查询执行中使用。与列别名不一样，表别名不返回到客户机。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT cust_name,cust_contact</span><br><span class=\"line\">FROM customers AS c,orders AS o,orderitems AS oi</span><br><span class=\"line\">WHERE c.cust_id &#x3D; o.cust_id</span><br><span class=\"line\">  AND oi.order_num &#x3D; o.order_num</span><br><span class=\"line\">  AND prod_id &#x3D; &#39;TNT2&#39;;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+----------------+--------------+</span><br><span class=\"line\">| cust_name      | cust_contact |</span><br><span class=\"line\">+----------------+--------------+</span><br><span class=\"line\">| Coyote Inc.    | Y Lee        |</span><br><span class=\"line\">| Yosemite Place | Y Sam        |</span><br><span class=\"line\">+----------------+--------------+</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>内部联结</li>\n</ul>\n<p>内部联结又称为等值联结(equijion),它基于两个表之间的相等测试。</p>\n<p>对于这种联结可以使用稍微不同的语法来明确指定联结的类型。</p>\n<ol>\n<li>尽管使用<code>WHERE</code>字句定义的联结的确比较简单，但是使用明确的联结语法能够确保不会忘记联结条件，有时候这样做也能影响性能。</li>\n</ol>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT vend_name,prod_name,prod_price</span><br><span class=\"line\">FROM vendors INNER JOIN products</span><br><span class=\"line\">ON vendors.vend_id &#x3D; products.vend_id;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-------------+----------------+------------+</span><br><span class=\"line\">| vend_name   | prod_name      | prod_price |</span><br><span class=\"line\">+-------------+----------------+------------+</span><br><span class=\"line\">| Anvils R Us | .5 ton anvil   |       5.99 |</span><br><span class=\"line\">| Anvils R Us | 1 ton anvil    |       9.99 |</span><br><span class=\"line\">| Anvils R Us | 2 ton anvil    |      14.99 |</span><br><span class=\"line\">| LT Supplies | Fuses          |       3.42 |</span><br><span class=\"line\">| LT Supplies | Oil can        |       8.99 |</span><br><span class=\"line\">| ACME        | Detonator      |      13.00 |</span><br><span class=\"line\">| ACME        | Bird seed      |      10.00 |</span><br><span class=\"line\">| ACME        | Carrots        |       2.50 |</span><br><span class=\"line\">| ACME        | Safe           |      50.00 |</span><br><span class=\"line\">| ACME        | Sling          |       4.49 |</span><br><span class=\"line\">| ACME        | TNT (1 stick)  |       2.50 |</span><br><span class=\"line\">| ACME        | TNT (5 sticks) |      10.00 |</span><br><span class=\"line\">| Jet Set     | JetPack 1000   |      35.00 |</span><br><span class=\"line\">| Jet Set     | JetPack 2000   |      55.00 |</span><br><span class=\"line\">+-------------+----------------+------------+</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>自联结</li>\n</ul>\n<p>表自己联结自己的联结类型称为自联结。</p>\n<p><strong>自联结通常作为外部语句用来替代从相同表中检索数据时使用的子查询语句。虽然最终结果是一样的，但是有时候处理联结远比处理子查询快得多</strong>。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT p1.prod_id, p1.prod_name</span><br><span class=\"line\">FROM products AS p1, products AS p2</span><br><span class=\"line\">WHERE p1.vend_id &#x3D; p2.vend_id</span><br><span class=\"line\">  AND p2.prod_id &#x3D; &#39;DTNTR&#39;;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+----------------+</span><br><span class=\"line\">| prod_id | prod_name      |</span><br><span class=\"line\">+---------+----------------+</span><br><span class=\"line\">| DTNTR   | Detonator      |</span><br><span class=\"line\">| FB      | Bird seed      |</span><br><span class=\"line\">| FC      | Carrots        |</span><br><span class=\"line\">| SAFE    | Safe           |</span><br><span class=\"line\">| SLING   | Sling          |</span><br><span class=\"line\">| TNT1    | TNT (1 stick)  |</span><br><span class=\"line\">| TNT2    | TNT (5 sticks) |</span><br><span class=\"line\">+---------+----------------+</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>自然联结</li>\n</ul>\n<p>标准联结（内部联结）返回所有数据，甚至相同的列多次出现。自然联结排除多次出现，使每个列只返回一次。</p>\n<p><strong>自然联结是这样一种联结，其中你只能选择那些唯一的列。这一般是通过对表使用通配符<code>SELECT *</code>，对所有其他表的列使用明确的子集来完成的。</strong></p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT c.*, o.order_num,o.order_date,</span><br><span class=\"line\">\t   oi.prod_id,oi.quantity,oi.item_price</span><br><span class=\"line\">FROM customers AS c, orders AS o, orderitems AS oi</span><br><span class=\"line\">WHERE c.cust_id &#x3D; o.cust_id</span><br><span class=\"line\">  AND oi.order_num &#x3D; o.order_num</span><br><span class=\"line\">  AND prod_id &#x3D; &#39;FB&#39;;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+-------------+----------------+-----------+------------+----------+--------------+--------------+-----------------+-----------+---------------------+---------+----------+------------+</span><br><span class=\"line\">| cust_id | cust_name   | cust_address   | cust_city | cust_state | cust_zip | cust_country | cust_contact | cust_email      | order_num | order_date          | prod_id | quantity | item_price |</span><br><span class=\"line\">+---------+-------------+----------------+-----------+------------+----------+--------------+--------------+-----------------+-----------+---------------------+---------+----------+------------+</span><br><span class=\"line\">|   10001 | Coyote Inc. | 200 Maple Lane | Detroit   | MI         | 44444    | USA          | Y Lee        | ylee@coyote.com |     20005 | 2005-09-01 00:00:00 | FB      |        1 |      10.00 |</span><br><span class=\"line\">|   10001 | Coyote Inc. | 200 Maple Lane | Detroit   | MI         | 44444    | USA          | Y Lee        | ylee@coyote.com |     20009 | 2005-10-08 00:00:00 | FB      |        1 |      10.00 |</span><br><span class=\"line\">+---------+-------------+----------------+-----------+------------+----------+--------------+--------------+-----------------+-----------+---------------------+---------+----------+--</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：在这个例子中，通配符只对第一个表使用。所有其他列明确列出，所以没有重复的列被检索出来。</p>\n<ul>\n<li>外部联结</li>\n</ul>\n<p>联结包含了那些在相关表中没有关联的行。这种类型的联结称为<strong>外部联结</strong>。</p>\n<p>在使用<code>OUTER JOIN</code>语法时，必须使用<code>RIGHT</code>或<code>LEFT</code>关键字指定包括其所有行的表(<code>RIGHT</code>指出的是<code>OUTER JOIN</code>右边的表，而<code>LEFT</code>指出的是<code>OUTER JOIN</code>左边的表)。这也引出了两种外部联结形式：<code>左外部联结</code>和<code>右外部联结</code>。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT customers.cust_id,orders.order_num</span><br><span class=\"line\">FROM customers LEFT OUTER JOIN orders</span><br><span class=\"line\">ON customers.cust_id &#x3D; orders.cust_id;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+-----------+</span><br><span class=\"line\">| cust_id | order_num |</span><br><span class=\"line\">+---------+-----------+</span><br><span class=\"line\">|   10001 |     20005 |</span><br><span class=\"line\">|   10001 |     20009 |</span><br><span class=\"line\">|   10002 |      NULL |</span><br><span class=\"line\">|   10003 |     20006 |</span><br><span class=\"line\">|   10004 |     20007 |</span><br><span class=\"line\">|   10005 |     20008 |</span><br><span class=\"line\">+---------+-----------+</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>使用带聚集函数的联结</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT customers.cust_name,customers.cust_id,COUNT(orders.order_num) AS num_ord</span><br><span class=\"line\">FROM customers INNER JOIN orders</span><br><span class=\"line\">ON customers.cust_id &#x3D; orders.cust_id</span><br><span class=\"line\">GROUP BY customers.cust_id;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+----------------+---------+---------+</span><br><span class=\"line\">| cust_name      | cust_id | num_ord |</span><br><span class=\"line\">+----------------+---------+---------+</span><br><span class=\"line\">| Coyote Inc.    |   10001 |       2 |</span><br><span class=\"line\">| Wascals        |   10003 |       1 |</span><br><span class=\"line\">| Yosemite Place |   10004 |       1 |</span><br><span class=\"line\">| E Fudd         |   10005 |       1 |</span><br><span class=\"line\">+----------------+---------+---------+</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>使用联结和联结条件</li>\n</ul>\n<p>以下总结一下关于联结及其使用的某些要点。</p>\n<ol>\n<li>注意所使用的联结类型。一般我们使用内部联结，但使用外部联结也是有效的。</li>\n<li>保证使用正确的联结条件，否则将返回不正确的数据。</li>\n<li>应该总是提供联结条件，否则将得到笛卡尔积。</li>\n<li>在一个联结中可以包含多个表，甚至对于每个联结可以采用不同的联结类型。虽然这也做是合法的，一般也很有用，但应该在一起测试它们前，分别测试每个联结。这将使故障的排除更为简便。</li>\n</ol>\n\n        <h3 id=\"组合查询\"   >\n          <a href=\"#组合查询\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>组合查询</h3>\n      <p>多数SQL查询都只包含从一个或多个表中返回数据的单条<code>SELECT</code>语句。MySQL也允许执行多个查询（多条<code>SELECT</code>语句），并将结果作为单个查询结果集返回。这些组合查询通常称为<strong>并</strong>或<strong>复合查询</strong>。</p>\n<p>有两种基本情况，其中需要使用组合查询：</p>\n<ol>\n<li>在单个查询中从不同的表返回类似结构的数据；</li>\n<li>对单个表执行多个查询，按单个查询返回数据。</li>\n</ol>\n<ul>\n<li>创建组合查询</li>\n</ul>\n<p>利用<code>UNION</code>，可给出多条<code>SELECT</code>语句，将它们的结果组合成单个结果集。</p>\n<p><code>UNION</code>从结果集中自动去除了重复的行。如果想返回所有匹配的行，可使用<code>UNION ALL</code>而不是<code>UNION</code>。这里值得注意的是多个<code>WHERE</code>子句一定会自动去除重复的行，因此如果确实需要每个条件的匹配行全部出现（包括重复行），则必须使用<code>UNION ALL</code>而不是<code>WHERE</code>。</p>\n<p><strong><code>UNION</code>规则</strong>：</p>\n<ol>\n<li>UNION必须由两条或两条以上的<code>SELECT</code>语句组成，语句之间用关键字<code>UNION</code>分隔(因此，如果组合4条<code>SELECT</code>语句，将要使用<code>UNION</code>关键字)。</li>\n<li><strong><code>UNION</code>中的每个查询必须包含相同的列、表达式或聚集函数（不过每个列不需要以相同的次序给出）</strong>。</li>\n<li>列数据类型必须兼容：类型不必完全相同，但必须时DBMS可以隐含地转换的类型。</li>\n</ol>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT vend_id,prod_id,prod_price</span><br><span class=\"line\">FROM products </span><br><span class=\"line\">WHERE prod_price &lt;&#x3D; 5</span><br><span class=\"line\">UNION</span><br><span class=\"line\">SELECT vend_id,prod_id,prod_price</span><br><span class=\"line\">FROM products</span><br><span class=\"line\">WHERE vend_id IN (1001,1002);</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+---------+------------+</span><br><span class=\"line\">| vend_id | prod_id | prod_price |</span><br><span class=\"line\">+---------+---------+------------+</span><br><span class=\"line\">|    1003 | FC      |       2.50 |</span><br><span class=\"line\">|    1002 | FU1     |       3.42 |</span><br><span class=\"line\">|    1003 | SLING   |       4.49 |</span><br><span class=\"line\">|    1003 | TNT1    |       2.50 |</span><br><span class=\"line\">|    1001 | ANV01   |       5.99 |</span><br><span class=\"line\">|    1001 | ANV02   |       9.99 |</span><br><span class=\"line\">|    1001 | ANV03   |      14.99 |</span><br><span class=\"line\">|    1002 | OL1     |       8.99 |</span><br><span class=\"line\">+---------+---------+------------+</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>对组合查询结果进行排序</li>\n</ul>\n<p>在使用<code>UNION</code>组合查询时，只能使用一条<code>ORDER BY</code>子句，它必须出现在最后一条<code>SELECT</code>语句之后。对于结果集，不存在用一种方式排序一部分，而使用另一种方式排序另一部分的情况，因此不允许使用多条<code>ORDER BY</code>子句。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT vend_id,prod_id,prod_price</span><br><span class=\"line\">FROM products</span><br><span class=\"line\">WHERE prod_price &lt;&#x3D; 5</span><br><span class=\"line\">UNION </span><br><span class=\"line\">SELECT vend_id,prod_id,prod_price</span><br><span class=\"line\">FROM products</span><br><span class=\"line\">WHERE vend_id IN (1001,1002)</span><br><span class=\"line\">ORDER BY vend_id,prod_price;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------+---------+------------+</span><br><span class=\"line\">| vend_id | prod_id | prod_price |</span><br><span class=\"line\">+---------+---------+------------+</span><br><span class=\"line\">|    1001 | ANV01   |       5.99 |</span><br><span class=\"line\">|    1001 | ANV02   |       9.99 |</span><br><span class=\"line\">|    1001 | ANV03   |      14.99 |</span><br><span class=\"line\">|    1002 | FU1     |       3.42 |</span><br><span class=\"line\">|    1002 | OL1     |       8.99 |</span><br><span class=\"line\">|    1003 | FC      |       2.50 |</span><br><span class=\"line\">|    1003 | TNT1    |       2.50 |</span><br><span class=\"line\">|    1003 | SLING   |       4.49 |</span><br><span class=\"line\">+---------+---------+------------+</span><br></pre></td></tr></table></div></figure>\n\n\n\n\n        <h3 id=\"全文本搜索\"   >\n          <a href=\"#全文本搜索\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>全文本搜索</h3>\n      <p>虽然<strong>通配符</strong>及<strong>正则表达式</strong>它们作为搜索机制非常有用，但仍存在几个重要的限制：</p>\n<ol>\n<li>性能—-通配符和正则表达式匹配通常要求MySQL尝试匹配表中所有行（而且这些搜索极少使用表索引）。因此，由于被搜索行数不断增加，这些搜索可能非常耗时。</li>\n<li>明确控制—-使用通配符和正则表达式匹配，很难（而且并不总能）明确地控制匹配什么和不匹配什么。例如，指定一个词必须匹配，一个词必须不匹配，而一个词仅在第一个词确实匹配的情况下才可以匹配或者才可以不匹配。</li>\n<li>智能化的结果—-虽然基于通配符和正则表达式的搜索提供了非常灵活的搜索，但它们都不能提供一种智能化的选择结果的方法。</li>\n</ol>\n<p>所有上述这些限制以及更多的限制都可以用<strong>全文本搜索</strong>来解决。在使用全文本搜索时，MySQL不需要分别查看每个行，不需要分别分析和处理每个词。MySQL创建指定列中各词的一个索引，搜索可以针对这些词进行。这样，MySQL可以快速有效地绝对哪些词匹配（哪些行包含它们），哪些词不匹配，它们匹配的频率，等等。</p>\n<ol>\n<li><p><strong>为了进行全文本搜索，必须索引被搜索的列，而且要随着数据的更改不断重新索引</strong>。在对表列进行适当设计后，MySQL会自动进行所有的索引和重新索引。但值得注意的是，在导入数据时应该先不启用<code>FULLTEXT</code>索引，应该首先导入所有数据，然后再修改表，定义<code>FULLTEXT</code>建立索引。这样有助于更快的导入数据及更快的更新索引（索引总数据的时间小于每行分时分别索引）。</p>\n</li>\n<li><p>除非使用<code>BINARY</code>方式，否则全文本搜索不区分大小写。</p>\n</li>\n<li><p><strong>全文本搜索会返回以文本匹配的良好程度排序的数据</strong>。</p>\n</li>\n</ol>\n<ul>\n<li>启用全文本搜索支持</li>\n</ul>\n<p>一般在创建表时启用全文本搜索。<code>CREATE TABLE</code>语句接受<code>FULLTEXT</code>子句，它给出别索引列的一个逗号分隔的列表。</p>\n<p>在定义后，MySQL自动维护该索引，在增加、更新或删除行时，索引随之自动更新。</p>\n<p><strong><code>FULLTEXT</code>子句可以指定多个列</strong>。</p>\n<p><strong>可以在创建表时指定<code>FULLTEXT</code>，也可以在稍后指定</strong>。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE productnotes</span><br><span class=\"line\">(</span><br><span class=\"line\">    note_id    int        NOT NULL    AUTO_INCREMENT</span><br><span class=\"line\">    prod_id    char(10)   NOT NULL,</span><br><span class=\"line\">    note_date  datetime   NOT NULL,</span><br><span class=\"line\">    note_text  text       NULL,</span><br><span class=\"line\">    PRIMARY KEY(note_id),</span><br><span class=\"line\">    FULLTEXT(note_text)</span><br><span class=\"line\">)ENGINE&#x3D;MyISAM;</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>进行全文本搜索</li>\n</ul>\n<p>在索引之后，使用两个函数<code>Match()</code>和<code>Against()</code>执行全文本搜索，其中<code>Match()</code>指定被搜索的列，<code>Against()</code>指定要使用的搜索表达式。</p>\n<p><strong>传递给<code>Match()</code>的值必须与<code>FULLTEXT()</code>定义中的相同。如果指定多个列，则必须列出它们（而且次序正确）。</strong></p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT note_text</span><br><span class=\"line\">FROM productnotes</span><br><span class=\"line\">WHERE Match(note_text) Against(&#39;rabbit&#39;);</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+----------------------------------------------------------------------------------------------------------------------+</span><br><span class=\"line\">| note_text                                                                                                            |</span><br><span class=\"line\">+----------------------------------------------------------------------------------------------------------------------+</span><br><span class=\"line\">| Customer complaint: rabbit has been able to detect trap, food apparently less effective now.                         |</span><br><span class=\"line\">| Quantity varies, sold by the sack load.</span><br><span class=\"line\">All guaranteed to be bright and orange, and suitable for use as rabbit bait. |</span><br><span class=\"line\">+----------------------------------------------------------------------------------------------------------------------+</span><br></pre></td></tr></table></div></figure>\n\n\n\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT note_text,</span><br><span class=\"line\">\t   Match(note_text) Against(&#39;rabbit&#39;) AS rank</span><br><span class=\"line\">FROM productnotes;</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：下面的例子和其上的例子最明显的区别时，前者将返回所有行，因为没有<code>WHERE</code>字句进行过滤，同时将全文本匹配结果作为新行<code>rank</code>进行展示。</p>\n<ul>\n<li>使用查询扩展</li>\n</ul>\n<p>查询扩展使用<code>WITH QUERY EXPANSION</code>子句完成。</p>\n<p>查询扩展用来设法放宽所返回的全文本搜索结果的范围。使用查询扩展时，MySQL对数据和索引进行两遍扫描来完成搜索：</p>\n<ol>\n<li>首先，进行一个基本的全文本搜索，找出与搜索条件匹配的所有行；</li>\n<li>其次，MySQL检查这些匹配行并选择所有有用的词(根据某种规则)；</li>\n<li>再其次，MySQL再次进行全文本搜索，这次不仅使用原来的条件，而且还使用所有有用的词。</li>\n</ol>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT note_text</span><br><span class=\"line\">FROM productnotes</span><br><span class=\"line\">WHERE Match(note_text) Against(&#39;anvils&#39; WITH QUERY EXPANSION);</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>布尔文本搜索</li>\n</ul>\n<p>MySQL支持全文本搜索的另外一种形式，称为<strong>布尔方式（boolean mode）</strong>。其可提供关于如下内容的细节：</p>\n<ol>\n<li>要匹配的词；</li>\n<li>要排斥的词（如果某行包含这个词，则不返回该行，即使它包含其他指定的词也是如此）；</li>\n<li>排列提示（指定某些词比其他词更加重要，更重要的词等级变高）；</li>\n<li>表达式分组；</li>\n<li>另外一些内容。</li>\n</ol>\n<p><strong>布尔方式不同于上述使用的全文本搜索语法，它即使在没有定义<code>FULLTEXT</code>索引的情况下，也可以使用。但这是一种非常缓慢的操作</strong>。</p>\n<p>在布尔方式中，不按等级值降序排序返回的行。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT note_text FROM productnotes </span><br><span class=\"line\">WHERE Match(note_text) Against(&#39;heavy&#39; IN BOOLEAN MODE);</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT note_text FORM productnotes</span><br><span class=\"line\">WHERE Match(note_text) Against(&#39;heavy -rope*&#39; IN BOOLEAN MODE);</span><br></pre></td></tr></table></div></figure>\n\n<p>全文本布尔操作符表：</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>布尔操作符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+</td>\n<td>包含，词必须存在</td>\n</tr>\n<tr>\n<td>-</td>\n<td>排除，词必须不存在</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>包含，而且增加等级值</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>包含，而且减少等级值</td>\n</tr>\n<tr>\n<td>()</td>\n<td>把词组成子表达式(允许这些子表达式作为一个组被包含、排除、排列等)</td>\n</tr>\n<tr>\n<td>~</td>\n<td>取消一个词的排序值</td>\n</tr>\n<tr>\n<td>*</td>\n<td>词尾的通配符</td>\n</tr>\n<tr>\n<td>“ “</td>\n<td>定义一个短语(与单个词的列表不一样，它匹配整个短语以便包含或排除这个短语)</td>\n</tr>\n</tbody></table></div>\n<p>示例：</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT note_text</span><br><span class=\"line\">FROM productnotes</span><br><span class=\"line\">WHERE Match(note_text) Against(&#39;+rabbit +bait&#39; IN BOOLEAN MODE);</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：搜索匹配包含词rabbit和bait的行。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT note_text</span><br><span class=\"line\">FROM productnotes</span><br><span class=\"line\">WHERE Match(note_text) Against(&#39;rabbit bait&#39; IN BOOLEAN MODE);</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：搜索匹配包含rabbit和bait中的至少一个词的行。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT note_text</span><br><span class=\"line\">FROM productnotes</span><br><span class=\"line\">WHERE Match(note_text) Against(&#39;&quot;rabbit bait&quot;&#39; IN BOOLEAN MODE);</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：搜索匹配短语rabbit bait而不是匹配两个词rabbit和bait。</p>\n<ul>\n<li>全文本搜索的重要说明</li>\n</ul>\n<ol>\n<li>在索引全文本数据时，短词被忽略且从索引中排除。短词定义为哪些具有3个或3个以下字符的词（可以根据需要更改）。</li>\n<li>MySQL带有一个内建的非用词(stopword)列表，这些词在索引全文本数据时将被忽略。如果需要，可以覆盖这个列表。</li>\n<li>许多词出现的频率很高，搜索它们没有用处(返回太多的结果)。因此，MySQL规定了一条50%规则，如果一个词出现在50%以上的行中，则将它作为一个非用词忽略。**50%规则不用于<code>IN BOOLEAN MODE</code>。</li>\n<li>如果表中的行数少于3行，则全文本搜索不返回结果(因此每个词或者不出现，或者出现在50%的行中)。</li>\n<li>忽略词中的的单引号。例如：don’t 索引为 dont。</li>\n<li>不具有词分隔符(包括日语和汉语)的语言不能恰当地返回全文本搜索结果。</li>\n<li>仅在MyISAM数据库引擎中支持全文本搜索。</li>\n</ol>\n\n        <h3 id=\"插入数据\"   >\n          <a href=\"#插入数据\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>插入数据</h3>\n      <p>使用<code>INSERT</code>语句来插入或添加行到数据库表，插入可以用几种方式使用：</p>\n<ol>\n<li>插入完整的行</li>\n<li>插入行的一部分</li>\n<li>插入多行</li>\n<li>插入某些查询结果</li>\n</ol>\n<p><strong>重要注意事项</strong>：</p>\n<ol>\n<li><p>如果某个列没有值，应该使用<code>NULL</code>值(假定表允许对该列指定空值)。</p>\n</li>\n<li><p>对于自动增量，可以省略其值。</p>\n</li>\n<li><p>如果表的定义允许，则可以在<code>INSERT</code>操作中省略某些列。被省略的列应该满足以下某个条件。</p>\n<ul>\n<li>该列的定义为允许<code>NULL</code>值（无值或空值）。</li>\n<li>在表定义中给出默认值。这表示如果不给出值，将使用默认值。</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>插入完整的行</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO customers</span><br><span class=\"line\">VALUES (NULL,</span><br><span class=\"line\">        &#39;Ppe E.LaPew&#39;,</span><br><span class=\"line\">        &#39;100 Main Street&#39;,</span><br><span class=\"line\">        &#39;Los Angeles&#39;,</span><br><span class=\"line\">        &#39;CA&#39;,</span><br><span class=\"line\">        &#39;90046&#39;,</span><br><span class=\"line\">        &#39;USA&#39;,</span><br><span class=\"line\">        NULL,</span><br><span class=\"line\">        NULL,</span><br><span class=\"line\">        NULL);</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：这种语法没有指定列名，各个列必须以它们在表定义中出现的次序填充。这是一种不安全的语法，因为它极              度依赖于表中列的定义次序。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO customers(cust_name,</span><br><span class=\"line\">                      cust_address,</span><br><span class=\"line\">                      cust_city,</span><br><span class=\"line\">                      cust_state,</span><br><span class=\"line\">                      cust_zip,</span><br><span class=\"line\">                      cust_country,</span><br><span class=\"line\">                      cust_contact,</span><br><span class=\"line\">                      cust_email)</span><br><span class=\"line\">        VALUES(&#39;Ppe E.LaPew&#39;,</span><br><span class=\"line\">        \t   &#39;100 Main Street&#39;,</span><br><span class=\"line\">        \t   &#39;Los Angeles&#39;,</span><br><span class=\"line\">        \t   &#39;CA&#39;,</span><br><span class=\"line\">        \t   &#39;90046&#39;,</span><br><span class=\"line\">        \t   &#39;USA&#39;,</span><br><span class=\"line\">        \t   NULL,</span><br><span class=\"line\">               NULL);</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：这种语法与上述的语法显著的区别是明确的指出的列名。在插入行时，MySQL将用VALUES列表中对应的值填入列表中的对应项。因为提供了列名，VALUES必须按其指定的次序匹配指定列名，但不一定需要按各个列在实际表中的次序。这种方式的明显优点是，即使表的结构改变，此语句仍然可以正确工作。</p>\n<ul>\n<li>插入多个行</li>\n</ul>\n<p>可以使用多条<code>INSERT</code>语句。或者，只要每条<code>INSERT</code>语句中的列名和次序相同，也可以使用一条<code>INSERT</code>语句，组合提交多个行。</p>\n<p><strong>MySQL用条<code>INSERT</code>语句处理多个插入比使用多条<code>INSERT</code>语句快</strong>。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO customers(cust_name,</span><br><span class=\"line\">                      cust_address,</span><br><span class=\"line\">                      cust_city,</span><br><span class=\"line\">                      cust_state,</span><br><span class=\"line\">                      cust_zip,</span><br><span class=\"line\">                      cust_country)</span><br><span class=\"line\">VALUES(</span><br><span class=\"line\">    \t&#39;Ppe E.LaPew&#39;,</span><br><span class=\"line\">        &#39;100 Main Street&#39;,</span><br><span class=\"line\">        &#39;Los Angeles&#39;,</span><br><span class=\"line\">    \t&#39;CA&#39;,</span><br><span class=\"line\">        &#39;90046&#39;,</span><br><span class=\"line\">        &#39;USA&#39;</span><br><span class=\"line\">\t\t),</span><br><span class=\"line\">\t (</span><br><span class=\"line\">        &#39;M .Martian&#39;,</span><br><span class=\"line\">        &#39;42 Galaxy Way&#39;,</span><br><span class=\"line\">        &#39;New York&#39;,</span><br><span class=\"line\">        &#39;NY&#39;,</span><br><span class=\"line\">        &#39;11213&#39;,</span><br><span class=\"line\">        &#39;USA&#39;</span><br><span class=\"line\">     );</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>插入检索出的数据</li>\n</ul>\n<p>可以利用<code>INSERT</code>将一条<code>SELECT</code>语句的结果插入表中。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO customers(cust_id,</span><br><span class=\"line\">                     cust_contact,</span><br><span class=\"line\">                     cust_email,</span><br><span class=\"line\">                     cust_name,</span><br><span class=\"line\">                     cust_address,</span><br><span class=\"line\">                     cust_city,</span><br><span class=\"line\">                     cust_state,</span><br><span class=\"line\">                     cust_zip,</span><br><span class=\"line\">                     cust_country)</span><br><span class=\"line\">        SELECT cust_id,</span><br><span class=\"line\">        \t   cust_contact,</span><br><span class=\"line\">               cust_email,</span><br><span class=\"line\">               cust_name,</span><br><span class=\"line\">               cust_address,</span><br><span class=\"line\">               cust_city,</span><br><span class=\"line\">               cust_state,</span><br><span class=\"line\">               cust_zip,</span><br><span class=\"line\">               cust_country</span><br><span class=\"line\">         FROM custnew;</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：上述例子使用<code>INSERT SELECT</code>从custnew表中将所有数据导入customers。</p>\n<ul>\n<li>优先级指定</li>\n</ul>\n<p>如果数据检索是最重要的，可以通过在<code>INSERT</code>和<code>INTO</code>之间添加关键字<code>LOW_PRIORITY</code>，指示MySQL降低<code>INSERT</code>语句的优先级。如：<code>INSERT LOW_PRIORITY INTO</code>。</p>\n\n        <h3 id=\"更新和删除数据\"   >\n          <a href=\"#更新和删除数据\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>更新和删除数据</h3>\n      <p>为了更新(修改)表中的数据，可以使用<code>UPDATE</code>语句。可采用两种方式使用<code>UPDATE</code>：</p>\n<ol>\n<li><p>更新表中的特定行</p>\n</li>\n<li><p>更新表中所有行</p>\n</li>\n</ol>\n<ul>\n<li>更新数据</li>\n</ul>\n<p><code>UPDATE</code>语句非常容易使用，基本的<code>UPDATE</code>语句由3部分组成，分别是：</p>\n<ol>\n<li>要更新的表；</li>\n<li>列名和它们的新值；</li>\n<li>确定要更新行的过滤条件。</li>\n</ol>\n<p>**为了删除某个列的值，可设置它为<code>NULL</code>（假如表定义允许<code>NULL</code>值）。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE customers </span><br><span class=\"line\">SET cust_email &#x3D; &#39;elmer@fudd.com&#39;</span><br><span class=\"line\">WHERE cust_id &#x3D; 10005;</span><br><span class=\"line\"></span><br><span class=\"line\">UPDATE customers</span><br><span class=\"line\">SET cust_name &#x3D; &#39;The Fudds&#39;,</span><br><span class=\"line\">\tcust_email &#x3D; &#39;elmer@fudd.com&#39;</span><br><span class=\"line\">WHERE cust_id &#x3D; 10005;</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：<code>UPDATE</code>语句总是以要更新的表的名字开始。<code>SET</code>命令用来将新值赋给被更新的列。</p>\n<ul>\n<li>删除数据</li>\n</ul>\n<p>为了从一个表中删除(去掉)数据，使用<code>DELETE</code>语句。有两种方式使用<code>DELETE</code>:</p>\n<ol>\n<li>从表中删除特定的行；</li>\n<li>从表中删除所有行。</li>\n</ol>\n<p><strong>在使用<code>DELETE</code>语句时一定要小心，MySQL没有撤销操作。一定要注意使用<code>WHERE</code>子句</strong>。</p>\n<p><strong><code>DELETE</code>不需要列名或者通配符。它删除整行而不是删除列。为了删除指定的列，应该使用<code>UPDATE</code>语句</strong>。</p>\n<ul>\n<li>删除所有行</li>\n</ul>\n<p>如果想从表中删除所有行，不要使用<code>DELETE</code>。可使用 <code>TRUNCATE TABLE</code>语句，它完成相同的工作，但速度更快。因为它时通过删除原来的表并重新创建一个新表来实现的，而<code>DELETE</code>是逐行删除表中的数据。</p>\n<ul>\n<li>更新和删除的指导原则</li>\n</ul>\n<ol>\n<li>除非确实打算更新和删除每一行，否则绝对不要使用不带<code>WHERE</code>子句的<code>UPDATE</code>或<code>DELETE</code>语句。</li>\n<li>保证每个表都有主键，尽可能像<code>WHERE</code>子句那样使用它。</li>\n<li>在对<code>UPDATE</code>或<code>DELETE</code>语句使用<code>WHERE</code>子句前，应该先用<code>SELECT</code>语句进行测试，以保证它的过滤时正确的。</li>\n<li>使用强制实施引用完整性的数据库，这样MySQL将不允许删除具有与其他表相关联的数据的行。</li>\n</ol>\n\n        <h3 id=\"创建和操纵表\"   >\n          <a href=\"#创建和操纵表\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>创建和操纵表</h3>\n      <ul>\n<li>创建表</li>\n</ul>\n<p>表的创建使用<code>CREATE TABLE</code>语句完成。为成功创建表，必须给出下列信息：</p>\n<ol>\n<li>新表的名字，在关键字<code>CREATE TABLE</code>之后给出；</li>\n<li>表列的名字和定义，用逗号分隔。</li>\n</ol>\n<p>注意事项：</p>\n<ol>\n<li>在创建新表时，指定的表名必须不存在。为了防止意外覆盖已有的表，SQL要求首先手工删除该表，然后再重建。<strong>如果仅想在一个表不存在时创建它，应该在表名后面给出<code>IF NOT EXISTS</code></strong>。这样做不检查已有表的模式是否与你打算创建的表模式相匹配，它只检查表名是否存在。</li>\n</ol>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE customers </span><br><span class=\"line\">(</span><br><span class=\"line\">\tcust_id\t\t\tint  \t\tNOT NULL  AUTO_INCREMENT,</span><br><span class=\"line\">    cust_name\t\tchar(50)\tNOT NULL,</span><br><span class=\"line\">    cust_address\tchar(50)\tNULL,</span><br><span class=\"line\">    cust_city\t\tchar(50)\tNULL,</span><br><span class=\"line\">    cust_state\t\tchar(5)\t\tNULL,</span><br><span class=\"line\">    cust_zip\t\tchar(10)\tNULL,</span><br><span class=\"line\">    cust_country\tchar(50)\tNULL,</span><br><span class=\"line\">    cust_contact\tchar(50)\tNULL,</span><br><span class=\"line\">    cust_email\t\tchar(255)\tNULL,</span><br><span class=\"line\">    PRIMARY KEY (cust_id)</span><br><span class=\"line\">)ENGINE&#x3D;InnoDB;</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>说明：</strong></p>\n<ol>\n<li><p>实际的表定义(所有列)括在圆括号中，个各列之间用逗号分隔。</p>\n</li>\n<li><p>这个表由9列组成，每列的定义以列名(它在表中必须是唯一的)开始，后跟列的数据类型。</p>\n</li>\n<li><p>表的主键可以在创建表时用关键字<code>PRIMARY KEY</code>指定。</p>\n</li>\n<li><p><code>NULL</code>值就是没有值或者缺值。允许<code>NULL</code>值的列也允许在插入行时不给出该列的值，反之不允许<code>NULL</code>值的行在插入或更新时，该列必须有值。</p>\n</li>\n<li><p><code>AUTO_INCREMENT</code>告诉MySQL，本列为<strong>自动增量</strong>，每增加一行时自动增加。每个表只允许一个<code>AUTO_INCREMENT</code>列，而且它必须被索引(如，通过使它成为主键)。</p>\n<p>自动增量也可以通过在<code>INSERT</code>语句中使用其他值覆盖，这样后续的增量将使用该手工插入的值。</p>\n<p><strong>获取</strong>最后一个增量值可以使用<code>last_insert_id()</code>来获取，如：<code>SELECT last_insert_id();</code>。</p>\n</li>\n</ol>\n<ul>\n<li>多个列组成主键</li>\n</ul>\n<p>为创建多个列组成的主键，应该以逗号分隔的列表给出各列名。</p>\n<p><strong>主键可以在创建表时定义，也可以在创建表后定义</strong>。</p>\n<p><strong>主键只能使用不允许<code>NULL</code>值的列</strong>。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE orderitems</span><br><span class=\"line\">(</span><br><span class=\"line\">order_num\tint \t\tNOT NULL,</span><br><span class=\"line\">order_item\tint\t\t\tNOT NULL,</span><br><span class=\"line\">prod_id\t\tchar(10)\tNOT NULL,</span><br><span class=\"line\">quantity\tint\t\t\tNOT NULL,</span><br><span class=\"line\">item_price  decimal(8,2)NOT NULL,</span><br><span class=\"line\">PRIMARY KEY (order_num,order_item)</span><br><span class=\"line\">)ENGINE&#x3D;InnoDB;</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>指定默认值</li>\n</ul>\n<p>如果插入行时没有给出值，MySQL允许指定此时使用的默认值。在创建表时用<code>DEFAULT</code>关键字指定。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE orderitems</span><br><span class=\"line\">(</span><br><span class=\"line\">order_num\tint \t\tNOT NULL,</span><br><span class=\"line\">order_item\tint\t\t\tNOT NULL,</span><br><span class=\"line\">prod_id\t\tchar(10)\tNOT NULL,</span><br><span class=\"line\">quantity\tint\t\t\tNOT NULL\tDEFAULT 1,</span><br><span class=\"line\">item_price  decimal(8,2)NOT NULL,</span><br><span class=\"line\">PRIMARY KEY (order_num,order_item)</span><br><span class=\"line\">)ENGINE&#x3D;InnoDB;</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>引擎类型</li>\n</ul>\n<p>MySQL与其他DBMS不一样，它具有多种引擎。可以使用<code>ENGINE=</code>语句进行指定。</p>\n<ol>\n<li><p><strong>引擎类型可以混用</strong>。每个表都可以有自己的引擎类型。</p>\n</li>\n<li><p><strong>外键不能跨引擎</strong>。外键用于强制实施引用完整性，因此不能跨引擎。即使用一个引擎的表不能引用具有使用不同引擎的表的外键。</p>\n</li>\n<li></li>\n</ol>\n<figure class=\"highlight c\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">几个重要的引擎：</span></span><br><span class=\"line\"><span class=\"comment\">1. InnoDB 是一个可靠的事务处理引擎，它不支持全文本搜索。</span></span><br><span class=\"line\"><span class=\"comment\">2. MEMORY 的功能等同于MyISAM，但它的数据存储在内存(不是磁盘)中，因此速度很快，特别适合临时表。</span></span><br><span class=\"line\"><span class=\"comment\">3. MyISAM 时一个性能极高的引擎，它支持全文本搜索，但不支持事务处理。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>更新表定义</li>\n</ul>\n<p>为更新表定义，可使用<code>ALTER TABLE</code>语句。但在理想状态下，当表中存储数据以后，该表就不应该再被更新，因此表的设计过程需要花费大量的时间来考虑，十分重要。</p>\n<p><strong>在进行改动前，最好做一个完整的备份。因为数据库表的更改不可撤销</strong>。</p>\n<p>为使用<code>ALTER TABLE</code>更新表结构，必须给出下面信息：</p>\n<ol>\n<li>在<code>ALTER TABLE</code>之后给出要更改的表名(该表必须存在，否则将出错)；</li>\n<li>所做更改的列表。</li>\n</ol>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#给表添加一个列</span><br><span class=\"line\">ALTER TABLE 表名</span><br><span class=\"line\">ADD 列定义;</span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE vendors</span><br><span class=\"line\">ADD vend_phone CHAR(20);</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：必须明确给出列的数据类型。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#删除刚刚添加的列</span><br><span class=\"line\">ALTER TABLE vendors</span><br><span class=\"line\">DROP COLUMN vend_phone;</span><br></pre></td></tr></table></div></figure>\n\n<p><strong><code>ALTER TABLE</code>的一个常见用途是定义外键</strong>。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ALTER TABLE orderitems</span><br><span class=\"line\">ADD CONSTRAINT fk_orderitems_orders</span><br><span class=\"line\">FOREIGN KEY (order_Num) REFERENCES orders(order_num);</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>复杂的表结构更改</li>\n</ul>\n<p>复杂的表结构更改一般需要手动删除过程，它涉及以下步骤：</p>\n<ol>\n<li>用新的列布局创建一个新表；</li>\n<li>使用<code>INSERT SELECT</code>语句，从旧表复制数据到新表。如果有必要，可使用转换函数和计算字段；</li>\n<li>检验包含所需数据的新表；</li>\n<li>重命名旧表(如果确定可以删除它)；</li>\n<li>用旧表原来的名字重命名新表；</li>\n<li>根据需要，重新创建触发器、存储过程、索引和外键。</li>\n</ol>\n<ul>\n<li>删除表</li>\n</ul>\n<p>删除表没有确认，也不能撤销。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP TABLE customers2;</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>重命名表</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RENAME TABLE customers TO customers;</span><br><span class=\"line\"></span><br><span class=\"line\">RENAME TABLE backup_customers TO customers,</span><br><span class=\"line\">\t\t\t backup_vendors TO vendors,</span><br><span class=\"line\">\t\t\t backup_products TO products;</span><br></pre></td></tr></table></div></figure>\n\n\n\n\n        <h3 id=\"视图\"   >\n          <a href=\"#视图\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>视图</h3>\n      <p>视图是虚拟的表。与包含数据的表不一样，视图只包含使用时动态检索数据的查询。</p>\n<p><strong>作为视图，它不包含表中应该有的数据，它包含的是一个SQL查询。</strong></p>\n<p><strong>视图仅仅是用来查看存储在别处的数据的一种设施。视图本身不包含数据，因此它们返回的数据是从其他表中检索出来的。在添加或更改这些表中的数据时，视图将返回改变后的数据。</strong></p>\n<p><strong>视图提供了一种MySQL的<code>SELECT</code>语句层次的封装，可用来简化数据处理及重新格式化基础数据或保护基础数据。</strong></p>\n<ul>\n<li>为什么使用视图</li>\n</ul>\n<ol>\n<li>重用SQL语句。</li>\n<li>简化复杂的SQL操作。在编写查询后，可以方便地重用它而不必知道它的基本查询细节。</li>\n<li>使用表的组成部分而不是整个表。</li>\n<li>保护数据。可以给用户授予表的特定部分的访问权限而不是整个表的访问权限。</li>\n<li>更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。</li>\n</ol>\n<ul>\n<li>视图的规则和限制</li>\n</ul>\n<ol>\n<li>与表一样，视图必须唯一命名。</li>\n<li>对于可以创建的视图数目没有限制。</li>\n<li>为了创建视图，必须具有足够的访问权限。这些限制通常由数据库管理人员授予。</li>\n<li>视图可以嵌套，即可以利用从其他视图中检索数据的查询来构造一个视图。</li>\n<li><code>ORDER BY</code>可以用在视图中，但如果从该视图检索数据的<code>SELECT</code>语句中也含有<code>ORDER BY</code>，那么该视图中的<code>ORDER BY</code>将被覆盖。</li>\n<li>视图不能索引，也不能有关联的触发器或默认值。</li>\n<li>视图可以和表一起使用。例如，编写一条联结表和视图的<code>SELECT</code>语句。</li>\n</ol>\n<ul>\n<li>使用视图</li>\n</ul>\n<ol>\n<li>视图使用<code>CREATE VIEW</code>创建。</li>\n<li>使用<code>SHOW CREATE VIEW viewname;</code>来查看创建视图的语句。</li>\n<li>用<code>DROP</code>删除视图，其语法为<code>DROP VIEW viewname;</code>。</li>\n<li>更新视图时，可以先用<code>DROP</code>再用<code>CREATE</code>,也可以直接用<code>CREATE OR REPLACE VIEW</code>，如果更新的视图不存在，则创建一个视图，如果存在，则替换视图。</li>\n</ol>\n<p><strong>如果从视图中检索数据时使用了一条<code>WHERE</code>子句，则两组子句(一组在视图中，另一组是传递给视图的)将自动结合</strong>。</p>\n<p><strong>视图主要用于检索数据，而不用于更新数据</strong>。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE VIEW productcustomers AS</span><br><span class=\"line\">SELECT cust_name,cust_contact,prod_id</span><br><span class=\"line\">FROM customers,orders,orderitems</span><br><span class=\"line\">WHERE customers.cust_id &#x3D; orders.cust_id</span><br><span class=\"line\">  AND orderitems.order_num &#x3D; orders.order_num;</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：这条语句创建了一个名为<code>productcustomers</code>的视图，它联结三个表，以返回已订购了任意产品的所有客户的列表。为检索订购了产品TNT2的客户，可使用如下语句：</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT cust_name,cust_contact</span><br><span class=\"line\">FROM productcustomers</span><br><span class=\"line\">WHERE prod_id &#x3D; &#39;TNT2&#39;;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例输出：</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+----------------+--------------+</span><br><span class=\"line\">| cust_name      | cust_contact |</span><br><span class=\"line\">+----------------+--------------+</span><br><span class=\"line\">| Coyote Inc.    | Y Lee        |</span><br><span class=\"line\">| Yosemite Place | Y Sam        |</span><br><span class=\"line\">+----------------+--------------+</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>更新视图</li>\n</ul>\n<p>可以使用<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>对视图进行更新。不过更新一个视图将更新其基表，如果对视图增加或删除行，实际上是对其基表增加或删除行。</p>\n<p>但并不是所有视图都可以更新，如果视图定义中有以下操作，则不能进行更新：</p>\n<ol>\n<li>分组(使用<code>GROUP BY</code>和<code>HAVING</code>)；</li>\n<li>联结；</li>\n<li>子查询；</li>\n<li>并；</li>\n<li>聚集函数；</li>\n<li>DISTINCT；</li>\n<li>导出 (计算) 列。</li>\n</ol>\n\n        <h3 id=\"存储过程\"   >\n          <a href=\"#存储过程\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>存储过程</h3>\n      <p>存储过程简单来说，就是为以后的使用而保存的一条或多条MySQL语句的集合。</p>\n<ul>\n<li>为什么使用存储过程</li>\n</ul>\n<ol>\n<li>通过把处理封装在容易使用的单元中，简化复杂的操作(正如前面例子所述)。</li>\n<li>由于不要求反复建立一系列处理步骤，这保证了处理的统一性，也就保证了数据的完整性。</li>\n<li>简化对变动的管理。如果表名、列名或业务逻辑有变化，只需要更改存储过程的代码即可。</li>\n</ol>\n<p>(2 和 3 在一定的程度上来说都可以延伸为安全性。通过存储过程限制对基础数据的访问减少数据讹误的机会)</p>\n<ol start=\"4\">\n<li>提高性能。使用存储过程比使用单独的SQL语句要快。</li>\n<li>存在一些只能用在单个请求中的MySQL元素和特性，存储过程可以使用它们来编写功能更强更灵活的代码。</li>\n</ol>\n<ul>\n<li>执行存储过程</li>\n</ul>\n<p>MySQL称存储过程的执行为调用，MySQL执行存储过程的语句为<code>CALL</code>。<code>CALL</code>接受存储过程的名字以及需要传递给它的任意参数。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CALL 存储过程名(@param_1,</span><br><span class=\"line\">              @param_2,</span><br><span class=\"line\">              @param_3);</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>创建存储过程</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE PROCEDURE 存储过程名()</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">\t待执行的SQL语句</span><br><span class=\"line\">END;</span><br></pre></td></tr></table></div></figure>\n\n<p>示例:</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE PROCEDURE productpricing()</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">\tSELECT Avg(prod_price) AS priceaverage</span><br><span class=\"line\">\tFROM products;</span><br><span class=\"line\">END;</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>删除存储过程</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP PROCEDURE productpricing;</span><br></pre></td></tr></table></div></figure>\n\n\n\n\n\n<ul>\n<li>注意事项–mysql命令行客户机的分隔符</li>\n</ul>\n<p>默认的MySQL语句分隔符为<code>；</code>。因为存储过程中的语句中也以<code>;</code>作为结束，因此在命令行客户机中使用<code>END；</code>时，应临时更改命令行实用程序的语句分隔符，稍作修改，如示：</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER\t&#x2F;&#x2F;</span><br><span class=\"line\">CREATE PROCEDURE productpricing()</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">\tSELECT Avg(prod_price) AS priceaverage</span><br><span class=\"line\">\tFROM products;</span><br><span class=\"line\">END\t&#x2F;&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：<code>DELIMITER</code> 可以告诉命令行使用程序使用其所带符号作为新的语句结束分隔符。</p>\n<ul>\n<li>使用参数</li>\n</ul>\n<p><strong>变量</strong>：内存中一个特定的位置，用来临时存储数据。</p>\n<p><strong>变量名</strong>：所有MySQL变量都必须以@开始。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE PROCEDURE productpricing(</span><br><span class=\"line\">\tOUT pl DECIMAL(8,2),</span><br><span class=\"line\">    OUT ph DECIMAL(8,2),</span><br><span class=\"line\">    OUT pa DECIMAL(8,2)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">BEGIN </span><br><span class=\"line\">\tSELECT Min(prod_price)</span><br><span class=\"line\">\tINTO pl</span><br><span class=\"line\">\tFROM products;</span><br><span class=\"line\">\tSELECT Max(prod_price)</span><br><span class=\"line\">\tINTO ph</span><br><span class=\"line\">\tFROM products;</span><br><span class=\"line\">\tSELECT Avg(prod_price)</span><br><span class=\"line\">\tINTO pa</span><br><span class=\"line\">\tFROM products;</span><br><span class=\"line\">END;</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：</p>\n<p>此存储过程接受三个参数。在创建带参数的存储过程时，每个参数必须具有指定的类型。关键字<code>OUT</code>指出相应的参数用来从存储过程传出一个值(返回给调用者)。MySQL支持<code>IN</code>（传递给存储过程）、<code>OUT</code> (从存储过程传出一个值，返回给调用者)和<code>INOUT</code>(对存储过程传入和传出)类型的参数。存储过程位于<code>BEGIN</code>和<code>END</code>语句内。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CALL productpricing(@pricelow,</span><br><span class=\"line\">                    @pricehigh,</span><br><span class=\"line\">                   \t@priceaverage);</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：在调用时，这条语句并不显示任何数据。它返回以后可以显示(或在其他处理中使用)的变量。</p>\n<ul>\n<li>建立智能存储过程</li>\n</ul>\n<p>存储过程可以包含业务规则和处理逻辑。这将使得存储过程更加的智能。</p>\n<ul>\n<li>检查存储过程</li>\n</ul>\n<p>可以使用<code>SHOW CREATE PROCEDURE</code>来显示一个创建存储过程的语句。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW CREATE PROCEDURE productpricing;</span><br></pre></td></tr></table></div></figure>\n\n<p>如果要获得包括何时、由谁创建等详细信息的存储过程列表，可以使用<code>SHOW PROCEDURE STATUS</code>。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHOW PROCEDURE STATUS LIKE &#39;productpricing&#39;;</span><br></pre></td></tr></table></div></figure>\n\n\n\n\n        <h3 id=\"游标\"   >\n          <a href=\"#游标\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>游标</h3>\n      <p>游标(cursor)是一个存储在MySQL服务器上的数据库查询，它不是一条<code>SELECT</code>语句，而是被该语句检索出来的结果集。在存储了游标之后，应用程序可以根据需要滚动或浏览其中的数据。游标主要用户交互式应用。</p>\n<ul>\n<li>使用游标</li>\n</ul>\n<p>使用游标涉及几个明确的步骤。</p>\n<ol>\n<li>在能够使用游标前，必须声明(定义)它。这个过程实际上没有检索数据，它只是定义要使用的<code>SELECT</code>语句。</li>\n<li>一旦声明后，必须打开游标以供使用。这个过程用前面定义的<code>SELECT</code>语句把数据实际检索出来。</li>\n<li>对于填有数据的游标，根据需要取出(检索各行)。</li>\n<li>在结束游标使用时，必须关闭游标。</li>\n</ol>\n<ul>\n<li>创建游标</li>\n</ul>\n<p>游标用<code>DECLARE</code>语句创建。<code>DECLARE</code>命名游标，并定义相应的<code>SELECT</code>语句，根据需要带<code>WHERE</code>和其他子句。例如，下面的语句定义了名为<code>ordernumbers</code>的游标，使用了可以检索所有订单的<code>SELECT</code>语句。</p>\n<p><strong>DECLARE语句的次序</strong>：<code>DECLARE</code>语句的发布存在特定的次序。用<code>DECLARE</code>语句定义的局部变量必须在定义任意游标或句柄之前定义，而句柄必须在游标之后定义。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE PROCEDURE processorders()</span><br><span class=\"line\">BEGIN \t</span><br><span class=\"line\">\tDECLARE ordernumbers CURSOR</span><br><span class=\"line\">\tFOR</span><br><span class=\"line\">\tSELECT order_num FROM orders;</span><br><span class=\"line\">END;</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：这个游标在存储过程处理完成后消失，它局限于存储过程。</p>\n<ul>\n<li>打开和关闭游标</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OPEN 游标名;#打开游标</span><br><span class=\"line\">CLOSE 游标名;#关闭游标</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>如果不明确关闭游标，MySQL将会在到达<code>END</code>语句时自动关闭它</strong>。</p>\n<ul>\n<li>使用游标数据</li>\n</ul>\n<p>在一个游标被打开后，可以使用<code>FETCH</code>语句分别访问它的每一行。<code>FETCH</code>指定检索什么数据(所需的列)，检索出来的数据存储在什么地方。它还向前移动游标中的内部行指针，使下一条<code>FETCH</code>语句检索下一行(不重复读取同一行)。</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE PROCEDURE local processorders()</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">\t--Declare local variables</span><br><span class=\"line\">\tDECLARE done BOOLEAN DEFAULT 0;</span><br><span class=\"line\">\tDECLARE o INT;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t--Declare the cursor</span><br><span class=\"line\">\tDECLARE ordernumbers CURSOR</span><br><span class=\"line\">\tFOR</span><br><span class=\"line\">\tSELECT order_num FROM orders;</span><br><span class=\"line\">\t--Declare continue handler</span><br><span class=\"line\">\tDECLARE CONTINUE HANDLER FOR SQLSTATE &#39;02000&#39; SET done&#x3D;1;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t--Open the cursor</span><br><span class=\"line\">\tOPEN ordernumbers;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t--Loop through all rows</span><br><span class=\"line\">\tREPEAT</span><br><span class=\"line\">\t\t--Get order number</span><br><span class=\"line\">\t\tFETCH ordernumbers INTO o;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t--End of Loop</span><br><span class=\"line\">\tUNTIL done END REPEAT;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t--Close the cursor</span><br><span class=\"line\">\tCLOSE ordernumbers;</span><br><span class=\"line\">END;</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：这里需要着重说明下语句：</p>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DECLARE CONTINUE HANDLER FOR SQLSTATE &#39;02000&#39; SET done&#x3D;1;</span><br></pre></td></tr></table></div></figure>\n\n<p>这条语句定义了一个<code>CONTINUE HANDLER</code>,它是在条件出现时被执行的代码。它指出当<code>SQLSTATE &#39;02000&#39;</code>出现时，<code>SET done=1</code>。<code>SQLSTATE &#39;02000&#39;</code>是一个未找到条件，当<code>REPEAT</code>由于没有更多的行供循环而不能继续时，出现这个条件。</p>\n\n        <h3 id=\"触发器\"   >\n          <a href=\"#触发器\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>触发器</h3>\n      <p>触发器是MySQL响应以下任意语句而自动执行的一条MySQL语句(或位于<code>BEGIN</code>和<code>END</code>语句之间的一组语句):</p>\n<ol>\n<li><code>DELETE</code></li>\n<li><code>INSERT</code></li>\n<li><code>UPDATE</code></li>\n</ol>\n<p><strong>只有表才支持触发器，视图不支持(临时表也不支持)</strong>。</p>\n<p><strong>触发器按每个表每个事件每次地定义，每个表每个事件每次只允许一个触发器，因此每个表最多支持6个触发器</strong>。</p>\n<p><strong>MySQL触发器不支持<code>CALL</code>语句，这表示不能从触发器内调用存储过程。所需的存储过程代码需要复制到触发器中</strong>。</p>\n<ul>\n<li>创建触发器</li>\n</ul>\n<p>在创建触发器时，需要给出4条信息：</p>\n<ol>\n<li>唯一的触发器名;</li>\n<li>触发器关联的表；</li>\n<li>触发器应该响应的活动(<code>DELETE</code>、<code>INSERT</code>或<code>UPDATE</code>)；</li>\n<li>触发器何时执行(处理之前或之后)。<code>AFTER</code> or<code>BEFORE</code>。</li>\n</ol>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TRIGGER 触发器名 AFTER INSERT ON 关联表名</span><br><span class=\"line\">FOR EACH ROW SELECT &#39;显示文本&#39;;</span><br><span class=\"line\"># 这里的显示文本非必须，只是一个示例。类似语句将在每次成功插入数据后，显示&quot;显示文本&quot;。</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>删除触发器</li>\n</ul>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DROP TRIGGER 触发器名;</span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li>INSERT触发器</li>\n</ul>\n<p>INSERT触发器在<code>INSERT</code>语句之前或之后执行。需要知道以下几点:</p>\n<ol>\n<li>在INSERT触发器代码内，可引用一个名为NEW的虚拟表，访问被插入的行；</li>\n<li>在BEFORE INSERT触发器中，NEW中的值也可以被更新(允许更改被插入的值)；</li>\n<li>对于<code>AUTO_INCREMENT</code>列，NEW在<code>INSERT</code>执行之前包含0，在<code>INSERT</code>执行之后包含新的自动生成值。</li>\n</ol>\n<ul>\n<li>DELETE触发器</li>\n</ul>\n<p>DELETE触发器在<code>DELETE</code>语句执行之前或之后执行。需要知道以下两点:</p>\n<ol>\n<li>在<code>DELETE</code>触发器代码内，你可以引用一个名为OLD的虚拟表，访问被删除的行；</li>\n<li><code>OLD</code>中的值全都是只读的，不能更新。</li>\n</ol>\n<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TRIGGER deleteorder BEFORE DELETE ON orders</span><br><span class=\"line\">FOR EACH ROW</span><br><span class=\"line\">BEGIN </span><br><span class=\"line\">\tINSERT INTO archive_orders(order_num,order_date,cust_id)</span><br><span class=\"line\">\tVALUES(OLD.order_num,OLD.order_date,OLD.cust_id)</span><br><span class=\"line\">END;</span><br></pre></td></tr></table></div></figure>\n\n<p>说明：上述例子演示使用OLD虚拟表保存将要被删除的行到一个存档表中。同时，上述例子还是用了多语句触发器的技巧，使得触发器能够容纳多条语句。</p>\n<ul>\n<li>UPDATE触发器</li>\n</ul>\n<p>UPDATE触发器在<code>UPDATE</code>语句执行之前或之后执行。需要知道以下几点：</p>\n<ol>\n<li>在UPDATE触发器代码中，你可以引用一个名为OLD的虚拟表访问以前(UPDATE语句之前)的值，引用一个名为NEW的虚拟表访问新的更新的值；</li>\n<li>在BEFORE UPDATE触发器中，NEW中的值可能也被更新(允许更改将用于<code>UPDATE</code>语句中的值)；</li>\n<li>OLD中的值全都是只读的，不能更新。</li>\n</ol>\n"},{"title":"Docker基础知识","date":"2020-07-17T03:56:11.000Z","_content":"\n#### 重要概念：\n\n#### Docker镜像\n\n类似于虚拟机镜像，可以将它理解为一个面向Docker引擎的只读模板，包含了文件系统。镜像是创建Docker容器的基础。通过版本管理和增量的文件系统，Docker提供了一套十分简单的机制来创建和更新现有的镜像。\n\n镜像文件一般由若干层组成，层其实是AUFS(Advanced File System,一种联合文件系统)中的重要概念，是实现增量保存与更新的基础。\n\n```shell\n$  sudo docker pull ubuntu:14.04 #下载14.04标签的镜像\n$  sudo docker pull dl.dockerpool.com:5000/ubuntu #选择从DockerPool社区的镜像源下载\n$  sudo docker run -t -i ubuntu /bin/bash #利用镜像创建一个容器并在其中运行bash应用\n$  sudo docker images #列出本地主机上已有的所有镜像，镜像ID的信息十分重要，它唯一标识镜像\n#可以使用docker tag命令为本地镜像添加新的标签，例如添加一个新的ubuntu:latest镜像标签\n$  sudo docker tag dl.dockerpool.com:5000/ubuntu:latest ubuntu:latest\n$  sudo docker inspect 5506de2b643b #可以获取镜像的详细信息，其返回一个JSON格式的消息\n$  sudo docker search mysql #搜索远端仓库中共享的镜像，默认搜官方仓库，输出结果按星际评价排序\n#可以删除镜像，其中IMAGE可以为标签或ID.(*当IMAGE是标签时，只有在镜像只剩一个标签时才会删除该镜像文件的所有AUFS层)\n$  sudo docker rmi [IMAGE]\n$  sudo docker rm [ID] #删除容器\n```\n\n**创建镜像**\n\n```shell\n$  sudo docker commit [OPTIONS] \n#OPTIONS = -a,--author=\"\"作者信息\n#OPTIONS = -m,--message=\"\"提交信息\n#OPTIONS = -p,--pause=true提交时暂停容器运行\n#启动一个容器并运行一些操作后，该容器和原镜像相比，已经发生了改变，可以使用docker commit命令来提交为一个新的镜像。提交时可以使用ID或名称来指定容器。\n$ sudo docker commit -m \"Add a new file\" -a \"Docker Newbee\" a925cb403f0 test\n#运行顺利的话，命令返回新创建的镜像的ID信息\n```\n\n**基于本地模板导入**\n\n```shell\n#也可以直接从一个操作系统模板文件导入一个镜像。\n$  sudo cat ubuntu-14.04-x86_64-minimal.tar.gz |docker import - ubuntu:14.04\n```\n\n**存出和载入镜像**\n\n```shell\n#存出镜像到本地文件\n$  sudo docker save -o ubuntu_14.04.tar ubuntu:14.04\n#从存出的本地文件再导入到本地镜像库\n$  sudo docker load --input ubuntu_14.04.tar\n$  sudo docker load < ubuntu_14.04.tar\n```\n\n**上传镜像**\n\n```shell\n#使用docker push上传镜像到仓库，默认上传到DockerHub官方仓库（需要登录）\n$  sudo docker tag test:latest user/test:latest\n$  sudo docker push user/test:latest\n```\n\n\n\n#### Docker容器\n\n类似于一个轻量级的沙箱，Docker利用容器来运行和隔离应用。容器是从镜像创建的应用运行实例，可以将其启动、开始、停止、删除，而这些容器是**相互隔离、不可见的**。\n\nDocker带有**额外的可写文件层**。如果认为虚拟机是模拟运行的一整套操作系统（提供了运行态环境和其他系统环境）和跑在上面的应用。那么Docker容器就是独立运行的一个或一组应用，以及他们的必须环境。\n\n**新建与启动容器**\n\n```shell\n#使用docker create可以新建一个容器.使用该命令创建的容器处于停止状态，可以使用docker start命令来启动它\n$  sudo docker create -it ubuntu:latest\n#使用docker run等价于先执行docker create 再执行 docker start\n#下面的命令输出一个hello world ，之后容器将自动终止\n$  sudo docker run ubuntu /bin/echo 'hello world'\n#如果添加 --rm 标记，则容器在终止后会立刻删除\n```\n\n**使用docker run创建容器，后台运行的标准操作**包括：\n\n1. 检查本地是否存在指定的镜像，不存在则从公有仓库下载\n2. 利用镜像创建并启动一个容器\n3. 分配一个文件系统，并在只读的镜像层外面挂载一层可读写层\n4. 从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去\n5. 从地址池配置一个IP地址给容器\n6. 执行用户指定的应用程序\n7. 执行完毕后容器被终止\n\n```shell\n#下面命令将启动一个bash终端，并允许用户交互\n$  sudo docker run -t -i ubuntu:14.04 /bin/bash \n#使用-t选项可以让Docker分配一个伪终端并绑定到容器的标准输入上\n#使用-i选型可以让容器的标准输入保持打开\n```\n\n_Docker容器认为，当运行的应用退出后，容器也没有了继续运行的必要_\n\n**守护态运行**\n\n```shell\n$  sudo docker run -d ubuntu /bin/sh -c \"while true;do echo hello world;sleep 1;done\"\n# -d选项能够让容器在后台以守护态形式运行\n# --rm和-d参数不能同时使用\n```\n\n**终止容器**\n\n```shell\n#可以使用docker stop来终止一个运行中的容器\n$  sudo docker stop ce5\n```\n\n**进入容器**\n\n```shell\n$  sudo docker attach nostalgic_hypatia\n#使用attach命令，当多个窗口同时attach到同一个容器时，所有的窗口都会同步显示，一个窗口阻塞全都阻塞\n$  sudo docker exec -ti 243c32535da7 /bin/bash\n#exec能避免attach的问题\n$  sudo nsenter --target 10981 --mount --uts --ipc --net --pid\n#为了使用nsenter连接到容器，还需要找到容器的进程PID\n```\n\n**删除容器**\n\n```shell\n$  sudo docker rm [OPTIONS] CONTAINER [CONTAINER...]\n# -f, --force=flase强行终止并删除一个运行中的容器\n# -l, --link=flase删除容器的连接，但保留容器\n# -v, --volumes=false 删除容器挂载的数据卷\n```\n\n**导入和导出容器**\n\n```shell\n$  sudo docker export CONTAINER\n$  sudo docker export ce5 >test_for_run.tar  #导出容器ce5到test_for_run.tar文件\n$  cat test_for_run.tar | sudo docker import - test/ubuntu:v1.0  \n#导出的文件可以用docker import 命令导入，成为镜像\n```\n\n实际上，既可以使用docker load命令来导入镜像存储文件到本地的镜像库，又可以使用docker import命令来导入一个容器快照到本地镜像库。二者的区别在于容器快照文件将丢弃所有历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也比较大。\n\n\n\n#### Docker仓库\n\n类似于代码仓库，是Docker集中存放镜像文件的场所。\n\n**创建和使用私有仓库**\n\n```shell\n$  sudo docker run -d -p 5000:5000 registry\n#这将自动下载并启动一个registry容器，创建本地的私有仓库服务\n#默认情况下会将仓库创建在容器的/tmp/registry目录下，可以用过-v参数指定存放路径\n#此时本地将启动一个私有仓库服务，监听端口为5000\n```\n\n\n\n* **数据卷**\n\n数据卷是一个可供容器使用的特殊目录，它绕过文件系统，可以提供很多有用的特性：\n\n1. 数据卷可以在容器之间共享和重用\n2. 对数据卷的修改会立马生效\n3. 对数据卷的更新不会影响镜像\n4. 卷会一直存在，直到没有容器使用\n\n数据卷的使用，类似于Linux下对目录或文件进行mount操作。\n\n\n\n**创建数据卷**\n\n```shell\n#使用docker run命令加 -v 标记可以在容器内创建一个数据卷，多次使用-v标记可以创建多个数据卷\n#下面使用training/webapp镜像创建一个web容器，并创建一个数据卷挂载到容器的/webapp目录：\n$  sudo docker run -d -P --name web -v /webapp training/webapp python app.py\n#*使用-v标记也可以指定挂载一个本地的已有目录到容器中去作为数据卷。本地目录的路径必须是绝对路径，如果路径不##存在，Docker会自动创建\n#下面的命令加载主机的/src/webapp目录到容器的/opt/webapp目录\n$  sudo docker run -d -P --name web -v /src/webapp:/opt/webapp training/webapp python app.py\n#Docker挂载数据卷的默认权限是读写（rw），用户也可以通过，ro指定为只读\n$  sudo docker run -d -P --name web -v /src/webapp:/opt/webapp:ro training/webapp python app.py \n#-v标记也可以从主机挂载单个文件到容器作为数据卷\n$  sudo docker run --rm --it -v ~/.bash_history:/.bash_history ubuntu /bin/bash\n#这样就可以记录在容器里输入过的命令历史了\n```\n\n**数据卷容器**\n\n需要在容器之间共享一些持续更新的数据，最简答的方式是使用数据卷容器。数据卷容器其实就是一个普通的容器，只是专门用它来提供数据卷供其他容器挂载使用。\n\n```shell\n#首先：创建一个数据卷容器dbdata,并在其中创建一个数据卷挂载到/dbdata\n$  sudo docker run -it -v /dbdata --name dbdate ubuntu\n#然后：可以在其他容器中使用 --volumes-from来挂载dbdata容器中的数据卷\n$  sudo docker run -it --volumes-from dbdata --name db1 ubuntu\n$  sudo docker run -it --volumes-from dbdata --name db2 ubuntu\n#上面的命令将创建db1和db2两个容器，并从dbdata容器挂载数据卷，此时两个容器都挂载同一个数据卷到相同的#/dbdata目录，三个容器任何一方在该目录下写入，其他容器都可以看到。\n```\n\n删除了挂载的容器，数据卷并不会被自动删除。如果要删除一个数据卷，必须在删除最后一个还挂载着它的容器时显式使用docker rm -v命令来指定同时删除关联的容器。\n\n可以利用数据卷容器对其中的数据卷进行备份、恢复，以实现数据的迁移。\n\n**备份**\n\n```shell\n$  sudo docker run --volumes-from dbdata -v $(pwd):/backup --name worker ubuntu tar cvf /backup/backup.tar /dbdata\n#上面的命令首先利用ubuntu镜像创建了一个容器worker。使用--volumes-from dbdata参数让worker容器挂载#dbdata容器的数据卷(即dbdata数据卷)；使用-v$(pwd):/backup参数来挂载本地的当前目录到worker容器的#/backup/目录。\n#work容器启动后，使用了tar cvf /backup/backup.tar /dbdata命令来将/dbdata下内容备份为容器内的#/backup/backup.tar,即宿主主机当前目录下的backup.tar\n```\n\n**恢复**\n\n```shell\n#首先要创建一个带有数据卷的容器dbdata2\n$  sudo docker run -v /dbdata --name dbdata2 ubuntu /bin/bash\n#然后创建另一个新的容器，挂载dbdata2的容器，并使用untar解压备份文件到所挂载的容器卷中即可\n$  sudo docker run --volumes -form dbdata2 -v $(pwd):/backup busybox tar xvf /backup/backup.tar\n```\n\n\n\n* **网络配置**\n\nDocker目前提供了映射容器端口到宿主主机和容器互联机制来为容器提供网络服务。除了使用端口映射机制来将容器内应用服务提供给外部网络，还可以通过容器互联系统让多个容器之间进行快捷的网络通信。\n\n**端口映射实现访问容器**\n\n在启动容器的时候，如果不指定对应参数，在容器外部是无法通过网络来访问容器内的网络应用和服务的。\n\n```shell\n#通过 -P 或者 -p 参数可以指定端口映射。\n#当使用-P(大写的)标记时，Docker会随机映射一个49000~49900的端口至容器内部开放的网络端口\n$  sudo docker run -d -P training/webapp python app.py\n$  sudo docker ps -l\n#上面的现象：本地主机的49155被映射到了容器的5000端口\n#访问宿主主机的49115端口即可访问容器内Web应用提供的界面\n# -p(小写的)则可以指定要映射的端口，注意，在一个指定端口上只可以绑定一个容器\n#支持的格式：ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort\n#\n#映射所有接口地址,此时默认会绑定本地所有接口上的所有地址\n$  sudo docker run -d -p 5000:5000 training/webapp python app.py\n#映射到指定地址的指定端口 ip:hostPort:containerPort\n$  sudo docker run -d -p 127.0.0.1:5000:5000 traning/webapp python app.py\n#映射到指定地址的任意端口 ip::containerPort\n$  sudo docker run -d -p 127.0.0.1::5000 training/webapp python app.py\n#使用udp标记来指定udp端口\n$  sudo docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py\n#查看映射端口配置\n$  sudo docker port \n```\n\n**容器的连接系统**\n\n它会在源和接收容器之间创建一个隧道，接收容器可以看到源容器指定的信息。\n\n连接系统依据容器的名称来执行，因此，首先需要自定义一个好记的容器名。自定义命名容器有两个好处：\n\n1. 自定义的命名，比较好记\n2. 当要连接其他容器时候，可以作为一个有用的参考点，比如连接web容器到db容器\n\n```shell\n#使用--name标记可以为容器自定义命名：\n$  sudo docker run -d -P --name web training/webapp python app.py\n$  sudo docker inspect -f \"{{.name}}\" 2adab9c82959 #可以查看容器的名字\n```\n\n```shell\n#使用--link参数可以让容器之间安全的进行交互\n$  sudo docker run -d -P --name web --link db:db training/webapp python app.py\n#上述命令将使db容器和web容器建立互联我关系\n#--link参数的格式为--link name:alias,其中name是要连接的容器的名称，alias是这个连接的别名。\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Docker/note.md","raw":"---\ntitle: Docker基础知识\ndate: 2020-07-17 11:56:11\ncategories:\n  - Docker\ntags:\n  - Docker\n---\n\n#### 重要概念：\n\n#### Docker镜像\n\n类似于虚拟机镜像，可以将它理解为一个面向Docker引擎的只读模板，包含了文件系统。镜像是创建Docker容器的基础。通过版本管理和增量的文件系统，Docker提供了一套十分简单的机制来创建和更新现有的镜像。\n\n镜像文件一般由若干层组成，层其实是AUFS(Advanced File System,一种联合文件系统)中的重要概念，是实现增量保存与更新的基础。\n\n```shell\n$  sudo docker pull ubuntu:14.04 #下载14.04标签的镜像\n$  sudo docker pull dl.dockerpool.com:5000/ubuntu #选择从DockerPool社区的镜像源下载\n$  sudo docker run -t -i ubuntu /bin/bash #利用镜像创建一个容器并在其中运行bash应用\n$  sudo docker images #列出本地主机上已有的所有镜像，镜像ID的信息十分重要，它唯一标识镜像\n#可以使用docker tag命令为本地镜像添加新的标签，例如添加一个新的ubuntu:latest镜像标签\n$  sudo docker tag dl.dockerpool.com:5000/ubuntu:latest ubuntu:latest\n$  sudo docker inspect 5506de2b643b #可以获取镜像的详细信息，其返回一个JSON格式的消息\n$  sudo docker search mysql #搜索远端仓库中共享的镜像，默认搜官方仓库，输出结果按星际评价排序\n#可以删除镜像，其中IMAGE可以为标签或ID.(*当IMAGE是标签时，只有在镜像只剩一个标签时才会删除该镜像文件的所有AUFS层)\n$  sudo docker rmi [IMAGE]\n$  sudo docker rm [ID] #删除容器\n```\n\n**创建镜像**\n\n```shell\n$  sudo docker commit [OPTIONS] \n#OPTIONS = -a,--author=\"\"作者信息\n#OPTIONS = -m,--message=\"\"提交信息\n#OPTIONS = -p,--pause=true提交时暂停容器运行\n#启动一个容器并运行一些操作后，该容器和原镜像相比，已经发生了改变，可以使用docker commit命令来提交为一个新的镜像。提交时可以使用ID或名称来指定容器。\n$ sudo docker commit -m \"Add a new file\" -a \"Docker Newbee\" a925cb403f0 test\n#运行顺利的话，命令返回新创建的镜像的ID信息\n```\n\n**基于本地模板导入**\n\n```shell\n#也可以直接从一个操作系统模板文件导入一个镜像。\n$  sudo cat ubuntu-14.04-x86_64-minimal.tar.gz |docker import - ubuntu:14.04\n```\n\n**存出和载入镜像**\n\n```shell\n#存出镜像到本地文件\n$  sudo docker save -o ubuntu_14.04.tar ubuntu:14.04\n#从存出的本地文件再导入到本地镜像库\n$  sudo docker load --input ubuntu_14.04.tar\n$  sudo docker load < ubuntu_14.04.tar\n```\n\n**上传镜像**\n\n```shell\n#使用docker push上传镜像到仓库，默认上传到DockerHub官方仓库（需要登录）\n$  sudo docker tag test:latest user/test:latest\n$  sudo docker push user/test:latest\n```\n\n\n\n#### Docker容器\n\n类似于一个轻量级的沙箱，Docker利用容器来运行和隔离应用。容器是从镜像创建的应用运行实例，可以将其启动、开始、停止、删除，而这些容器是**相互隔离、不可见的**。\n\nDocker带有**额外的可写文件层**。如果认为虚拟机是模拟运行的一整套操作系统（提供了运行态环境和其他系统环境）和跑在上面的应用。那么Docker容器就是独立运行的一个或一组应用，以及他们的必须环境。\n\n**新建与启动容器**\n\n```shell\n#使用docker create可以新建一个容器.使用该命令创建的容器处于停止状态，可以使用docker start命令来启动它\n$  sudo docker create -it ubuntu:latest\n#使用docker run等价于先执行docker create 再执行 docker start\n#下面的命令输出一个hello world ，之后容器将自动终止\n$  sudo docker run ubuntu /bin/echo 'hello world'\n#如果添加 --rm 标记，则容器在终止后会立刻删除\n```\n\n**使用docker run创建容器，后台运行的标准操作**包括：\n\n1. 检查本地是否存在指定的镜像，不存在则从公有仓库下载\n2. 利用镜像创建并启动一个容器\n3. 分配一个文件系统，并在只读的镜像层外面挂载一层可读写层\n4. 从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去\n5. 从地址池配置一个IP地址给容器\n6. 执行用户指定的应用程序\n7. 执行完毕后容器被终止\n\n```shell\n#下面命令将启动一个bash终端，并允许用户交互\n$  sudo docker run -t -i ubuntu:14.04 /bin/bash \n#使用-t选项可以让Docker分配一个伪终端并绑定到容器的标准输入上\n#使用-i选型可以让容器的标准输入保持打开\n```\n\n_Docker容器认为，当运行的应用退出后，容器也没有了继续运行的必要_\n\n**守护态运行**\n\n```shell\n$  sudo docker run -d ubuntu /bin/sh -c \"while true;do echo hello world;sleep 1;done\"\n# -d选项能够让容器在后台以守护态形式运行\n# --rm和-d参数不能同时使用\n```\n\n**终止容器**\n\n```shell\n#可以使用docker stop来终止一个运行中的容器\n$  sudo docker stop ce5\n```\n\n**进入容器**\n\n```shell\n$  sudo docker attach nostalgic_hypatia\n#使用attach命令，当多个窗口同时attach到同一个容器时，所有的窗口都会同步显示，一个窗口阻塞全都阻塞\n$  sudo docker exec -ti 243c32535da7 /bin/bash\n#exec能避免attach的问题\n$  sudo nsenter --target 10981 --mount --uts --ipc --net --pid\n#为了使用nsenter连接到容器，还需要找到容器的进程PID\n```\n\n**删除容器**\n\n```shell\n$  sudo docker rm [OPTIONS] CONTAINER [CONTAINER...]\n# -f, --force=flase强行终止并删除一个运行中的容器\n# -l, --link=flase删除容器的连接，但保留容器\n# -v, --volumes=false 删除容器挂载的数据卷\n```\n\n**导入和导出容器**\n\n```shell\n$  sudo docker export CONTAINER\n$  sudo docker export ce5 >test_for_run.tar  #导出容器ce5到test_for_run.tar文件\n$  cat test_for_run.tar | sudo docker import - test/ubuntu:v1.0  \n#导出的文件可以用docker import 命令导入，成为镜像\n```\n\n实际上，既可以使用docker load命令来导入镜像存储文件到本地的镜像库，又可以使用docker import命令来导入一个容器快照到本地镜像库。二者的区别在于容器快照文件将丢弃所有历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也比较大。\n\n\n\n#### Docker仓库\n\n类似于代码仓库，是Docker集中存放镜像文件的场所。\n\n**创建和使用私有仓库**\n\n```shell\n$  sudo docker run -d -p 5000:5000 registry\n#这将自动下载并启动一个registry容器，创建本地的私有仓库服务\n#默认情况下会将仓库创建在容器的/tmp/registry目录下，可以用过-v参数指定存放路径\n#此时本地将启动一个私有仓库服务，监听端口为5000\n```\n\n\n\n* **数据卷**\n\n数据卷是一个可供容器使用的特殊目录，它绕过文件系统，可以提供很多有用的特性：\n\n1. 数据卷可以在容器之间共享和重用\n2. 对数据卷的修改会立马生效\n3. 对数据卷的更新不会影响镜像\n4. 卷会一直存在，直到没有容器使用\n\n数据卷的使用，类似于Linux下对目录或文件进行mount操作。\n\n\n\n**创建数据卷**\n\n```shell\n#使用docker run命令加 -v 标记可以在容器内创建一个数据卷，多次使用-v标记可以创建多个数据卷\n#下面使用training/webapp镜像创建一个web容器，并创建一个数据卷挂载到容器的/webapp目录：\n$  sudo docker run -d -P --name web -v /webapp training/webapp python app.py\n#*使用-v标记也可以指定挂载一个本地的已有目录到容器中去作为数据卷。本地目录的路径必须是绝对路径，如果路径不##存在，Docker会自动创建\n#下面的命令加载主机的/src/webapp目录到容器的/opt/webapp目录\n$  sudo docker run -d -P --name web -v /src/webapp:/opt/webapp training/webapp python app.py\n#Docker挂载数据卷的默认权限是读写（rw），用户也可以通过，ro指定为只读\n$  sudo docker run -d -P --name web -v /src/webapp:/opt/webapp:ro training/webapp python app.py \n#-v标记也可以从主机挂载单个文件到容器作为数据卷\n$  sudo docker run --rm --it -v ~/.bash_history:/.bash_history ubuntu /bin/bash\n#这样就可以记录在容器里输入过的命令历史了\n```\n\n**数据卷容器**\n\n需要在容器之间共享一些持续更新的数据，最简答的方式是使用数据卷容器。数据卷容器其实就是一个普通的容器，只是专门用它来提供数据卷供其他容器挂载使用。\n\n```shell\n#首先：创建一个数据卷容器dbdata,并在其中创建一个数据卷挂载到/dbdata\n$  sudo docker run -it -v /dbdata --name dbdate ubuntu\n#然后：可以在其他容器中使用 --volumes-from来挂载dbdata容器中的数据卷\n$  sudo docker run -it --volumes-from dbdata --name db1 ubuntu\n$  sudo docker run -it --volumes-from dbdata --name db2 ubuntu\n#上面的命令将创建db1和db2两个容器，并从dbdata容器挂载数据卷，此时两个容器都挂载同一个数据卷到相同的#/dbdata目录，三个容器任何一方在该目录下写入，其他容器都可以看到。\n```\n\n删除了挂载的容器，数据卷并不会被自动删除。如果要删除一个数据卷，必须在删除最后一个还挂载着它的容器时显式使用docker rm -v命令来指定同时删除关联的容器。\n\n可以利用数据卷容器对其中的数据卷进行备份、恢复，以实现数据的迁移。\n\n**备份**\n\n```shell\n$  sudo docker run --volumes-from dbdata -v $(pwd):/backup --name worker ubuntu tar cvf /backup/backup.tar /dbdata\n#上面的命令首先利用ubuntu镜像创建了一个容器worker。使用--volumes-from dbdata参数让worker容器挂载#dbdata容器的数据卷(即dbdata数据卷)；使用-v$(pwd):/backup参数来挂载本地的当前目录到worker容器的#/backup/目录。\n#work容器启动后，使用了tar cvf /backup/backup.tar /dbdata命令来将/dbdata下内容备份为容器内的#/backup/backup.tar,即宿主主机当前目录下的backup.tar\n```\n\n**恢复**\n\n```shell\n#首先要创建一个带有数据卷的容器dbdata2\n$  sudo docker run -v /dbdata --name dbdata2 ubuntu /bin/bash\n#然后创建另一个新的容器，挂载dbdata2的容器，并使用untar解压备份文件到所挂载的容器卷中即可\n$  sudo docker run --volumes -form dbdata2 -v $(pwd):/backup busybox tar xvf /backup/backup.tar\n```\n\n\n\n* **网络配置**\n\nDocker目前提供了映射容器端口到宿主主机和容器互联机制来为容器提供网络服务。除了使用端口映射机制来将容器内应用服务提供给外部网络，还可以通过容器互联系统让多个容器之间进行快捷的网络通信。\n\n**端口映射实现访问容器**\n\n在启动容器的时候，如果不指定对应参数，在容器外部是无法通过网络来访问容器内的网络应用和服务的。\n\n```shell\n#通过 -P 或者 -p 参数可以指定端口映射。\n#当使用-P(大写的)标记时，Docker会随机映射一个49000~49900的端口至容器内部开放的网络端口\n$  sudo docker run -d -P training/webapp python app.py\n$  sudo docker ps -l\n#上面的现象：本地主机的49155被映射到了容器的5000端口\n#访问宿主主机的49115端口即可访问容器内Web应用提供的界面\n# -p(小写的)则可以指定要映射的端口，注意，在一个指定端口上只可以绑定一个容器\n#支持的格式：ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort\n#\n#映射所有接口地址,此时默认会绑定本地所有接口上的所有地址\n$  sudo docker run -d -p 5000:5000 training/webapp python app.py\n#映射到指定地址的指定端口 ip:hostPort:containerPort\n$  sudo docker run -d -p 127.0.0.1:5000:5000 traning/webapp python app.py\n#映射到指定地址的任意端口 ip::containerPort\n$  sudo docker run -d -p 127.0.0.1::5000 training/webapp python app.py\n#使用udp标记来指定udp端口\n$  sudo docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py\n#查看映射端口配置\n$  sudo docker port \n```\n\n**容器的连接系统**\n\n它会在源和接收容器之间创建一个隧道，接收容器可以看到源容器指定的信息。\n\n连接系统依据容器的名称来执行，因此，首先需要自定义一个好记的容器名。自定义命名容器有两个好处：\n\n1. 自定义的命名，比较好记\n2. 当要连接其他容器时候，可以作为一个有用的参考点，比如连接web容器到db容器\n\n```shell\n#使用--name标记可以为容器自定义命名：\n$  sudo docker run -d -P --name web training/webapp python app.py\n$  sudo docker inspect -f \"{{.name}}\" 2adab9c82959 #可以查看容器的名字\n```\n\n```shell\n#使用--link参数可以让容器之间安全的进行交互\n$  sudo docker run -d -P --name web --link db:db training/webapp python app.py\n#上述命令将使db容器和web容器建立互联我关系\n#--link参数的格式为--link name:alias,其中name是要连接的容器的名称，alias是这个连接的别名。\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Docker/note","published":1,"updated":"2021-02-09T06:40:02.628Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkxmyjrk0000iqlz9g470va3","content":"\n        <h4 id=\"重要概念：\"   >\n          <a href=\"#重要概念：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>重要概念：</h4>\n      \n        <h4 id=\"Docker镜像\"   >\n          <a href=\"#Docker镜像\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>Docker镜像</h4>\n      <p>类似于虚拟机镜像，可以将它理解为一个面向Docker引擎的只读模板，包含了文件系统。镜像是创建Docker容器的基础。通过版本管理和增量的文件系统，Docker提供了一套十分简单的机制来创建和更新现有的镜像。</p>\n<p>镜像文件一般由若干层组成，层其实是AUFS(Advanced File System,一种联合文件系统)中的重要概念，是实现增量保存与更新的基础。</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker pull ubuntu:14.04 <span class=\"comment\">#下载14.04标签的镜像</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker pull dl.dockerpool.com:5000/ubuntu <span class=\"comment\">#选择从DockerPool社区的镜像源下载</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -t -i ubuntu /bin/bash <span class=\"comment\">#利用镜像创建一个容器并在其中运行bash应用</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker images <span class=\"comment\">#列出本地主机上已有的所有镜像，镜像ID的信息十分重要，它唯一标识镜像</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">可以使用docker tag命令为本地镜像添加新的标签，例如添加一个新的ubuntu:latest镜像标签</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker tag dl.dockerpool.com:5000/ubuntu:latest ubuntu:latest</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker inspect 5506de2b643b <span class=\"comment\">#可以获取镜像的详细信息，其返回一个JSON格式的消息</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker search mysql <span class=\"comment\">#搜索远端仓库中共享的镜像，默认搜官方仓库，输出结果按星际评价排序</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">可以删除镜像，其中IMAGE可以为标签或ID.(*当IMAGE是标签时，只有在镜像只剩一个标签时才会删除该镜像文件的所有AUFS层)</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker rmi [IMAGE]</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker rm [ID] <span class=\"comment\">#删除容器</span></span></span><br></pre></td></tr></table></div></figure>\n\n<p><strong>创建镜像</strong></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker commit [OPTIONS] </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">OPTIONS = -a,--author=<span class=\"string\">\"\"</span>作者信息</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">OPTIONS = -m,--message=<span class=\"string\">\"\"</span>提交信息</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">OPTIONS = -p,--pause=<span class=\"literal\">true</span>提交时暂停容器运行</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动一个容器并运行一些操作后，该容器和原镜像相比，已经发生了改变，可以使用docker commit命令来提交为一个新的镜像。提交时可以使用ID或名称来指定容器。</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker commit -m <span class=\"string\">\"Add a new file\"</span> -a <span class=\"string\">\"Docker Newbee\"</span> a925cb403f0 <span class=\"built_in\">test</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">运行顺利的话，命令返回新创建的镜像的ID信息</span></span><br></pre></td></tr></table></div></figure>\n\n<p><strong>基于本地模板导入</strong></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">也可以直接从一个操作系统模板文件导入一个镜像。</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo cat ubuntu-14.04-x86_64-minimal.tar.gz |docker import - ubuntu:14.04</span></span><br></pre></td></tr></table></div></figure>\n\n<p><strong>存出和载入镜像</strong></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">存出镜像到本地文件</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker save -o ubuntu_14.04.tar ubuntu:14.04</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">从存出的本地文件再导入到本地镜像库</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker load --input ubuntu_14.04.tar</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker load &lt; ubuntu_14.04.tar</span></span><br></pre></td></tr></table></div></figure>\n\n<p><strong>上传镜像</strong></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用docker push上传镜像到仓库，默认上传到DockerHub官方仓库（需要登录）</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker tag <span class=\"built_in\">test</span>:latest user/<span class=\"built_in\">test</span>:latest</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker push user/<span class=\"built_in\">test</span>:latest</span></span><br></pre></td></tr></table></div></figure>\n\n\n\n\n        <h4 id=\"Docker容器\"   >\n          <a href=\"#Docker容器\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>Docker容器</h4>\n      <p>类似于一个轻量级的沙箱，Docker利用容器来运行和隔离应用。容器是从镜像创建的应用运行实例，可以将其启动、开始、停止、删除，而这些容器是<strong>相互隔离、不可见的</strong>。</p>\n<p>Docker带有<strong>额外的可写文件层</strong>。如果认为虚拟机是模拟运行的一整套操作系统（提供了运行态环境和其他系统环境）和跑在上面的应用。那么Docker容器就是独立运行的一个或一组应用，以及他们的必须环境。</p>\n<p><strong>新建与启动容器</strong></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用docker create可以新建一个容器.使用该命令创建的容器处于停止状态，可以使用docker start命令来启动它</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker create -it ubuntu:latest</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用docker run等价于先执行docker create 再执行 docker start</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">下面的命令输出一个hello world ，之后容器将自动终止</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run ubuntu /bin/<span class=\"built_in\">echo</span> <span class=\"string\">'hello world'</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果添加 --rm 标记，则容器在终止后会立刻删除</span></span><br></pre></td></tr></table></div></figure>\n\n<p><strong>使用docker run创建容器，后台运行的标准操作</strong>包括：</p>\n<ol>\n<li>检查本地是否存在指定的镜像，不存在则从公有仓库下载</li>\n<li>利用镜像创建并启动一个容器</li>\n<li>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</li>\n<li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</li>\n<li>从地址池配置一个IP地址给容器</li>\n<li>执行用户指定的应用程序</li>\n<li>执行完毕后容器被终止</li>\n</ol>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">下面命令将启动一个bash终端，并允许用户交互</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -t -i ubuntu:14.04 /bin/bash </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用-t选项可以让Docker分配一个伪终端并绑定到容器的标准输入上</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用-i选型可以让容器的标准输入保持打开</span></span><br></pre></td></tr></table></div></figure>\n\n<p><em>Docker容器认为，当运行的应用退出后，容器也没有了继续运行的必要</em></p>\n<p><strong>守护态运行</strong></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -d ubuntu /bin/sh -c <span class=\"string\">\"while true;do echo hello world;sleep 1;done\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -d选项能够让容器在后台以守护态形式运行</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> --rm和-d参数不能同时使用</span></span><br></pre></td></tr></table></div></figure>\n\n<p><strong>终止容器</strong></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">可以使用docker stop来终止一个运行中的容器</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker stop ce5</span></span><br></pre></td></tr></table></div></figure>\n\n<p><strong>进入容器</strong></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker attach nostalgic_hypatia</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用attach命令，当多个窗口同时attach到同一个容器时，所有的窗口都会同步显示，一个窗口阻塞全都阻塞</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker <span class=\"built_in\">exec</span> -ti 243c32535da7 /bin/bash</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"built_in\">exec</span>能避免attach的问题</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo nsenter --target 10981 --mount --uts --ipc --net --pid</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">为了使用nsenter连接到容器，还需要找到容器的进程PID</span></span><br></pre></td></tr></table></div></figure>\n\n<p><strong>删除容器</strong></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker rm [OPTIONS] CONTAINER [CONTAINER...]</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -f, --force=flase强行终止并删除一个运行中的容器</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -l, --link=flase删除容器的连接，但保留容器</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -v, --volumes=<span class=\"literal\">false</span> 删除容器挂载的数据卷</span></span><br></pre></td></tr></table></div></figure>\n\n<p><strong>导入和导出容器</strong></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker <span class=\"built_in\">export</span> CONTAINER</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker <span class=\"built_in\">export</span> ce5 &gt;test_for_run.tar  <span class=\"comment\">#导出容器ce5到test_for_run.tar文件</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  cat test_for_run.tar | sudo docker import - <span class=\"built_in\">test</span>/ubuntu:v1.0  </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">导出的文件可以用docker import 命令导入，成为镜像</span></span><br></pre></td></tr></table></div></figure>\n\n<p>实际上，既可以使用docker load命令来导入镜像存储文件到本地的镜像库，又可以使用docker import命令来导入一个容器快照到本地镜像库。二者的区别在于容器快照文件将丢弃所有历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也比较大。</p>\n\n        <h4 id=\"Docker仓库\"   >\n          <a href=\"#Docker仓库\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>Docker仓库</h4>\n      <p>类似于代码仓库，是Docker集中存放镜像文件的场所。</p>\n<p><strong>创建和使用私有仓库</strong></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -d -p 5000:5000 registry</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">这将自动下载并启动一个registry容器，创建本地的私有仓库服务</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">默认情况下会将仓库创建在容器的/tmp/registry目录下，可以用过-v参数指定存放路径</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">此时本地将启动一个私有仓库服务，监听端口为5000</span></span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li><strong>数据卷</strong></li>\n</ul>\n<p>数据卷是一个可供容器使用的特殊目录，它绕过文件系统，可以提供很多有用的特性：</p>\n<ol>\n<li>数据卷可以在容器之间共享和重用</li>\n<li>对数据卷的修改会立马生效</li>\n<li>对数据卷的更新不会影响镜像</li>\n<li>卷会一直存在，直到没有容器使用</li>\n</ol>\n<p>数据卷的使用，类似于Linux下对目录或文件进行mount操作。</p>\n<p><strong>创建数据卷</strong></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用docker run命令加 -v 标记可以在容器内创建一个数据卷，多次使用-v标记可以创建多个数据卷</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">下面使用training/webapp镜像创建一个web容器，并创建一个数据卷挂载到容器的/webapp目录：</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -d -P --name web -v /webapp training/webapp python app.py</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">*使用-v标记也可以指定挂载一个本地的已有目录到容器中去作为数据卷。本地目录的路径必须是绝对路径，如果路径不<span class=\"comment\">##存在，Docker会自动创建</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">下面的命令加载主机的/src/webapp目录到容器的/opt/webapp目录</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -d -P --name web -v /src/webapp:/opt/webapp training/webapp python app.py</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">Docker挂载数据卷的默认权限是读写（rw），用户也可以通过，ro指定为只读</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -d -P --name web -v /src/webapp:/opt/webapp:ro training/webapp python app.py </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">-v标记也可以从主机挂载单个文件到容器作为数据卷</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run --rm --it -v ~/.bash_history:/.bash_history ubuntu /bin/bash</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">这样就可以记录在容器里输入过的命令历史了</span></span><br></pre></td></tr></table></div></figure>\n\n<p><strong>数据卷容器</strong></p>\n<p>需要在容器之间共享一些持续更新的数据，最简答的方式是使用数据卷容器。数据卷容器其实就是一个普通的容器，只是专门用它来提供数据卷供其他容器挂载使用。</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">首先：创建一个数据卷容器dbdata,并在其中创建一个数据卷挂载到/dbdata</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -it -v /dbdata --name dbdate ubuntu</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">然后：可以在其他容器中使用 --volumes-from来挂载dbdata容器中的数据卷</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -it --volumes-from dbdata --name db1 ubuntu</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -it --volumes-from dbdata --name db2 ubuntu</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">上面的命令将创建db1和db2两个容器，并从dbdata容器挂载数据卷，此时两个容器都挂载同一个数据卷到相同的<span class=\"comment\">#/dbdata目录，三个容器任何一方在该目录下写入，其他容器都可以看到。</span></span></span><br></pre></td></tr></table></div></figure>\n\n<p>删除了挂载的容器，数据卷并不会被自动删除。如果要删除一个数据卷，必须在删除最后一个还挂载着它的容器时显式使用docker rm -v命令来指定同时删除关联的容器。</p>\n<p>可以利用数据卷容器对其中的数据卷进行备份、恢复，以实现数据的迁移。</p>\n<p><strong>备份</strong></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run --volumes-from dbdata -v $(<span class=\"built_in\">pwd</span>):/backup --name worker ubuntu tar cvf /backup/backup.tar /dbdata</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">上面的命令首先利用ubuntu镜像创建了一个容器worker。使用--volumes-from dbdata参数让worker容器挂载<span class=\"comment\">#dbdata容器的数据卷(即dbdata数据卷)；使用-v$(pwd):/backup参数来挂载本地的当前目录到worker容器的#/backup/目录。</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">work容器启动后，使用了tar cvf /backup/backup.tar /dbdata命令来将/dbdata下内容备份为容器内的<span class=\"comment\">#/backup/backup.tar,即宿主主机当前目录下的backup.tar</span></span></span><br></pre></td></tr></table></div></figure>\n\n<p><strong>恢复</strong></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">首先要创建一个带有数据卷的容器dbdata2</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -v /dbdata --name dbdata2 ubuntu /bin/bash</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">然后创建另一个新的容器，挂载dbdata2的容器，并使用untar解压备份文件到所挂载的容器卷中即可</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run --volumes -form dbdata2 -v $(<span class=\"built_in\">pwd</span>):/backup busybox tar xvf /backup/backup.tar</span></span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li><strong>网络配置</strong></li>\n</ul>\n<p>Docker目前提供了映射容器端口到宿主主机和容器互联机制来为容器提供网络服务。除了使用端口映射机制来将容器内应用服务提供给外部网络，还可以通过容器互联系统让多个容器之间进行快捷的网络通信。</p>\n<p><strong>端口映射实现访问容器</strong></p>\n<p>在启动容器的时候，如果不指定对应参数，在容器外部是无法通过网络来访问容器内的网络应用和服务的。</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">通过 -P 或者 -p 参数可以指定端口映射。</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">当使用-P(大写的)标记时，Docker会随机映射一个49000~49900的端口至容器内部开放的网络端口</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -d -P training/webapp python app.py</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker ps -l</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">上面的现象：本地主机的49155被映射到了容器的5000端口</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">访问宿主主机的49115端口即可访问容器内Web应用提供的界面</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -p(小写的)则可以指定要映射的端口，注意，在一个指定端口上只可以绑定一个容器</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">支持的格式：ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">映射所有接口地址,此时默认会绑定本地所有接口上的所有地址</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -d -p 5000:5000 training/webapp python app.py</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">映射到指定地址的指定端口 ip:hostPort:containerPort</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -d -p 127.0.0.1:5000:5000 traning/webapp python app.py</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">映射到指定地址的任意端口 ip::containerPort</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -d -p 127.0.0.1::5000 training/webapp python app.py</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用udp标记来指定udp端口</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看映射端口配置</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker port</span></span><br></pre></td></tr></table></div></figure>\n\n<p><strong>容器的连接系统</strong></p>\n<p>它会在源和接收容器之间创建一个隧道，接收容器可以看到源容器指定的信息。</p>\n<p>连接系统依据容器的名称来执行，因此，首先需要自定义一个好记的容器名。自定义命名容器有两个好处：</p>\n<ol>\n<li>自定义的命名，比较好记</li>\n<li>当要连接其他容器时候，可以作为一个有用的参考点，比如连接web容器到db容器</li>\n</ol>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用--name标记可以为容器自定义命名：</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -d -P --name web training/webapp python app.py</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker inspect -f <span class=\"string\">\"&#123;&#123;.name&#125;&#125;\"</span> 2adab9c82959 <span class=\"comment\">#可以查看容器的名字</span></span></span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用--link参数可以让容器之间安全的进行交互</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -d -P --name web --link db:db training/webapp python app.py</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">上述命令将使db容器和web容器建立互联我关系</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">--link参数的格式为--link name:<span class=\"built_in\">alias</span>,其中name是要连接的容器的名称，<span class=\"built_in\">alias</span>是这个连接的别名。</span></span><br></pre></td></tr></table></div></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{"stun":{"shake_file":true,"index_subtitle":false,"canonical":true,"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu360_site_verification":null,"sougou_site_verification":null,"menu":{"home":"/ || fas fa-home","archives":"/archives/ || fas fa-folder-open","categories":"/categories/ || fas fa-layer-group","tags":"/tags/ || fas fa-tags"},"submenu":null,"menu_settings":{"icon_only":false,"text_only":false},"favicon":{"small":"/images/icons/favicon-16x16.png","medium":"/images/icons/favicon-32x32.png"},"pwa":{"enable":false,"manifest":"/manifest.json","theme_color":"#54bcff"},"night_mode":{"enable":true,"button":{"color":"#fafafa","bg_color":"#8c8a8a"},"icon":{"dark":"🌜","light":"🌞"}},"layout":{"content":"768px","sidebar":"300px","content_sidebar_gap":"30px","main_padding":{"default":"20px","tablet":"15px","mobile":"10px"}},"header":{"enable":true,"show_on":{"post":true},"height":"80%","bg_image":{"enable":true,"url":"/images/header.jpg"},"mask":{"enable":true,"opacity":0.5},"nav":{"height":"50px","bg_color":"#333"},"scroll_down_icon":{"enable":false,"name":"fas fa-angle-down","animation":true}},"body":{"bg_image":{"enable":true,"url":"/images/blogbk.jpg","fixed":true,"repeat":false},"mask":{"enable":false,"opacity":{"default":0.1,"night_mode":0.6}}},"footer":{"bg_image":{"enable":false,"url":null},"mask":{"enable":false,"opacity":0.5},"copyright":{"enable":true,"text":null,"since":null,"end":null},"icon":{"enable":true,"name":"fas fa-heart","animation":false,"color":"#ff0000"},"powered":{"enable":true,"version":true},"theme":{"enable":true,"version":true},"beian":{"enable":false,"icp":null},"custom":{"enable":false,"text":null}},"creative_commons":{"enable":true,"license":"BY-NC-SA","sidebar":true,"post":true,"language":null},"back2top":{"enable":true,"icon":{"name":"fas fa-rocket","rotate":"-45deg","color":"#49b1f5","hover_color":"#fc6423"}},"sidebar":{"enable":true,"position":"right","offsetTop":"20px","horizon_line":false},"author":{"enable":true,"avatar":{"url":"/images/icons/stun-logo.svg","rounded":false,"opacity":1,"animation":"turn"},"motto":"hello world"},"social":{"github":"https://github.com/ || fab fa-github","google":"https://plus.google.com/ || fab fa-google","twitter":"https://twitter.com/ || fab fa-twitter","youtube":"https://youtube.com/ || fab fa-youtube"},"social_setting":{"enable":false,"icon_only":true},"toc":{"enable":true,"list_number":true,"wrap":true,"expand_all":false,"min_depth":1,"max_depth":6},"feed":{"enable":false,"email":null,"rss":null},"reading_progress":{"enable":true,"color":"#fc6423","height":"1px"},"codeblock":{"style":"default","highlight":"light","word_wrap":false},"heading_line":true,"reward":{"enable":false,"alipay":null,"wechat":null},"post_meta":{"icon_only":false,"created":{"enable":true,"icon":"far fa-calendar-plus"},"updated":{"enable":true,"icon":"far fa-calendar-check"},"reading_time":{"enable":false,"icon":"far fa-clock","speed":{"zh":200,"en":80}},"word_count":{"enable":false,"icon":"far fa-file-word"}},"post_list":{"paginate":{"home":true,"archives":false},"cover_image":{"home":false}},"post_widget":{"tags":true,"end_text":{"enable":true,"horizon_line":true},"share":{"enable":false,"label":"Share to: ","target":"qzone, qq, weibo, wechat, douban, linkedin, facebook, twitter, google"}},"stick_top":{"position":"right","icon":"fas fa-thumbtack","rotate":"45deg","color":"#999"},"gitalk":{"enable":false,"owner":null,"repo":null,"client_id":null,"client_secret":null,"admin":null,"distraction_free_mode":false,"language":null},"valine":{"enable":false,"appid":null,"appkey":null,"notify":true,"verify":true,"placeholder":"Just go go","avatar":"mp","meta":"nick,mail,link","pageSize":10,"visitor":false,"recordIP":false,"language":null},"minivaline":{"enable":false,"appId":null,"appKey":null,"placeholder":"Write a Comment","adminEmailMd5":null,"math":true,"md":true,"lang":null},"livere":{"enable":false,"uid":null},"disqus":{"enable":false,"shortname":null,"count":true},"utterances":{"enable":false,"owner":null,"repo":null,"mapping":"title","label":"utterances","theme":"github-light","script_url":"https://utteranc.es/client.js"},"busuanzi":{"enable":false,"icon_only":false,"site_uv":{"enable":true,"icon":"fas fa-user"},"site_pv":{"enable":true,"icon":"fas fa-eye"},"post_pv":{"enable":true,"icon":"fas fa-eye"}},"google_analytics":null,"baidu_analytics":null,"tencent_analytics":null,"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"show_stats":true}},"local_search":{"enable":false},"canvas_ribbon":{"enable":false,"size":300,"alpha":0.6,"zIndex":-1},"canvas_nest":{"enable":true,"color":"0,0,0","opacity":0.6,"count":200,"zIndex":-1},"math":{"enable":false,"per_page":false,"engine":"katex","mathjax":{"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","mhchem":{"enable":false,"mhchem_js":"https://cdn.jsdelivr.net/npm/mathjax-mhchem@3.3.2/mhchem.min.js"}},"katex":{"cdn":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/katex.min.css","copy_tex":{"enable":true,"copy_tex_js":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.min.js","copy_tex_css":"https://cdn.jsdelivr.net/npm/katex@0.10.2/dist/contrib/copy-tex.css"}}},"fancybox":false,"zoom_image":{"enable":true,"mask_color":"rgba(0,0,0,0.6)","gap_aside":"20px"},"gallery_waterfall":{"enable":false,"col_width":"220px","gap_x":"10px","gap_y":"10px"},"lazyload":{"enable":false,"placeholder":"gif"},"quicklink":{"enable":false,"home":true,"archive":true,"delay":true,"timeout":10000,"priority":true,"ignores":["/\\/api\\/?/","uri => uri.includes('.xml')","uri => uri.includes('.zip')","(uri, el) => el.hasAttribute('nofollow')","(uri, el) => el.hasAttribute('noprefetch')"]},"pjax":{"enable":false,"avoid_banner":false,"elements":null,"selectors":null,"switches":null,"switchesOptions":null,"history":true,"scrollTo":false,"scrollRestoration":false,"cacheBust":false,"debug":false,"currentUrlFullReload":false,"timeout":0},"google_adsense":{"enable":false,"client":null,"js_src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"},"external_link":{"icon":{"enable":true,"name":"fas fa-external-link-alt","color":"#aaa"}},"shortcuts":{"switch_post":{"enable":false}},"tag_cloud":{"start_color":"#a4d8fa","end_color":"#49b1f5","min_size":16,"max_size":26,"max_amount":200},"kill_old_ie":{"enable":false,"warning_url":"https://support.dmeng.net/upgrade-your-browser.html"},"css":"css","js":"js","images":"images","icon":{"search":"fas fa-search","localsearch_empty":"far fa-meh","menu_btn":"fas fa-bars","feed_email":"fas fa-envelope","feed_rss":"fas fa-rss","paginator_prev":"fas fa-angle-left","paginator_next":"fas fa-angle-right","read_more_btn":"fas fa-long-arrow-alt-right","post_tags":"fas fa-tag","copy_btn":"fas fa-copy","prompt_success":"fas fa-check-circle","prompt_info":"fas fa-arrow-circle-right","prompt_warning":"fas fa-exclamation-circle","prompt_error":"fas fa-times-circle","valine_visitor":"fas fa-eye","post_heading":"fas fa-link","notetag_default":"fas fa-arrow-circle-right","notetag_success":"fas fa-check-circle","notetag_info":"fas fa-info-circle","notetag_warning":"fas fa-exclamation-circle","notetag_danger":"fas fa-minus-circle"},"cdn":{"fontawesome":null,"jquery":null,"velocity":null,"velocity_ui":null,"gitalk_js":null,"gitalk_css":null,"gitalk_md5":null,"valine":null,"leancloud_storage":null,"minivaline":null,"busuanzi":null,"instantsearch_js":null,"instantsearch_css":null,"canvas_ribbon":null,"canvas_nest":null,"fancybox_js":null,"fancybox_css":null,"masonry":null,"lazyload":null,"quicklink":null,"pjax":null,"share_js":null,"share_css":null},"rootConfig":{"title":"在下的小书架","subtitle":"对一件事理解的越深，就能做的越好！","description":"","author":"zxr","language":"zh-CN","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"stun","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/qingfengzxr/qingfengzxr.github.io","branch":"master","message":"(Site update {{ now('YYYY-MM-DD HH:mm:ss') }})"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"","more":"\n        <h4 id=\"重要概念：\"   >\n          <a href=\"#重要概念：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>重要概念：</h4>\n      \n        <h4 id=\"Docker镜像\"   >\n          <a href=\"#Docker镜像\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>Docker镜像</h4>\n      <p>类似于虚拟机镜像，可以将它理解为一个面向Docker引擎的只读模板，包含了文件系统。镜像是创建Docker容器的基础。通过版本管理和增量的文件系统，Docker提供了一套十分简单的机制来创建和更新现有的镜像。</p>\n<p>镜像文件一般由若干层组成，层其实是AUFS(Advanced File System,一种联合文件系统)中的重要概念，是实现增量保存与更新的基础。</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker pull ubuntu:14.04 <span class=\"comment\">#下载14.04标签的镜像</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker pull dl.dockerpool.com:5000/ubuntu <span class=\"comment\">#选择从DockerPool社区的镜像源下载</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -t -i ubuntu /bin/bash <span class=\"comment\">#利用镜像创建一个容器并在其中运行bash应用</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker images <span class=\"comment\">#列出本地主机上已有的所有镜像，镜像ID的信息十分重要，它唯一标识镜像</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">可以使用docker tag命令为本地镜像添加新的标签，例如添加一个新的ubuntu:latest镜像标签</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker tag dl.dockerpool.com:5000/ubuntu:latest ubuntu:latest</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker inspect 5506de2b643b <span class=\"comment\">#可以获取镜像的详细信息，其返回一个JSON格式的消息</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker search mysql <span class=\"comment\">#搜索远端仓库中共享的镜像，默认搜官方仓库，输出结果按星际评价排序</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">可以删除镜像，其中IMAGE可以为标签或ID.(*当IMAGE是标签时，只有在镜像只剩一个标签时才会删除该镜像文件的所有AUFS层)</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker rmi [IMAGE]</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker rm [ID] <span class=\"comment\">#删除容器</span></span></span><br></pre></td></tr></table></div></figure>\n\n<p><strong>创建镜像</strong></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker commit [OPTIONS] </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">OPTIONS = -a,--author=<span class=\"string\">\"\"</span>作者信息</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">OPTIONS = -m,--message=<span class=\"string\">\"\"</span>提交信息</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">OPTIONS = -p,--pause=<span class=\"literal\">true</span>提交时暂停容器运行</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动一个容器并运行一些操作后，该容器和原镜像相比，已经发生了改变，可以使用docker commit命令来提交为一个新的镜像。提交时可以使用ID或名称来指定容器。</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo docker commit -m <span class=\"string\">\"Add a new file\"</span> -a <span class=\"string\">\"Docker Newbee\"</span> a925cb403f0 <span class=\"built_in\">test</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">运行顺利的话，命令返回新创建的镜像的ID信息</span></span><br></pre></td></tr></table></div></figure>\n\n<p><strong>基于本地模板导入</strong></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">也可以直接从一个操作系统模板文件导入一个镜像。</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo cat ubuntu-14.04-x86_64-minimal.tar.gz |docker import - ubuntu:14.04</span></span><br></pre></td></tr></table></div></figure>\n\n<p><strong>存出和载入镜像</strong></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">存出镜像到本地文件</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker save -o ubuntu_14.04.tar ubuntu:14.04</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">从存出的本地文件再导入到本地镜像库</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker load --input ubuntu_14.04.tar</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker load &lt; ubuntu_14.04.tar</span></span><br></pre></td></tr></table></div></figure>\n\n<p><strong>上传镜像</strong></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用docker push上传镜像到仓库，默认上传到DockerHub官方仓库（需要登录）</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker tag <span class=\"built_in\">test</span>:latest user/<span class=\"built_in\">test</span>:latest</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker push user/<span class=\"built_in\">test</span>:latest</span></span><br></pre></td></tr></table></div></figure>\n\n\n\n\n        <h4 id=\"Docker容器\"   >\n          <a href=\"#Docker容器\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>Docker容器</h4>\n      <p>类似于一个轻量级的沙箱，Docker利用容器来运行和隔离应用。容器是从镜像创建的应用运行实例，可以将其启动、开始、停止、删除，而这些容器是<strong>相互隔离、不可见的</strong>。</p>\n<p>Docker带有<strong>额外的可写文件层</strong>。如果认为虚拟机是模拟运行的一整套操作系统（提供了运行态环境和其他系统环境）和跑在上面的应用。那么Docker容器就是独立运行的一个或一组应用，以及他们的必须环境。</p>\n<p><strong>新建与启动容器</strong></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用docker create可以新建一个容器.使用该命令创建的容器处于停止状态，可以使用docker start命令来启动它</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker create -it ubuntu:latest</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用docker run等价于先执行docker create 再执行 docker start</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">下面的命令输出一个hello world ，之后容器将自动终止</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run ubuntu /bin/<span class=\"built_in\">echo</span> <span class=\"string\">'hello world'</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果添加 --rm 标记，则容器在终止后会立刻删除</span></span><br></pre></td></tr></table></div></figure>\n\n<p><strong>使用docker run创建容器，后台运行的标准操作</strong>包括：</p>\n<ol>\n<li>检查本地是否存在指定的镜像，不存在则从公有仓库下载</li>\n<li>利用镜像创建并启动一个容器</li>\n<li>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</li>\n<li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</li>\n<li>从地址池配置一个IP地址给容器</li>\n<li>执行用户指定的应用程序</li>\n<li>执行完毕后容器被终止</li>\n</ol>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">下面命令将启动一个bash终端，并允许用户交互</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -t -i ubuntu:14.04 /bin/bash </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用-t选项可以让Docker分配一个伪终端并绑定到容器的标准输入上</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用-i选型可以让容器的标准输入保持打开</span></span><br></pre></td></tr></table></div></figure>\n\n<p><em>Docker容器认为，当运行的应用退出后，容器也没有了继续运行的必要</em></p>\n<p><strong>守护态运行</strong></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -d ubuntu /bin/sh -c <span class=\"string\">\"while true;do echo hello world;sleep 1;done\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -d选项能够让容器在后台以守护态形式运行</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> --rm和-d参数不能同时使用</span></span><br></pre></td></tr></table></div></figure>\n\n<p><strong>终止容器</strong></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">可以使用docker stop来终止一个运行中的容器</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker stop ce5</span></span><br></pre></td></tr></table></div></figure>\n\n<p><strong>进入容器</strong></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker attach nostalgic_hypatia</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用attach命令，当多个窗口同时attach到同一个容器时，所有的窗口都会同步显示，一个窗口阻塞全都阻塞</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker <span class=\"built_in\">exec</span> -ti 243c32535da7 /bin/bash</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"built_in\">exec</span>能避免attach的问题</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo nsenter --target 10981 --mount --uts --ipc --net --pid</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">为了使用nsenter连接到容器，还需要找到容器的进程PID</span></span><br></pre></td></tr></table></div></figure>\n\n<p><strong>删除容器</strong></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker rm [OPTIONS] CONTAINER [CONTAINER...]</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -f, --force=flase强行终止并删除一个运行中的容器</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -l, --link=flase删除容器的连接，但保留容器</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -v, --volumes=<span class=\"literal\">false</span> 删除容器挂载的数据卷</span></span><br></pre></td></tr></table></div></figure>\n\n<p><strong>导入和导出容器</strong></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker <span class=\"built_in\">export</span> CONTAINER</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker <span class=\"built_in\">export</span> ce5 &gt;test_for_run.tar  <span class=\"comment\">#导出容器ce5到test_for_run.tar文件</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  cat test_for_run.tar | sudo docker import - <span class=\"built_in\">test</span>/ubuntu:v1.0  </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">导出的文件可以用docker import 命令导入，成为镜像</span></span><br></pre></td></tr></table></div></figure>\n\n<p>实际上，既可以使用docker load命令来导入镜像存储文件到本地的镜像库，又可以使用docker import命令来导入一个容器快照到本地镜像库。二者的区别在于容器快照文件将丢弃所有历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也比较大。</p>\n\n        <h4 id=\"Docker仓库\"   >\n          <a href=\"#Docker仓库\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a>Docker仓库</h4>\n      <p>类似于代码仓库，是Docker集中存放镜像文件的场所。</p>\n<p><strong>创建和使用私有仓库</strong></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -d -p 5000:5000 registry</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">这将自动下载并启动一个registry容器，创建本地的私有仓库服务</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">默认情况下会将仓库创建在容器的/tmp/registry目录下，可以用过-v参数指定存放路径</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">此时本地将启动一个私有仓库服务，监听端口为5000</span></span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li><strong>数据卷</strong></li>\n</ul>\n<p>数据卷是一个可供容器使用的特殊目录，它绕过文件系统，可以提供很多有用的特性：</p>\n<ol>\n<li>数据卷可以在容器之间共享和重用</li>\n<li>对数据卷的修改会立马生效</li>\n<li>对数据卷的更新不会影响镜像</li>\n<li>卷会一直存在，直到没有容器使用</li>\n</ol>\n<p>数据卷的使用，类似于Linux下对目录或文件进行mount操作。</p>\n<p><strong>创建数据卷</strong></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用docker run命令加 -v 标记可以在容器内创建一个数据卷，多次使用-v标记可以创建多个数据卷</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">下面使用training/webapp镜像创建一个web容器，并创建一个数据卷挂载到容器的/webapp目录：</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -d -P --name web -v /webapp training/webapp python app.py</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">*使用-v标记也可以指定挂载一个本地的已有目录到容器中去作为数据卷。本地目录的路径必须是绝对路径，如果路径不<span class=\"comment\">##存在，Docker会自动创建</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">下面的命令加载主机的/src/webapp目录到容器的/opt/webapp目录</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -d -P --name web -v /src/webapp:/opt/webapp training/webapp python app.py</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">Docker挂载数据卷的默认权限是读写（rw），用户也可以通过，ro指定为只读</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -d -P --name web -v /src/webapp:/opt/webapp:ro training/webapp python app.py </span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">-v标记也可以从主机挂载单个文件到容器作为数据卷</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run --rm --it -v ~/.bash_history:/.bash_history ubuntu /bin/bash</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">这样就可以记录在容器里输入过的命令历史了</span></span><br></pre></td></tr></table></div></figure>\n\n<p><strong>数据卷容器</strong></p>\n<p>需要在容器之间共享一些持续更新的数据，最简答的方式是使用数据卷容器。数据卷容器其实就是一个普通的容器，只是专门用它来提供数据卷供其他容器挂载使用。</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">首先：创建一个数据卷容器dbdata,并在其中创建一个数据卷挂载到/dbdata</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -it -v /dbdata --name dbdate ubuntu</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">然后：可以在其他容器中使用 --volumes-from来挂载dbdata容器中的数据卷</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -it --volumes-from dbdata --name db1 ubuntu</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -it --volumes-from dbdata --name db2 ubuntu</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">上面的命令将创建db1和db2两个容器，并从dbdata容器挂载数据卷，此时两个容器都挂载同一个数据卷到相同的<span class=\"comment\">#/dbdata目录，三个容器任何一方在该目录下写入，其他容器都可以看到。</span></span></span><br></pre></td></tr></table></div></figure>\n\n<p>删除了挂载的容器，数据卷并不会被自动删除。如果要删除一个数据卷，必须在删除最后一个还挂载着它的容器时显式使用docker rm -v命令来指定同时删除关联的容器。</p>\n<p>可以利用数据卷容器对其中的数据卷进行备份、恢复，以实现数据的迁移。</p>\n<p><strong>备份</strong></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run --volumes-from dbdata -v $(<span class=\"built_in\">pwd</span>):/backup --name worker ubuntu tar cvf /backup/backup.tar /dbdata</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">上面的命令首先利用ubuntu镜像创建了一个容器worker。使用--volumes-from dbdata参数让worker容器挂载<span class=\"comment\">#dbdata容器的数据卷(即dbdata数据卷)；使用-v$(pwd):/backup参数来挂载本地的当前目录到worker容器的#/backup/目录。</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">work容器启动后，使用了tar cvf /backup/backup.tar /dbdata命令来将/dbdata下内容备份为容器内的<span class=\"comment\">#/backup/backup.tar,即宿主主机当前目录下的backup.tar</span></span></span><br></pre></td></tr></table></div></figure>\n\n<p><strong>恢复</strong></p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">首先要创建一个带有数据卷的容器dbdata2</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -v /dbdata --name dbdata2 ubuntu /bin/bash</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">然后创建另一个新的容器，挂载dbdata2的容器，并使用untar解压备份文件到所挂载的容器卷中即可</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run --volumes -form dbdata2 -v $(<span class=\"built_in\">pwd</span>):/backup busybox tar xvf /backup/backup.tar</span></span><br></pre></td></tr></table></div></figure>\n\n\n\n<ul>\n<li><strong>网络配置</strong></li>\n</ul>\n<p>Docker目前提供了映射容器端口到宿主主机和容器互联机制来为容器提供网络服务。除了使用端口映射机制来将容器内应用服务提供给外部网络，还可以通过容器互联系统让多个容器之间进行快捷的网络通信。</p>\n<p><strong>端口映射实现访问容器</strong></p>\n<p>在启动容器的时候，如果不指定对应参数，在容器外部是无法通过网络来访问容器内的网络应用和服务的。</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">通过 -P 或者 -p 参数可以指定端口映射。</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">当使用-P(大写的)标记时，Docker会随机映射一个49000~49900的端口至容器内部开放的网络端口</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -d -P training/webapp python app.py</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker ps -l</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">上面的现象：本地主机的49155被映射到了容器的5000端口</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">访问宿主主机的49115端口即可访问容器内Web应用提供的界面</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> -p(小写的)则可以指定要映射的端口，注意，在一个指定端口上只可以绑定一个容器</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">支持的格式：ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">映射所有接口地址,此时默认会绑定本地所有接口上的所有地址</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -d -p 5000:5000 training/webapp python app.py</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">映射到指定地址的指定端口 ip:hostPort:containerPort</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -d -p 127.0.0.1:5000:5000 traning/webapp python app.py</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">映射到指定地址的任意端口 ip::containerPort</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -d -p 127.0.0.1::5000 training/webapp python app.py</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用udp标记来指定udp端口</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看映射端口配置</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker port</span></span><br></pre></td></tr></table></div></figure>\n\n<p><strong>容器的连接系统</strong></p>\n<p>它会在源和接收容器之间创建一个隧道，接收容器可以看到源容器指定的信息。</p>\n<p>连接系统依据容器的名称来执行，因此，首先需要自定义一个好记的容器名。自定义命名容器有两个好处：</p>\n<ol>\n<li>自定义的命名，比较好记</li>\n<li>当要连接其他容器时候，可以作为一个有用的参考点，比如连接web容器到db容器</li>\n</ol>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用--name标记可以为容器自定义命名：</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -d -P --name web training/webapp python app.py</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker inspect -f <span class=\"string\">\"&#123;&#123;.name&#125;&#125;\"</span> 2adab9c82959 <span class=\"comment\">#可以查看容器的名字</span></span></span><br></pre></td></tr></table></div></figure>\n\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">使用--link参数可以让容器之间安全的进行交互</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">  sudo docker run -d -P --name web --link db:db training/webapp python app.py</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">上述命令将使db容器和web容器建立互联我关系</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">--link参数的格式为--link name:<span class=\"built_in\">alias</span>,其中name是要连接的容器的名称，<span class=\"built_in\">alias</span>是这个连接的别名。</span></span><br></pre></td></tr></table></div></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}],"PostAsset":[{"_id":"source/_posts/network/计算机网络笔记与思考/ISP的互联.jpg","slug":"ISP的互联.jpg","post":"ckjcobavl000ahelzht3xhqvq","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckjcobav70004helzathna23g","category_id":"ckjcobavd0006helz0ygtgk0w","_id":"ckjcobavq000ghelz7i0z8b9c"},{"post_id":"ckjcobavi0008helzh4ug2lv7","category_id":"ckjcobavq000hhelz90n59ppe","_id":"ckjcobavs000nhelz901c1k5r"},{"post_id":"ckjcobavk0009helzcdnc5w0u","category_id":"ckjcobavr000jhelz80m5hvg8","_id":"ckjcobavu000rhelz4vgh0vjh"},{"post_id":"ckjcobavl000ahelzht3xhqvq","category_id":"ckjcobavt000ohelzdof99cgn","_id":"ckjcobavw000xhelz38rz32sh"},{"post_id":"ckjcobavo000ehelz0iosc3xr","category_id":"ckjcobavu000shelz2i7kbuy5","_id":"ckjcobavw000zhelz9elidhgn"},{"post_id":"ckjcobavb0005helz5rrb00tj","category_id":"ckjcobavm000bhelzfkn39m8m","_id":"ckjcobavx0013helzfpmy0n0t"},{"post_id":"ckjcobavb0005helz5rrb00tj","category_id":"ckjcobavv000vhelz64shhm8s","_id":"ckjcobavx0014helzezpfcwhl"},{"post_id":"ckjcobavp000fhelzcf5zey6h","category_id":"ckjcobavw0010helz8laz9wi8","_id":"ckjcobavx0016helz968c038b"},{"post_id":"ckjcobbbg0017helzcykx14je","category_id":"ckjcobbbk001bhelzddj3119z","_id":"ckjcobbc7001thelz7jmt4t4a"},{"post_id":"ckjcobbbg0017helzcykx14je","category_id":"ckjcobbbu001lhelzf7rk74zs","_id":"ckjcobbc8001vhelzbtr42h2z"},{"post_id":"ckjcobbbi0018helz34h358ho","category_id":"ckjcobbbk001bhelzddj3119z","_id":"ckjcobbc9001xhelz3be8a96d"},{"post_id":"ckjcobbbi0018helz34h358ho","category_id":"ckjcobbbu001lhelzf7rk74zs","_id":"ckjcobbc9001yhelz9dzzby0b"},{"post_id":"ckjcobbbk001ahelzdp844fnn","category_id":"ckjcobbbr001hhelzg6k12zss","_id":"ckjcobbca001zhelz98s9681t"},{"post_id":"ckjcobbbk001ahelzdp844fnn","category_id":"ckjcobbbx001rhelz5ymaftyt","_id":"ckjcobbca0020helzb4av5uop"},{"post_id":"ckjcobbbl001chelz51legtdt","category_id":"ckjcobbbr001hhelzg6k12zss","_id":"ckjcobbce0021helz33rgen9z"},{"post_id":"ckjcobbbl001chelz51legtdt","category_id":"ckjcobbc8001whelz8gtj0ibn","_id":"ckjcobbcf0022helz3g6shqys"},{"post_id":"ckjcobbcn0023helz0h7009pp","category_id":"ckjcobbcq0025helzdukf5m0l","_id":"ckjcobbcs0028helz9ftp52iv"},{"post_id":"ckjcobbcn0023helz0h7009pp","category_id":"ckjcobbcr0027helz7iyv4uav","_id":"ckjcobbcs0029helz5ehi7lc1"},{"post_id":"ckkxmyjrk0000iqlz9g470va3","category_id":"ckkxmyjs20001iqlzcmezf83q","_id":"ckkxmyjse0004iqlz27e4g185"}],"PostTag":[{"post_id":"ckjcobav70004helzathna23g","tag_id":"ckjcobavh0007helzberwhnb9","_id":"ckjcobavo000dhelzhm067nrc"},{"post_id":"ckjcobavb0005helz5rrb00tj","tag_id":"ckjcobavn000chelz29p690sb","_id":"ckjcobavs000lhelzdpal60dq"},{"post_id":"ckjcobavb0005helz5rrb00tj","tag_id":"ckjcobavq000ihelzgbo125qz","_id":"ckjcobavs000mhelzgq83gx02"},{"post_id":"ckjcobavi0008helzh4ug2lv7","tag_id":"ckjcobavs000khelzepgb1bie","_id":"ckjcobavt000qhelzb7tjdrdr"},{"post_id":"ckjcobavk0009helzcdnc5w0u","tag_id":"ckjcobavt000phelz8ko05kxd","_id":"ckjcobavv000uhelz7uavb9uc"},{"post_id":"ckjcobavl000ahelzht3xhqvq","tag_id":"ckjcobavu000thelzddtw0e7s","_id":"ckjcobavw000yhelz0yk97baw"},{"post_id":"ckjcobavo000ehelz0iosc3xr","tag_id":"ckjcobavv000whelz8aucekjl","_id":"ckjcobavx0012helz69g32lrv"},{"post_id":"ckjcobavp000fhelzcf5zey6h","tag_id":"ckjcobavw0011helzdo7y7ty7","_id":"ckjcobavx0015helz7vga6b1h"},{"post_id":"ckjcobbbg0017helzcykx14je","tag_id":"ckjcobbbj0019helz98rbbru7","_id":"ckjcobbbq001fhelzbdw18x4l"},{"post_id":"ckjcobbbi0018helz34h358ho","tag_id":"ckjcobbbj0019helz98rbbru7","_id":"ckjcobbbs001ihelz2pd79xjl"},{"post_id":"ckjcobbbk001ahelzdp844fnn","tag_id":"ckjcobbbq001ghelzb1b754jc","_id":"ckjcobbbv001nhelz1l89erm1"},{"post_id":"ckjcobbbk001ahelzdp844fnn","tag_id":"ckjcobbbs001jhelz9a7r48a4","_id":"ckjcobbbv001ohelzdh640l1j"},{"post_id":"ckjcobbbl001chelz51legtdt","tag_id":"ckjcobbbs001jhelz9a7r48a4","_id":"ckjcobbc7001shelz2zl4dqa7"},{"post_id":"ckjcobbbl001chelz51legtdt","tag_id":"ckjcobbbq001ghelzb1b754jc","_id":"ckjcobbc8001uhelzaiin2r28"},{"post_id":"ckjcobbcn0023helz0h7009pp","tag_id":"ckjcobbcq0024helzfsko2e47","_id":"ckjcobbcr0026helz9yo3f4ug"},{"post_id":"ckkxmyjrk0000iqlz9g470va3","tag_id":"ckkxmyjsc0002iqlz33oghg3k","_id":"ckkxmyjse0003iqlz84t21eda"}],"Tag":[{"name":"C","_id":"ckjcobavh0007helzberwhnb9"},{"name":"Linux","_id":"ckjcobavn000chelz29p690sb"},{"name":"pthread","_id":"ckjcobavq000ihelzgbo125qz"},{"name":"nginx","_id":"ckjcobavs000khelzepgb1bie"},{"name":"OS","_id":"ckjcobavt000phelz8ko05kxd"},{"name":"computer_network","_id":"ckjcobavu000thelzddtw0e7s"},{"name":"oop","_id":"ckjcobavv000whelz8aucekjl"},{"name":"learning-plan","_id":"ckjcobavw0011helzdo7y7ty7"},{"name":"algorithm","_id":"ckjcobbbj0019helz98rbbru7"},{"name":"programming_language","_id":"ckjcobbbq001ghelzb1b754jc"},{"name":"golang","_id":"ckjcobbbs001jhelz9a7r48a4"},{"name":"MYSQL","_id":"ckjcobbcq0024helzfsko2e47"},{"name":"Docker","_id":"ckkxmyjsc0002iqlz33oghg3k"}]}}